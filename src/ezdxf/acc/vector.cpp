/* Generated by Cython 0.29.22 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_22"
#define CYTHON_HEX_VERSION 0x001D16F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__ezdxf__acc__vector
#define __PYX_HAVE_API__ezdxf__acc__vector
/* Early includes */
#include "_cpp_vec3.hpp"
#include <math.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "src\\ezdxf\\acc\\vector.pyx",
  "src\\ezdxf\\acc\\vector.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_5ezdxf_3acc_6vector_Vec2;
struct __pyx_obj_5ezdxf_3acc_6vector_Vec3;
struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct__generate;
struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr;
struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__;
struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate;
struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr;
struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__;

/* "ezdxf/acc/vector.pxd":14
 * from ._cpp_vec3 cimport CppVec3
 * 
 * cdef class Vec2:             # <<<<<<<<<<<<<<
 *     cdef readonly double x, y
 *     cdef CppVec3 to_cpp_vec3(self)
 */
struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 {
  PyObject_HEAD
  struct __pyx_vtabstruct_5ezdxf_3acc_6vector_Vec2 *__pyx_vtab;
  double x;
  double y;
};


/* "ezdxf/acc/vector.pxd":36
 * # angle = atan2(vec2.y, vec2.x)
 * 
 * cdef class Vec3:             # <<<<<<<<<<<<<<
 *     cdef readonly double x, y, z
 *     cdef CppVec3 to_cpp_vec3(self)
 */
struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 {
  PyObject_HEAD
  struct __pyx_vtabstruct_5ezdxf_3acc_6vector_Vec3 *__pyx_vtab;
  double x;
  double y;
  double z;
};


/* "ezdxf/acc/vector.pyx":113
 * 
 *     @staticmethod
 *     def generate(items: Iterable['Vertex']) -> Iterable['Vec2']:             # <<<<<<<<<<<<<<
 *         return (Vec2(item) for item in items)
 * 
 */
struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct__generate {
  PyObject_HEAD
  PyObject *__pyx_v_items;
};


/* "ezdxf/acc/vector.pyx":114
 *     @staticmethod
 *     def generate(items: Iterable['Vertex']) -> Iterable['Vec2']:
 *         return (Vec2(item) for item in items)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct__generate *__pyx_outer_scope;
  PyObject *__pyx_v_item;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "ezdxf/acc/vector.pyx":153
 *             raise IndexError(f'invalid index {index}')
 * 
 *     def __iter__(self) -> Iterable[float]:             # <<<<<<<<<<<<<<
 *         yield self.x
 *         yield self.y
 */
struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__ {
  PyObject_HEAD
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self;
};


/* "ezdxf/acc/vector.pyx":472
 * 
 *     @staticmethod
 *     def generate(items: Iterable['Vertex']) -> Iterable['Vec3']:             # <<<<<<<<<<<<<<
 *         return (Vec3(item) for item in items)
 * 
 */
struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate {
  PyObject_HEAD
  PyObject *__pyx_v_items;
};


/* "ezdxf/acc/vector.pyx":473
 *     @staticmethod
 *     def generate(items: Iterable['Vertex']) -> Iterable['Vec3']:
 *         return (Vec3(item) for item in items)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate *__pyx_outer_scope;
  PyObject *__pyx_v_item;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "ezdxf/acc/vector.pyx":522
 *             raise IndexError(f'invalid index {index}')
 * 
 *     def __iter__(self) -> Iterable[float]:             # <<<<<<<<<<<<<<
 *         yield self.x
 *         yield self.y
 */
struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__ {
  PyObject_HEAD
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self;
};



/* "ezdxf/acc/vector.pyx":48
 *     return normalize_deg_angle(angle)
 * 
 * cdef class Vec2:             # <<<<<<<<<<<<<<
 *     """ Immutable 2D vector.
 * 
 */

struct __pyx_vtabstruct_5ezdxf_3acc_6vector_Vec2 {
  CppVec3 (*to_cpp_vec3)(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *);
};
static struct __pyx_vtabstruct_5ezdxf_3acc_6vector_Vec2 *__pyx_vtabptr_5ezdxf_3acc_6vector_Vec2;


/* "ezdxf/acc/vector.pyx":376
 *     return v
 * 
 * cdef class Vec3:             # <<<<<<<<<<<<<<
 *     """ Immutable 3D vector.
 * 
 */

struct __pyx_vtabstruct_5ezdxf_3acc_6vector_Vec3 {
  CppVec3 (*to_cpp_vec3)(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *);
};
static struct __pyx_vtabstruct_5ezdxf_3acc_6vector_Vec3 *__pyx_vtabptr_5ezdxf_3acc_6vector_Vec3;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_str(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_str(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* IncludeStringH.proto */
#include <string.h>

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static CppVec3 __pyx_f_5ezdxf_3acc_6vector_4Vec2_to_cpp_vec3(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self); /* proto*/
static CppVec3 __pyx_f_5ezdxf_3acc_6vector_4Vec3_to_cpp_vec3(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self); /* proto*/

/* Module declarations from 'ezdxf.acc._cpp_vec3' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'ezdxf.acc.vector' */
static PyTypeObject *__pyx_ptype_5ezdxf_3acc_6vector_Vec2 = 0;
static PyTypeObject *__pyx_ptype_5ezdxf_3acc_6vector_Vec3 = 0;
static PyTypeObject *__pyx_ptype_5ezdxf_3acc_6vector___pyx_scope_struct__generate = 0;
static PyTypeObject *__pyx_ptype_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr = 0;
static PyTypeObject *__pyx_ptype_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__ = 0;
static PyTypeObject *__pyx_ptype_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate = 0;
static PyTypeObject *__pyx_ptype_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr = 0;
static PyTypeObject *__pyx_ptype_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__ = 0;
static double __pyx_v_5ezdxf_3acc_6vector_RAD2DEG;
static double __pyx_v_5ezdxf_3acc_6vector_DEG2RAD;
static double __pyx_v_5ezdxf_3acc_6vector_M_TAU;
static int __pyx_f_5ezdxf_3acc_6vector_isclose(double, double, double, double); /*proto*/
static double __pyx_f_5ezdxf_3acc_6vector_normalize_rad_angle(double); /*proto*/
static double __pyx_f_5ezdxf_3acc_6vector_normalize_deg_angle(double); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_f_5ezdxf_3acc_6vector_v2_add(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_f_5ezdxf_3acc_6vector_v2_sub(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_f_5ezdxf_3acc_6vector_v2_mul(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *, double); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_f_5ezdxf_3acc_6vector_v2_normalize(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *, double); /*proto*/
static double __pyx_f_5ezdxf_3acc_6vector_v2_dot(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *); /*proto*/
static double __pyx_f_5ezdxf_3acc_6vector_v2_det(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *); /*proto*/
static double __pyx_f_5ezdxf_3acc_6vector_v2_dist(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_f_5ezdxf_3acc_6vector_v2_from_angle(double, double); /*proto*/
static double __pyx_f_5ezdxf_3acc_6vector_v2_angle_between(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_f_5ezdxf_3acc_6vector_v2_lerp(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *, double); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_f_5ezdxf_3acc_6vector_v2_ortho(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *, int); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_f_5ezdxf_3acc_6vector_v2_project(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_f_5ezdxf_3acc_6vector_v3_add(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_f_5ezdxf_3acc_6vector_v3_sub(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_f_5ezdxf_3acc_6vector_v3_mul(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, double); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_f_5ezdxf_3acc_6vector_v3_reverse(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *); /*proto*/
static double __pyx_f_5ezdxf_3acc_6vector_v3_dot(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_f_5ezdxf_3acc_6vector_v3_cross(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *); /*proto*/
static CYTHON_INLINE double __pyx_f_5ezdxf_3acc_6vector_v3_magnitude_sqr(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *); /*proto*/
static CYTHON_INLINE double __pyx_f_5ezdxf_3acc_6vector_v3_magnitude(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *); /*proto*/
static double __pyx_f_5ezdxf_3acc_6vector_v3_dist(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_f_5ezdxf_3acc_6vector_v3_from_angle(double, double); /*proto*/
static double __pyx_f_5ezdxf_3acc_6vector_v3_angle_between(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *); /*proto*/
static double __pyx_f_5ezdxf_3acc_6vector_v3_angle_about(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_f_5ezdxf_3acc_6vector_v3_normalize(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, double); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_f_5ezdxf_3acc_6vector_v3_lerp(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, double); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_f_5ezdxf_3acc_6vector_v3_ortho(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, int); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_f_5ezdxf_3acc_6vector_v3_project(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *); /*proto*/
static int __pyx_f_5ezdxf_3acc_6vector_v3_isclose(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, double, double); /*proto*/
#define __Pyx_MODULE_NAME "ezdxf.acc.vector"
extern int __pyx_module_is_main_ezdxf__acc__vector;
int __pyx_module_is_main_ezdxf__acc__vector = 0;

/* Implementation of 'ezdxf.acc.vector' */
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_round;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_NotImplemented;
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_v[] = "v";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_z[] = "z";
static const char __pyx_k__2[] = "(";
static const char __pyx_k__3[] = ", ";
static const char __pyx_k__4[] = ")";
static const char __pyx_k_p1[] = "p1";
static const char __pyx_k_p2[] = "p2";
static const char __pyx_k_add[] = "__add__";
static const char __pyx_k_ccw[] = "ccw";
static const char __pyx_k_mul[] = "__mul__";
static const char __pyx_k_neg[] = "__neg__";
static const char __pyx_k_res[] = "res";
static const char __pyx_k_str[] = "__str__";
static const char __pyx_k_sub[] = "__sub__";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_tmp[] = "tmp";
static const char __pyx_k_xyz[] = "xyz";
static const char __pyx_k_List[] = "List";
static const char __pyx_k_Vec2[] = "Vec2";
static const char __pyx_k_Vec3[] = "Vec3";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_iadd[] = "__iadd__";
static const char __pyx_k_imul[] = "__imul__";
static const char __pyx_k_isub[] = "__isub__";
static const char __pyx_k_iter[] = "__iter__";
static const char __pyx_k_lerp[] = "lerp";
static const char __pyx_k_list[] = "list";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_radd[] = "__radd__";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_Tuple[] = "Tuple";
static const char __pyx_k_VecXY[] = "VecXY";
static const char __pyx_k_angle[] = "angle";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_other[] = "other";
static const char __pyx_k_round[] = "round";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_tuple[] = "tuple";
static const char __pyx_k_Vector[] = "Vector";
static const char __pyx_k_Vertex[] = "Vertex";
static const char __pyx_k_X_AXIS[] = "X_AXIS";
static const char __pyx_k_Y_AXIS[] = "Y_AXIS";
static const char __pyx_k_Z_AXIS[] = "Z_AXIS";
static const char __pyx_k_copy_2[] = "__copy__";
static const char __pyx_k_factor[] = "factor";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_length[] = "length";
static const char __pyx_k_random[] = "random";
static const char __pyx_k_rotate[] = "rotate";
static const char __pyx_k_target[] = "target";
static const char __pyx_k_typing[] = "typing";
static const char __pyx_k_NULLVEC[] = "NULLVEC";
static const char __pyx_k_abs_tol[] = "abs_tol";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_is_null[] = "is_null";
static const char __pyx_k_ndigits[] = "ndigits";
static const char __pyx_k_rel_tol[] = "rel_tol";
static const char __pyx_k_uniform[] = "uniform";
static const char __pyx_k_Iterable[] = "Iterable";
static const char __pyx_k_Sequence[] = "Sequence";
static const char __pyx_k_distance[] = "distance";
static const char __pyx_k_generate[] = "generate";
static const char __pyx_k_reversed[] = "reversed";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_from_angle[] = "from_angle";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_Vec2___iter[] = "Vec2.__iter__";
static const char __pyx_k_Vec3___iter[] = "Vec3.__iter__";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_TYPE_CHECKING[] = "TYPE_CHECKING";
static const char __pyx_k_ezdxf_eztypes[] = "ezdxf.eztypes";
static const char __pyx_k_invalid_index[] = "invalid index ";
static const char __pyx_k_spatial_angle[] = "spatial_angle";
static const char __pyx_k_NotImplemented[] = "NotImplemented";
static const char __pyx_k_from_deg_angle[] = "from_deg_angle";
static const char __pyx_k_ezdxf_acc_vector[] = "ezdxf.acc.vector";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_normalize_deg_angle[] = "_normalize_deg_angle";
static const char __pyx_k_normalize_rad_angle[] = "_normalize_rad_angle";
static const char __pyx_k_invalid_argument_count[] = "invalid argument count";
static const char __pyx_k_generate_locals_genexpr[] = "generate.<locals>.genexpr";
static const char __pyx_k_src_ezdxf_acc_vector_pyx[] = "src\\ezdxf\\acc\\vector.pyx";
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_n_s_Iterable;
static PyObject *__pyx_n_s_List;
static PyObject *__pyx_n_s_NULLVEC;
static PyObject *__pyx_n_s_NotImplemented;
static PyObject *__pyx_n_s_Sequence;
static PyObject *__pyx_n_s_TYPE_CHECKING;
static PyObject *__pyx_n_s_Tuple;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_Vec2;
static PyObject *__pyx_n_u_Vec2;
static PyObject *__pyx_n_s_Vec2___iter;
static PyObject *__pyx_n_s_Vec3;
static PyObject *__pyx_n_u_Vec3;
static PyObject *__pyx_n_s_Vec3___iter;
static PyObject *__pyx_n_s_VecXY;
static PyObject *__pyx_n_s_Vector;
static PyObject *__pyx_n_s_Vertex;
static PyObject *__pyx_n_s_X_AXIS;
static PyObject *__pyx_n_s_Y_AXIS;
static PyObject *__pyx_n_s_Z_AXIS;
static PyObject *__pyx_kp_u__2;
static PyObject *__pyx_kp_u__3;
static PyObject *__pyx_kp_u__4;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_abs_tol;
static PyObject *__pyx_n_s_add;
static PyObject *__pyx_n_s_angle;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_s_ccw;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_copy_2;
static PyObject *__pyx_n_s_distance;
static PyObject *__pyx_n_s_ezdxf_acc_vector;
static PyObject *__pyx_n_s_ezdxf_eztypes;
static PyObject *__pyx_n_s_factor;
static PyObject *__pyx_n_s_from_angle;
static PyObject *__pyx_n_s_from_deg_angle;
static PyObject *__pyx_n_s_generate;
static PyObject *__pyx_n_s_generate_locals_genexpr;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_iadd;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_imul;
static PyObject *__pyx_kp_u_invalid_argument_count;
static PyObject *__pyx_kp_u_invalid_index;
static PyObject *__pyx_n_s_is_null;
static PyObject *__pyx_n_s_isub;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_iter;
static PyObject *__pyx_n_s_length;
static PyObject *__pyx_n_s_lerp;
static PyObject *__pyx_n_s_list;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mul;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_ndigits;
static PyObject *__pyx_n_s_neg;
static PyObject *__pyx_n_s_normalize_deg_angle;
static PyObject *__pyx_n_s_normalize_rad_angle;
static PyObject *__pyx_n_s_other;
static PyObject *__pyx_n_s_p1;
static PyObject *__pyx_n_s_p2;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_radd;
static PyObject *__pyx_n_s_random;
static PyObject *__pyx_n_s_rel_tol;
static PyObject *__pyx_n_s_res;
static PyObject *__pyx_n_s_reversed;
static PyObject *__pyx_n_s_rotate;
static PyObject *__pyx_n_s_round;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_spatial_angle;
static PyObject *__pyx_kp_s_src_ezdxf_acc_vector_pyx;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_str;
static PyObject *__pyx_n_s_sub;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_target;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_tmp;
static PyObject *__pyx_n_s_tuple;
static PyObject *__pyx_n_s_typing;
static PyObject *__pyx_n_s_uniform;
static PyObject *__pyx_n_s_v;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_xyz;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_z;
static PyObject *__pyx_pf_5ezdxf_3acc_6vector__normalize_rad_angle(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_angle); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_2_normalize_deg_angle(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_angle); /* proto */
static int __pyx_pf_5ezdxf_3acc_6vector_4Vec2___cinit__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_2__reduce__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_4vec3___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_4round(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, PyObject *__pyx_v_ndigits); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_6list(PyObject *__pyx_v_items); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_8tuple(PyObject *__pyx_v_items); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_8generate_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_10generate(PyObject *__pyx_v_items); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_12from_angle(double __pyx_v_angle, double __pyx_v_length); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_14from_deg_angle(double __pyx_v_angle, double __pyx_v_length); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_16__str__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_18__repr__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_5ezdxf_3acc_6vector_4Vec2_20__len__(CYTHON_UNUSED struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self); /* proto */
static Py_hash_t __pyx_pf_5ezdxf_3acc_6vector_4Vec2_22__hash__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_24copy(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_26__copy__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_28__deepcopy__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_memodict); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_30__getitem__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_32__iter__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_35__abs__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_9magnitude___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_7is_null___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_5angle___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_9angle_deg___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_37orthogonal(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, PyObject *__pyx_v_ccw); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_39lerp(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, PyObject *__pyx_v_other, double __pyx_v_factor); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_41normalize(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, double __pyx_v_length); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_43project(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_45__neg__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self); /* proto */
static int __pyx_pf_5ezdxf_3acc_6vector_4Vec2_47__bool__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_49isclose(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, PyObject *__pyx_v_other, double __pyx_v_rel_tol, double __pyx_v_abs_tol); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_51__eq__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_53__lt__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_55__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_57__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_59__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_factor); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_61__rmul__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, double __pyx_v_factor); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_63__truediv__(PyObject *__pyx_v_self, double __pyx_v_factor); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_65dot(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_67det(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_69distance(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_71angle_between(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_73rotate(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, double __pyx_v_angle); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_75rotate_deg(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, double __pyx_v_angle); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_77sum(PyObject *__pyx_v_items); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_1x___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_1y___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self); /* proto */
static int __pyx_pf_5ezdxf_3acc_6vector_4Vec3___cinit__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_2__reduce__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_2xy___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_3xyz___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_4vec2___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_4replace(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_z); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_6round(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_ndigits); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_8list(PyObject *__pyx_v_items); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_10tuple(PyObject *__pyx_v_items); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_8generate_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_12generate(PyObject *__pyx_v_items); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_14from_angle(double __pyx_v_angle, double __pyx_v_length); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_16from_deg_angle(double __pyx_v_angle, double __pyx_v_length); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_18random(double __pyx_v_length); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_20__str__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_22__repr__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_5ezdxf_3acc_6vector_4Vec3_24__len__(CYTHON_UNUSED struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self); /* proto */
static Py_hash_t __pyx_pf_5ezdxf_3acc_6vector_4Vec3_26__hash__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_28copy(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_30__deepcopy__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_memodict); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_32__getitem__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_34__iter__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_37__abs__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_9magnitude___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_12magnitude_xy___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_16magnitude_square___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_7is_null___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_39is_parallel(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_other, double __pyx_v_rel_tol, double __pyx_v_abs_tol); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_13spatial_angle___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_17spatial_angle_deg___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_5angle___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_9angle_deg___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_41orthogonal(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_ccw); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_43lerp(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_other, double __pyx_v_factor); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_45project(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_47normalize(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, double __pyx_v_length); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_49reversed(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_51__neg__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self); /* proto */
static int __pyx_pf_5ezdxf_3acc_6vector_4Vec3_53__bool__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_55isclose(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_other, double __pyx_v_rel_tol, double __pyx_v_abs_tol); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_57__eq__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_59__lt__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_61__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_63__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_65__rsub__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_67__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_factor); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_69__rmul__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, double __pyx_v_factor); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_71__truediv__(PyObject *__pyx_v_self, double __pyx_v_factor); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_73sum(PyObject *__pyx_v_items); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_75dot(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_77cross(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_79distance(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_81angle_between(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_83angle_about(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_base, PyObject *__pyx_v_target); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_85rotate(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, double __pyx_v_angle); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_87rotate_deg(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, double __pyx_v_angle); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_1x___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_1y___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_1z___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_p1, PyObject *__pyx_v_p2); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_6lerp(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_p1, PyObject *__pyx_v_p2, double __pyx_v_factor); /* proto */
static PyObject *__pyx_tp_new_5ezdxf_3acc_6vector_Vec2(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5ezdxf_3acc_6vector_Vec3(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5ezdxf_3acc_6vector___pyx_scope_struct__generate(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_codeobj__7;
static PyObject *__pyx_codeobj__9;
static PyObject *__pyx_codeobj__11;
static PyObject *__pyx_codeobj__13;
static PyObject *__pyx_codeobj__15;
static PyObject *__pyx_codeobj__17;
static PyObject *__pyx_codeobj__19;
static PyObject *__pyx_codeobj__21;
static PyObject *__pyx_codeobj__23;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__27;
static PyObject *__pyx_codeobj__29;
static PyObject *__pyx_codeobj__31;
static PyObject *__pyx_codeobj__33;
static PyObject *__pyx_codeobj__35;
static PyObject *__pyx_codeobj__41;
static PyObject *__pyx_codeobj__43;
/* Late includes */

/* "ezdxf/acc/vector.pyx":15
 *     from ezdxf.eztypes import VecXY, Vertex
 * 
 * cdef bint isclose(double a, double b, double rel_tol, double abs_tol):             # <<<<<<<<<<<<<<
 *     # Has to match the Python implementation!
 *     cdef double diff = fabs(b - a)
 */

static int __pyx_f_5ezdxf_3acc_6vector_isclose(double __pyx_v_a, double __pyx_v_b, double __pyx_v_rel_tol, double __pyx_v_abs_tol) {
  double __pyx_v_diff;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("isclose", 0);

  /* "ezdxf/acc/vector.pyx":17
 * cdef bint isclose(double a, double b, double rel_tol, double abs_tol):
 *     # Has to match the Python implementation!
 *     cdef double diff = fabs(b - a)             # <<<<<<<<<<<<<<
 *     return diff <= fabs(rel_tol * b) or \
 *            diff <= fabs(rel_tol * a) or \
 */
  __pyx_v_diff = fabs((__pyx_v_b - __pyx_v_a));

  /* "ezdxf/acc/vector.pyx":18
 *     # Has to match the Python implementation!
 *     cdef double diff = fabs(b - a)
 *     return diff <= fabs(rel_tol * b) or \             # <<<<<<<<<<<<<<
 *            diff <= fabs(rel_tol * a) or \
 *            diff <= abs_tol
 */
  __pyx_t_2 = ((__pyx_v_diff <= fabs((__pyx_v_rel_tol * __pyx_v_b))) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }

  /* "ezdxf/acc/vector.pyx":19
 *     cdef double diff = fabs(b - a)
 *     return diff <= fabs(rel_tol * b) or \
 *            diff <= fabs(rel_tol * a) or \             # <<<<<<<<<<<<<<
 *            diff <= abs_tol
 * 
 */
  __pyx_t_2 = ((__pyx_v_diff <= fabs((__pyx_v_rel_tol * __pyx_v_a))) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }

  /* "ezdxf/acc/vector.pyx":20
 *     return diff <= fabs(rel_tol * b) or \
 *            diff <= fabs(rel_tol * a) or \
 *            diff <= abs_tol             # <<<<<<<<<<<<<<
 * 
 * cdef double RAD2DEG = 180.0 / M_PI
 */
  __pyx_t_2 = ((__pyx_v_diff <= __pyx_v_abs_tol) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":15
 *     from ezdxf.eztypes import VecXY, Vertex
 * 
 * cdef bint isclose(double a, double b, double rel_tol, double abs_tol):             # <<<<<<<<<<<<<<
 *     # Has to match the Python implementation!
 *     cdef double diff = fabs(b - a)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":26
 * cdef double M_TAU = M_PI * 2.0
 * 
 * cdef double normalize_rad_angle(double a):             # <<<<<<<<<<<<<<
 *     # Emulate the Python behavior of (a % math.tau)
 *     cdef double res = fmod(a, M_TAU)
 */

static double __pyx_f_5ezdxf_3acc_6vector_normalize_rad_angle(double __pyx_v_a) {
  double __pyx_v_res;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("normalize_rad_angle", 0);

  /* "ezdxf/acc/vector.pyx":28
 * cdef double normalize_rad_angle(double a):
 *     # Emulate the Python behavior of (a % math.tau)
 *     cdef double res = fmod(a, M_TAU)             # <<<<<<<<<<<<<<
 *     if res < 0.0:
 *         res += M_TAU
 */
  __pyx_v_res = fmod(__pyx_v_a, __pyx_v_5ezdxf_3acc_6vector_M_TAU);

  /* "ezdxf/acc/vector.pyx":29
 *     # Emulate the Python behavior of (a % math.tau)
 *     cdef double res = fmod(a, M_TAU)
 *     if res < 0.0:             # <<<<<<<<<<<<<<
 *         res += M_TAU
 *     return res
 */
  __pyx_t_1 = ((__pyx_v_res < 0.0) != 0);
  if (__pyx_t_1) {

    /* "ezdxf/acc/vector.pyx":30
 *     cdef double res = fmod(a, M_TAU)
 *     if res < 0.0:
 *         res += M_TAU             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
    __pyx_v_res = (__pyx_v_res + __pyx_v_5ezdxf_3acc_6vector_M_TAU);

    /* "ezdxf/acc/vector.pyx":29
 *     # Emulate the Python behavior of (a % math.tau)
 *     cdef double res = fmod(a, M_TAU)
 *     if res < 0.0:             # <<<<<<<<<<<<<<
 *         res += M_TAU
 *     return res
 */
  }

  /* "ezdxf/acc/vector.pyx":31
 *     if res < 0.0:
 *         res += M_TAU
 *     return res             # <<<<<<<<<<<<<<
 * 
 * def _normalize_rad_angle(double angle):
 */
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":26
 * cdef double M_TAU = M_PI * 2.0
 * 
 * cdef double normalize_rad_angle(double a):             # <<<<<<<<<<<<<<
 *     # Emulate the Python behavior of (a % math.tau)
 *     cdef double res = fmod(a, M_TAU)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":33
 *     return res
 * 
 * def _normalize_rad_angle(double angle):             # <<<<<<<<<<<<<<
 *     # just for testing
 *     return normalize_rad_angle(angle)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_1_normalize_rad_angle(PyObject *__pyx_self, PyObject *__pyx_arg_angle); /*proto*/
static PyMethodDef __pyx_mdef_5ezdxf_3acc_6vector_1_normalize_rad_angle = {"_normalize_rad_angle", (PyCFunction)__pyx_pw_5ezdxf_3acc_6vector_1_normalize_rad_angle, METH_O, 0};
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_1_normalize_rad_angle(PyObject *__pyx_self, PyObject *__pyx_arg_angle) {
  double __pyx_v_angle;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_normalize_rad_angle (wrapper)", 0);
  assert(__pyx_arg_angle); {
    __pyx_v_angle = __pyx_PyFloat_AsDouble(__pyx_arg_angle); if (unlikely((__pyx_v_angle == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 33, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector._normalize_rad_angle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector__normalize_rad_angle(__pyx_self, ((double)__pyx_v_angle));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector__normalize_rad_angle(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_angle) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_normalize_rad_angle", 0);

  /* "ezdxf/acc/vector.pyx":35
 * def _normalize_rad_angle(double angle):
 *     # just for testing
 *     return normalize_rad_angle(angle)             # <<<<<<<<<<<<<<
 * 
 * cdef double normalize_deg_angle(double a):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_5ezdxf_3acc_6vector_normalize_rad_angle(__pyx_v_angle)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":33
 *     return res
 * 
 * def _normalize_rad_angle(double angle):             # <<<<<<<<<<<<<<
 *     # just for testing
 *     return normalize_rad_angle(angle)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector._normalize_rad_angle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":37
 *     return normalize_rad_angle(angle)
 * 
 * cdef double normalize_deg_angle(double a):             # <<<<<<<<<<<<<<
 *     # Emulate the Python behavior of (a % 360)
 *     cdef double res = fmod(a, 360.0)
 */

static double __pyx_f_5ezdxf_3acc_6vector_normalize_deg_angle(double __pyx_v_a) {
  double __pyx_v_res;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("normalize_deg_angle", 0);

  /* "ezdxf/acc/vector.pyx":39
 * cdef double normalize_deg_angle(double a):
 *     # Emulate the Python behavior of (a % 360)
 *     cdef double res = fmod(a, 360.0)             # <<<<<<<<<<<<<<
 *     if res < 0.0:
 *         res += 360.0
 */
  __pyx_v_res = fmod(__pyx_v_a, 360.0);

  /* "ezdxf/acc/vector.pyx":40
 *     # Emulate the Python behavior of (a % 360)
 *     cdef double res = fmod(a, 360.0)
 *     if res < 0.0:             # <<<<<<<<<<<<<<
 *         res += 360.0
 *     return res
 */
  __pyx_t_1 = ((__pyx_v_res < 0.0) != 0);
  if (__pyx_t_1) {

    /* "ezdxf/acc/vector.pyx":41
 *     cdef double res = fmod(a, 360.0)
 *     if res < 0.0:
 *         res += 360.0             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
    __pyx_v_res = (__pyx_v_res + 360.0);

    /* "ezdxf/acc/vector.pyx":40
 *     # Emulate the Python behavior of (a % 360)
 *     cdef double res = fmod(a, 360.0)
 *     if res < 0.0:             # <<<<<<<<<<<<<<
 *         res += 360.0
 *     return res
 */
  }

  /* "ezdxf/acc/vector.pyx":42
 *     if res < 0.0:
 *         res += 360.0
 *     return res             # <<<<<<<<<<<<<<
 * 
 * def _normalize_deg_angle(double angle):
 */
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":37
 *     return normalize_rad_angle(angle)
 * 
 * cdef double normalize_deg_angle(double a):             # <<<<<<<<<<<<<<
 *     # Emulate the Python behavior of (a % 360)
 *     cdef double res = fmod(a, 360.0)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":44
 *     return res
 * 
 * def _normalize_deg_angle(double angle):             # <<<<<<<<<<<<<<
 *     # just for testing
 *     return normalize_deg_angle(angle)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_3_normalize_deg_angle(PyObject *__pyx_self, PyObject *__pyx_arg_angle); /*proto*/
static PyMethodDef __pyx_mdef_5ezdxf_3acc_6vector_3_normalize_deg_angle = {"_normalize_deg_angle", (PyCFunction)__pyx_pw_5ezdxf_3acc_6vector_3_normalize_deg_angle, METH_O, 0};
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_3_normalize_deg_angle(PyObject *__pyx_self, PyObject *__pyx_arg_angle) {
  double __pyx_v_angle;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_normalize_deg_angle (wrapper)", 0);
  assert(__pyx_arg_angle); {
    __pyx_v_angle = __pyx_PyFloat_AsDouble(__pyx_arg_angle); if (unlikely((__pyx_v_angle == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 44, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector._normalize_deg_angle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_2_normalize_deg_angle(__pyx_self, ((double)__pyx_v_angle));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_2_normalize_deg_angle(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_angle) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_normalize_deg_angle", 0);

  /* "ezdxf/acc/vector.pyx":46
 * def _normalize_deg_angle(double angle):
 *     # just for testing
 *     return normalize_deg_angle(angle)             # <<<<<<<<<<<<<<
 * 
 * cdef class Vec2:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_5ezdxf_3acc_6vector_normalize_deg_angle(__pyx_v_angle)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":44
 *     return res
 * 
 * def _normalize_deg_angle(double angle):             # <<<<<<<<<<<<<<
 *     # just for testing
 *     return normalize_deg_angle(angle)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector._normalize_deg_angle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":62
 *     """
 * 
 *     def __cinit__(self, *args):             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t count = len(<tuple> args)
 * 
 */

/* Python wrapper */
static int __pyx_pw_5ezdxf_3acc_6vector_4Vec2_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5ezdxf_3acc_6vector_4Vec2_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2___cinit__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5ezdxf_3acc_6vector_4Vec2___cinit__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, PyObject *__pyx_v_args) {
  Py_ssize_t __pyx_v_count;
  PyObject *__pyx_v_arg = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_args);

  /* "ezdxf/acc/vector.pyx":63
 * 
 *     def __cinit__(self, *args):
 *         cdef Py_ssize_t count = len(<tuple> args)             # <<<<<<<<<<<<<<
 * 
 *         if count == 0:  # fastest init - default constructor
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 63, __pyx_L1_error)
  }
  __pyx_t_1 = PyTuple_GET_SIZE(((PyObject*)__pyx_v_args)); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 63, __pyx_L1_error)
  __pyx_v_count = __pyx_t_1;

  /* "ezdxf/acc/vector.pyx":65
 *         cdef Py_ssize_t count = len(<tuple> args)
 * 
 *         if count == 0:  # fastest init - default constructor             # <<<<<<<<<<<<<<
 *             self.x = 0
 *             self.y = 0
 */
  __pyx_t_2 = ((__pyx_v_count == 0) != 0);
  if (__pyx_t_2) {

    /* "ezdxf/acc/vector.pyx":66
 * 
 *         if count == 0:  # fastest init - default constructor
 *             self.x = 0             # <<<<<<<<<<<<<<
 *             self.y = 0
 *             return
 */
    __pyx_v_self->x = 0.0;

    /* "ezdxf/acc/vector.pyx":67
 *         if count == 0:  # fastest init - default constructor
 *             self.x = 0
 *             self.y = 0             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __pyx_v_self->y = 0.0;

    /* "ezdxf/acc/vector.pyx":68
 *             self.x = 0
 *             self.y = 0
 *             return             # <<<<<<<<<<<<<<
 * 
 *         if count == 1:
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "ezdxf/acc/vector.pyx":65
 *         cdef Py_ssize_t count = len(<tuple> args)
 * 
 *         if count == 0:  # fastest init - default constructor             # <<<<<<<<<<<<<<
 *             self.x = 0
 *             self.y = 0
 */
  }

  /* "ezdxf/acc/vector.pyx":70
 *             return
 * 
 *         if count == 1:             # <<<<<<<<<<<<<<
 *             arg = args[0]
 *             if isinstance(arg, Vec2):
 */
  __pyx_t_2 = ((__pyx_v_count == 1) != 0);
  if (__pyx_t_2) {

    /* "ezdxf/acc/vector.pyx":71
 * 
 *         if count == 1:
 *             arg = args[0]             # <<<<<<<<<<<<<<
 *             if isinstance(arg, Vec2):
 *                 # fast init by Vec2()
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_arg = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "ezdxf/acc/vector.pyx":72
 *         if count == 1:
 *             arg = args[0]
 *             if isinstance(arg, Vec2):             # <<<<<<<<<<<<<<
 *                 # fast init by Vec2()
 *                 self.x = (<Vec2> arg).x
 */
    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_arg, __pyx_ptype_5ezdxf_3acc_6vector_Vec2); 
    __pyx_t_4 = (__pyx_t_2 != 0);
    if (__pyx_t_4) {

      /* "ezdxf/acc/vector.pyx":74
 *             if isinstance(arg, Vec2):
 *                 # fast init by Vec2()
 *                 self.x = (<Vec2> arg).x             # <<<<<<<<<<<<<<
 *                 self.y = (<Vec2> arg).y
 *                 return
 */
      __pyx_t_5 = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_arg)->x;
      __pyx_v_self->x = __pyx_t_5;

      /* "ezdxf/acc/vector.pyx":75
 *                 # fast init by Vec2()
 *                 self.x = (<Vec2> arg).x
 *                 self.y = (<Vec2> arg).y             # <<<<<<<<<<<<<<
 *                 return
 *             if isinstance(arg, Vec3):
 */
      __pyx_t_5 = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_arg)->y;
      __pyx_v_self->y = __pyx_t_5;

      /* "ezdxf/acc/vector.pyx":76
 *                 self.x = (<Vec2> arg).x
 *                 self.y = (<Vec2> arg).y
 *                 return             # <<<<<<<<<<<<<<
 *             if isinstance(arg, Vec3):
 *                 # fast init by Vec3()
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "ezdxf/acc/vector.pyx":72
 *         if count == 1:
 *             arg = args[0]
 *             if isinstance(arg, Vec2):             # <<<<<<<<<<<<<<
 *                 # fast init by Vec2()
 *                 self.x = (<Vec2> arg).x
 */
    }

    /* "ezdxf/acc/vector.pyx":77
 *                 self.y = (<Vec2> arg).y
 *                 return
 *             if isinstance(arg, Vec3):             # <<<<<<<<<<<<<<
 *                 # fast init by Vec3()
 *                 self.x = (<Vec3> arg).x
 */
    __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_arg, __pyx_ptype_5ezdxf_3acc_6vector_Vec3); 
    __pyx_t_2 = (__pyx_t_4 != 0);
    if (__pyx_t_2) {

      /* "ezdxf/acc/vector.pyx":79
 *             if isinstance(arg, Vec3):
 *                 # fast init by Vec3()
 *                 self.x = (<Vec3> arg).x             # <<<<<<<<<<<<<<
 *                 self.y = (<Vec3> arg).y
 *                 return
 */
      __pyx_t_5 = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_arg)->x;
      __pyx_v_self->x = __pyx_t_5;

      /* "ezdxf/acc/vector.pyx":80
 *                 # fast init by Vec3()
 *                 self.x = (<Vec3> arg).x
 *                 self.y = (<Vec3> arg).y             # <<<<<<<<<<<<<<
 *                 return
 *             args = arg
 */
      __pyx_t_5 = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_arg)->y;
      __pyx_v_self->y = __pyx_t_5;

      /* "ezdxf/acc/vector.pyx":81
 *                 self.x = (<Vec3> arg).x
 *                 self.y = (<Vec3> arg).y
 *                 return             # <<<<<<<<<<<<<<
 *             args = arg
 *             count = len(args)
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "ezdxf/acc/vector.pyx":77
 *                 self.y = (<Vec2> arg).y
 *                 return
 *             if isinstance(arg, Vec3):             # <<<<<<<<<<<<<<
 *                 # fast init by Vec3()
 *                 self.x = (<Vec3> arg).x
 */
    }

    /* "ezdxf/acc/vector.pyx":82
 *                 self.y = (<Vec3> arg).y
 *                 return
 *             args = arg             # <<<<<<<<<<<<<<
 *             count = len(args)
 * 
 */
    __Pyx_INCREF(__pyx_v_arg);
    __Pyx_DECREF_SET(__pyx_v_args, __pyx_v_arg);

    /* "ezdxf/acc/vector.pyx":83
 *                 return
 *             args = arg
 *             count = len(args)             # <<<<<<<<<<<<<<
 * 
 *         # ignore z-axis but raise error for 4 or more arguments
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 83, __pyx_L1_error)
    __pyx_v_count = __pyx_t_1;

    /* "ezdxf/acc/vector.pyx":70
 *             return
 * 
 *         if count == 1:             # <<<<<<<<<<<<<<
 *             arg = args[0]
 *             if isinstance(arg, Vec2):
 */
  }

  /* "ezdxf/acc/vector.pyx":86
 * 
 *         # ignore z-axis but raise error for 4 or more arguments
 *         if count > 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('invalid argument count')
 * 
 */
  __pyx_t_2 = ((__pyx_v_count > 3) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "ezdxf/acc/vector.pyx":87
 *         # ignore z-axis but raise error for 4 or more arguments
 *         if count > 3:
 *             raise TypeError('invalid argument count')             # <<<<<<<<<<<<<<
 * 
 *         # slow init by sequence
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 87, __pyx_L1_error)

    /* "ezdxf/acc/vector.pyx":86
 * 
 *         # ignore z-axis but raise error for 4 or more arguments
 *         if count > 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('invalid argument count')
 * 
 */
  }

  /* "ezdxf/acc/vector.pyx":90
 * 
 *         # slow init by sequence
 *         self.x = args[0]             # <<<<<<<<<<<<<<
 *         self.y = args[1]
 * 
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->x = __pyx_t_5;

  /* "ezdxf/acc/vector.pyx":91
 *         # slow init by sequence
 *         self.x = args[0]
 *         self.y = args[1]             # <<<<<<<<<<<<<<
 * 
 *     def __reduce__(self):
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_args, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->y = __pyx_t_5;

  /* "ezdxf/acc/vector.pyx":62
 *     """
 * 
 *     def __cinit__(self, *args):             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t count = len(<tuple> args)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_arg);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":93
 *         self.y = args[1]
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return Vec2, (self.x, self.y)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_3__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_3__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_2__reduce__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_2__reduce__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "ezdxf/acc/vector.pyx":94
 * 
 *     def __reduce__(self):
 *         return Vec2, (self.x, self.y)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->y); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2));
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":93
 *         self.y = args[1]
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return Vec2, (self.x, self.y)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":97
 * 
 *     @property
 *     def vec3(self) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         return Vec3(self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_4vec3_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_4vec3_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_4vec3___get__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_4vec3___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "ezdxf/acc/vector.pyx":98
 *     @property
 *     def vec3(self) -> 'Vec3':
 *         return Vec3(self)             # <<<<<<<<<<<<<<
 * 
 *     def round(self, ndigits=None) -> 'Vec2':
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":97
 * 
 *     @property
 *     def vec3(self) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         return Vec3(self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.vec3.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":100
 *         return Vec3(self)
 * 
 *     def round(self, ndigits=None) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         # only used for testing
 *         return Vec2(round(self.x, ndigits), round(self.y, ndigits))
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_5round(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_5round(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ndigits = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("round (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ndigits,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ndigits);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "round") < 0)) __PYX_ERR(0, 100, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ndigits = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("round", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 100, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.round", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_4round(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self), __pyx_v_ndigits);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_4round(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, PyObject *__pyx_v_ndigits) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("round", 0);

  /* "ezdxf/acc/vector.pyx":102
 *     def round(self, ndigits=None) -> 'Vec2':
 *         # only used for testing
 *         return Vec2(round(self.x, ndigits), round(self.y, ndigits))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_ndigits);
  __Pyx_GIVEREF(__pyx_v_ndigits);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_ndigits);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->y); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_ndigits);
  __Pyx_GIVEREF(__pyx_v_ndigits);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_ndigits);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":100
 *         return Vec3(self)
 * 
 *     def round(self, ndigits=None) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         # only used for testing
 *         return Vec2(round(self.x, ndigits), round(self.y, ndigits))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.round", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":105
 * 
 *     @staticmethod
 *     def list(items: Iterable['Vertex']) -> List['Vec2']:             # <<<<<<<<<<<<<<
 *         return list(Vec2.generate(items))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_7list(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5ezdxf_3acc_6vector_4Vec2_7list = {"list", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec2_7list, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_7list(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_items = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("list (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_items,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_items)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "list") < 0)) __PYX_ERR(0, 105, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_items = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("list", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 105, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_6list(__pyx_v_items);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_6list(PyObject *__pyx_v_items) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("list", 0);

  /* "ezdxf/acc/vector.pyx":106
 *     @staticmethod
 *     def list(items: Iterable['Vertex']) -> List['Vec2']:
 *         return list(Vec2.generate(items))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2), __pyx_n_s_generate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_items) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_items);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PySequence_List(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":105
 * 
 *     @staticmethod
 *     def list(items: Iterable['Vertex']) -> List['Vec2']:             # <<<<<<<<<<<<<<
 *         return list(Vec2.generate(items))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":109
 * 
 *     @staticmethod
 *     def tuple(items: Iterable['Vertex']) -> Sequence['Vec2']:             # <<<<<<<<<<<<<<
 *         return tuple(Vec2.generate(items))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_9tuple(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5ezdxf_3acc_6vector_4Vec2_9tuple = {"tuple", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec2_9tuple, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_9tuple(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_items = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tuple (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_items,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_items)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "tuple") < 0)) __PYX_ERR(0, 109, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_items = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("tuple", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 109, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.tuple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_8tuple(__pyx_v_items);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_8tuple(PyObject *__pyx_v_items) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("tuple", 0);

  /* "ezdxf/acc/vector.pyx":110
 *     @staticmethod
 *     def tuple(items: Iterable['Vertex']) -> Sequence['Vec2']:
 *         return tuple(Vec2.generate(items))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2), __pyx_n_s_generate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_items) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_items);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":109
 * 
 *     @staticmethod
 *     def tuple(items: Iterable['Vertex']) -> Sequence['Vec2']:             # <<<<<<<<<<<<<<
 *         return tuple(Vec2.generate(items))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.tuple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":113
 * 
 *     @staticmethod
 *     def generate(items: Iterable['Vertex']) -> Iterable['Vec2']:             # <<<<<<<<<<<<<<
 *         return (Vec2(item) for item in items)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_11generate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5ezdxf_3acc_6vector_4Vec2_11generate = {"generate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec2_11generate, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_11generate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_items = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("generate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_items,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_items)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "generate") < 0)) __PYX_ERR(0, 113, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_items = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("generate", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 113, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.generate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_10generate(__pyx_v_items);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5ezdxf_3acc_6vector_4Vec2_8generate_2generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ezdxf/acc/vector.pyx":114
 *     @staticmethod
 *     def generate(items: Iterable['Vertex']) -> Iterable['Vec2']:
 *         return (Vec2(item) for item in items)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_8generate_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr *)__pyx_tp_new_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr(__pyx_ptype_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 114, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct__generate *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5ezdxf_3acc_6vector_4Vec2_8generate_2generator2, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_generate_locals_genexpr, __pyx_n_s_ezdxf_acc_vector); if (unlikely(!gen)) __PYX_ERR(0, 114, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.generate.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5ezdxf_3acc_6vector_4Vec2_8generate_2generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 114, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_items)) { __Pyx_RaiseClosureNameError("items"); __PYX_ERR(0, 114, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_items)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_items)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_items; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_items); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 114, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 114, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 114, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 114, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 114, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 114, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_item);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_item, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2), __pyx_cur_scope->__pyx_v_item); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 114, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":113
 * 
 *     @staticmethod
 *     def generate(items: Iterable['Vertex']) -> Iterable['Vec2']:             # <<<<<<<<<<<<<<
 *         return (Vec2(item) for item in items)
 * 
 */

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_10generate(PyObject *__pyx_v_items) {
  struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct__generate *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("generate", 0);
  __pyx_cur_scope = (struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct__generate *)__pyx_tp_new_5ezdxf_3acc_6vector___pyx_scope_struct__generate(__pyx_ptype_5ezdxf_3acc_6vector___pyx_scope_struct__generate, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct__generate *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 113, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_items = __pyx_v_items;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_items);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_items);

  /* "ezdxf/acc/vector.pyx":114
 *     @staticmethod
 *     def generate(items: Iterable['Vertex']) -> Iterable['Vec2']:
 *         return (Vec2(item) for item in items)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_8generate_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":113
 * 
 *     @staticmethod
 *     def generate(items: Iterable['Vertex']) -> Iterable['Vec2']:             # <<<<<<<<<<<<<<
 *         return (Vec2(item) for item in items)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.generate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":117
 * 
 *     @staticmethod
 *     def from_angle(double angle, double length = 1.0) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         return v2_from_angle(angle, length)
 * 
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_13from_angle(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5ezdxf_3acc_6vector_4Vec2_13from_angle = {"from_angle", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec2_13from_angle, METH_VARARGS|METH_KEYWORDS, 0};
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_13from_angle(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_angle;
  double __pyx_v_length;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_angle (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_angle,&__pyx_n_s_length,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_angle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_length);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_angle") < 0)) __PYX_ERR(0, 117, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_angle = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_angle == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 117, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_length = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_length == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 117, __pyx_L3_error)
    } else {
      __pyx_v_length = ((double)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_angle", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 117, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.from_angle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_12from_angle(__pyx_v_angle, __pyx_v_length);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_12from_angle(double __pyx_v_angle, double __pyx_v_length) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_angle", 0);

  /* "ezdxf/acc/vector.pyx":118
 *     @staticmethod
 *     def from_angle(double angle, double length = 1.0) -> 'Vec2':
 *         return v2_from_angle(angle, length)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v2_from_angle(__pyx_v_angle, __pyx_v_length)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":117
 * 
 *     @staticmethod
 *     def from_angle(double angle, double length = 1.0) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         return v2_from_angle(angle, length)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.from_angle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":121
 * 
 *     @staticmethod
 *     def from_deg_angle(double angle, double length = 1.0) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         return v2_from_angle(angle * DEG2RAD, length)
 * 
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_15from_deg_angle(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5ezdxf_3acc_6vector_4Vec2_15from_deg_angle = {"from_deg_angle", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec2_15from_deg_angle, METH_VARARGS|METH_KEYWORDS, 0};
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_15from_deg_angle(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_angle;
  double __pyx_v_length;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_deg_angle (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_angle,&__pyx_n_s_length,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_angle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_length);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_deg_angle") < 0)) __PYX_ERR(0, 121, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_angle = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_angle == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 121, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_length = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_length == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 121, __pyx_L3_error)
    } else {
      __pyx_v_length = ((double)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_deg_angle", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 121, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.from_deg_angle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_14from_deg_angle(__pyx_v_angle, __pyx_v_length);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_14from_deg_angle(double __pyx_v_angle, double __pyx_v_length) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_deg_angle", 0);

  /* "ezdxf/acc/vector.pyx":122
 *     @staticmethod
 *     def from_deg_angle(double angle, double length = 1.0) -> 'Vec2':
 *         return v2_from_angle(angle * DEG2RAD, length)             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self) -> str:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v2_from_angle((__pyx_v_angle * __pyx_v_5ezdxf_3acc_6vector_DEG2RAD), __pyx_v_length)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":121
 * 
 *     @staticmethod
 *     def from_deg_angle(double angle, double length = 1.0) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         return v2_from_angle(angle * DEG2RAD, length)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.from_deg_angle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":124
 *         return v2_from_angle(angle * DEG2RAD, length)
 * 
 *     def __str__(self) -> str:             # <<<<<<<<<<<<<<
 *         return f'({self.x}, {self.y})'
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_17__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_17__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_16__str__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_16__str__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "ezdxf/acc/vector.pyx":125
 * 
 *     def __str__(self) -> str:
 *         return f'({self.x}, {self.y})'             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self)-> str:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u__2);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u__2);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__3);
  __pyx_t_2 += 2;
  __Pyx_GIVEREF(__pyx_kp_u__3);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__3);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->y); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__4);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__4);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__4);
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":124
 *         return v2_from_angle(angle * DEG2RAD, length)
 * 
 *     def __str__(self) -> str:             # <<<<<<<<<<<<<<
 *         return f'({self.x}, {self.y})'
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":127
 *         return f'({self.x}, {self.y})'
 * 
 *     def __repr__(self)-> str:             # <<<<<<<<<<<<<<
 *         return "Vec2" + self.__str__()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_19__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_19__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_18__repr__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_18__repr__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "ezdxf/acc/vector.pyx":128
 * 
 *     def __repr__(self)-> str:
 *         return "Vec2" + self.__str__()             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self) -> int:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_str); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_n_u_Vec2, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":127
 *         return f'({self.x}, {self.y})'
 * 
 *     def __repr__(self)-> str:             # <<<<<<<<<<<<<<
 *         return "Vec2" + self.__str__()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":130
 *         return "Vec2" + self.__str__()
 * 
 *     def __len__(self) -> int:             # <<<<<<<<<<<<<<
 *         return 2
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_5ezdxf_3acc_6vector_4Vec2_21__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_5ezdxf_3acc_6vector_4Vec2_21__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_20__len__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_5ezdxf_3acc_6vector_4Vec2_20__len__(CYTHON_UNUSED struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "ezdxf/acc/vector.pyx":131
 * 
 *     def __len__(self) -> int:
 *         return 2             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(self) -> int:
 */
  __pyx_r = 2;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":130
 *         return "Vec2" + self.__str__()
 * 
 *     def __len__(self) -> int:             # <<<<<<<<<<<<<<
 *         return 2
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":133
 *         return 2
 * 
 *     def __hash__(self) -> int:             # <<<<<<<<<<<<<<
 *         return hash((self.x, self.y))
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_5ezdxf_3acc_6vector_4Vec2_23__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_5ezdxf_3acc_6vector_4Vec2_23__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_22__hash__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_5ezdxf_3acc_6vector_4Vec2_22__hash__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "ezdxf/acc/vector.pyx":134
 * 
 *     def __hash__(self) -> int:
 *         return hash((self.x, self.y))             # <<<<<<<<<<<<<<
 * 
 *     def copy(self) -> 'Vec2':
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->y); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_4 = PyObject_Hash(__pyx_t_3); if (unlikely(__pyx_t_4 == ((Py_hash_t)-1))) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":133
 *         return 2
 * 
 *     def __hash__(self) -> int:             # <<<<<<<<<<<<<<
 *         return hash((self.x, self.y))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":136
 *         return hash((self.x, self.y))
 * 
 *     def copy(self) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         return self  # immutable
 * 
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_25copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_25copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_24copy(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_24copy(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy", 0);

  /* "ezdxf/acc/vector.pyx":137
 * 
 *     def copy(self) -> 'Vec2':
 *         return self  # immutable             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(self) -> 'Vec2':
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":136
 *         return hash((self.x, self.y))
 * 
 *     def copy(self) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         return self  # immutable
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":139
 *         return self  # immutable
 * 
 *     def __copy__(self) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         return self  # immutable
 * 
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_27__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_27__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_26__copy__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_26__copy__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "ezdxf/acc/vector.pyx":140
 * 
 *     def __copy__(self) -> 'Vec2':
 *         return self  # immutable             # <<<<<<<<<<<<<<
 * 
 *     def __deepcopy__(self, memodict: dict) -> 'Vec2':
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":139
 *         return self  # immutable
 * 
 *     def __copy__(self) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         return self  # immutable
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":142
 *         return self  # immutable
 * 
 *     def __deepcopy__(self, memodict: dict) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         return self  # immutable
 * 
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_29__deepcopy__(PyObject *__pyx_v_self, PyObject *__pyx_v_memodict); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_29__deepcopy__(PyObject *__pyx_v_self, PyObject *__pyx_v_memodict) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__deepcopy__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_memodict), (&PyDict_Type), 1, "memodict", 1))) __PYX_ERR(0, 142, __pyx_L1_error)
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_28__deepcopy__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self), ((PyObject*)__pyx_v_memodict));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_28__deepcopy__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_memodict) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__deepcopy__", 0);

  /* "ezdxf/acc/vector.pyx":143
 * 
 *     def __deepcopy__(self, memodict: dict) -> 'Vec2':
 *         return self  # immutable             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, int index) -> float:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":142
 *         return self  # immutable
 * 
 *     def __deepcopy__(self, memodict: dict) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         return self  # immutable
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":145
 *         return self  # immutable
 * 
 *     def __getitem__(self, int index) -> float:             # <<<<<<<<<<<<<<
 *         if index == 0:
 *             return self.x
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_31__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_index); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_31__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_index) {
  int __pyx_v_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 145, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_30__getitem__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self), ((int)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_30__getitem__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "ezdxf/acc/vector.pyx":146
 * 
 *     def __getitem__(self, int index) -> float:
 *         if index == 0:             # <<<<<<<<<<<<<<
 *             return self.x
 *         elif index == 1:
 */
  switch (__pyx_v_index) {
    case 0:

    /* "ezdxf/acc/vector.pyx":147
 *     def __getitem__(self, int index) -> float:
 *         if index == 0:
 *             return self.x             # <<<<<<<<<<<<<<
 *         elif index == 1:
 *             return self.y
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "ezdxf/acc/vector.pyx":146
 * 
 *     def __getitem__(self, int index) -> float:
 *         if index == 0:             # <<<<<<<<<<<<<<
 *             return self.x
 *         elif index == 1:
 */
    break;
    case 1:

    /* "ezdxf/acc/vector.pyx":149
 *             return self.x
 *         elif index == 1:
 *             return self.y             # <<<<<<<<<<<<<<
 *         else:
 *             raise IndexError(f'invalid index {index}')
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "ezdxf/acc/vector.pyx":148
 *         if index == 0:
 *             return self.x
 *         elif index == 1:             # <<<<<<<<<<<<<<
 *             return self.y
 *         else:
 */
    break;
    default:

    /* "ezdxf/acc/vector.pyx":151
 *             return self.y
 *         else:
 *             raise IndexError(f'invalid index {index}')             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self) -> Iterable[float]:
 */
    __pyx_t_1 = __Pyx_PyUnicode_From_int(__pyx_v_index, 0, ' ', 'd'); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_u_invalid_index, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 151, __pyx_L1_error)
    break;
  }

  /* "ezdxf/acc/vector.pyx":145
 *         return self  # immutable
 * 
 *     def __getitem__(self, int index) -> float:             # <<<<<<<<<<<<<<
 *         if index == 0:
 *             return self.x
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5ezdxf_3acc_6vector_4Vec2_34generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ezdxf/acc/vector.pyx":153
 *             raise IndexError(f'invalid index {index}')
 * 
 *     def __iter__(self) -> Iterable[float]:             # <<<<<<<<<<<<<<
 *         yield self.x
 *         yield self.y
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_33__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_33__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_32__iter__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_32__iter__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self) {
  struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__ *)__pyx_tp_new_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__(__pyx_ptype_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 153, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5ezdxf_3acc_6vector_4Vec2_34generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter, __pyx_n_s_Vec2___iter, __pyx_n_s_ezdxf_acc_vector); if (unlikely(!gen)) __PYX_ERR(0, 153, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5ezdxf_3acc_6vector_4Vec2_34generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__ *__pyx_cur_scope = ((struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_yield;
    case 2: goto __pyx_L5_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 153, __pyx_L1_error)

  /* "ezdxf/acc/vector.pyx":154
 * 
 *     def __iter__(self) -> Iterable[float]:
 *         yield self.x             # <<<<<<<<<<<<<<
 *         yield self.y
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 1;
  return __pyx_r;
  __pyx_L4_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 154, __pyx_L1_error)

  /* "ezdxf/acc/vector.pyx":155
 *     def __iter__(self) -> Iterable[float]:
 *         yield self.x
 *         yield self.y             # <<<<<<<<<<<<<<
 * 
 *     def __abs__(self) -> float:
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 2;
  return __pyx_r;
  __pyx_L5_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 155, __pyx_L1_error)
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "ezdxf/acc/vector.pyx":153
 *             raise IndexError(f'invalid index {index}')
 * 
 *     def __iter__(self) -> Iterable[float]:             # <<<<<<<<<<<<<<
 *         yield self.x
 *         yield self.y
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":157
 *         yield self.y
 * 
 *     def __abs__(self) -> float:             # <<<<<<<<<<<<<<
 *         return hypot(self.x, self.y)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_36__abs__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_36__abs__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__abs__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_35__abs__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_35__abs__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__abs__", 0);

  /* "ezdxf/acc/vector.pyx":158
 * 
 *     def __abs__(self) -> float:
 *         return hypot(self.x, self.y)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(hypot(__pyx_v_self->x, __pyx_v_self->y)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":157
 *         yield self.y
 * 
 *     def __abs__(self) -> float:             # <<<<<<<<<<<<<<
 *         return hypot(self.x, self.y)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.__abs__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":161
 * 
 *     @property
 *     def magnitude(self) -> float:             # <<<<<<<<<<<<<<
 *         return hypot(self.x, self.y)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_9magnitude_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_9magnitude_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_9magnitude___get__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_9magnitude___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "ezdxf/acc/vector.pyx":162
 *     @property
 *     def magnitude(self) -> float:
 *         return hypot(self.x, self.y)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(hypot(__pyx_v_self->x, __pyx_v_self->y)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":161
 * 
 *     @property
 *     def magnitude(self) -> float:             # <<<<<<<<<<<<<<
 *         return hypot(self.x, self.y)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.magnitude.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":165
 * 
 *     @property
 *     def is_null(self) -> bool:             # <<<<<<<<<<<<<<
 *         return fabs(self.x) <= ABS_TOL and fabs(self.y) <= ABS_TOL
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_7is_null_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_7is_null_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_7is_null___get__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_7is_null___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "ezdxf/acc/vector.pyx":166
 *     @property
 *     def is_null(self) -> bool:
 *         return fabs(self.x) <= ABS_TOL and fabs(self.y) <= ABS_TOL             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = (fabs(__pyx_v_self->x) <= 1e-12);
  if (__pyx_t_2) {
  } else {
    __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = (fabs(__pyx_v_self->y) <= 1e-12);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":165
 * 
 *     @property
 *     def is_null(self) -> bool:             # <<<<<<<<<<<<<<
 *         return fabs(self.x) <= ABS_TOL and fabs(self.y) <= ABS_TOL
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.is_null.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":169
 * 
 *     @property
 *     def angle(self) -> float:             # <<<<<<<<<<<<<<
 *         return atan2(self.y, self.x)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_5angle_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_5angle_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_5angle___get__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_5angle___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "ezdxf/acc/vector.pyx":170
 *     @property
 *     def angle(self) -> float:
 *         return atan2(self.y, self.x)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(atan2(__pyx_v_self->y, __pyx_v_self->x)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":169
 * 
 *     @property
 *     def angle(self) -> float:             # <<<<<<<<<<<<<<
 *         return atan2(self.y, self.x)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.angle.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":173
 * 
 *     @property
 *     def angle_deg(self) -> float:             # <<<<<<<<<<<<<<
 *         return atan2(self.y, self.x) * RAD2DEG
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_9angle_deg_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_9angle_deg_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_9angle_deg___get__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_9angle_deg___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "ezdxf/acc/vector.pyx":174
 *     @property
 *     def angle_deg(self) -> float:
 *         return atan2(self.y, self.x) * RAD2DEG             # <<<<<<<<<<<<<<
 * 
 *     def orthogonal(self, ccw: bool = True) -> 'Vec2':
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((atan2(__pyx_v_self->y, __pyx_v_self->x) * __pyx_v_5ezdxf_3acc_6vector_RAD2DEG)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":173
 * 
 *     @property
 *     def angle_deg(self) -> float:             # <<<<<<<<<<<<<<
 *         return atan2(self.y, self.x) * RAD2DEG
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.angle_deg.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":176
 *         return atan2(self.y, self.x) * RAD2DEG
 * 
 *     def orthogonal(self, ccw: bool = True) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         return v2_ortho(self, ccw)
 * 
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_38orthogonal(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_38orthogonal(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ccw = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("orthogonal (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ccw,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ccw);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "orthogonal") < 0)) __PYX_ERR(0, 176, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ccw = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("orthogonal", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 176, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.orthogonal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_37orthogonal(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self), __pyx_v_ccw);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_37orthogonal(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, PyObject *__pyx_v_ccw) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("orthogonal", 0);

  /* "ezdxf/acc/vector.pyx":177
 * 
 *     def orthogonal(self, ccw: bool = True) -> 'Vec2':
 *         return v2_ortho(self, ccw)             # <<<<<<<<<<<<<<
 * 
 *     def lerp(self, other: 'VecXY', double factor = 0.5) -> 'Vec2':
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_ccw); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 177, __pyx_L1_error)
  __pyx_t_2 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v2_ortho(__pyx_v_self, __pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":176
 *         return atan2(self.y, self.x) * RAD2DEG
 * 
 *     def orthogonal(self, ccw: bool = True) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         return v2_ortho(self, ccw)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.orthogonal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":179
 *         return v2_ortho(self, ccw)
 * 
 *     def lerp(self, other: 'VecXY', double factor = 0.5) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         cdef Vec2 o = Vec2(other)
 *         return v2_lerp(self, o, factor)
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_40lerp(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_40lerp(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_other = 0;
  double __pyx_v_factor;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lerp (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other,&__pyx_n_s_factor,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_other)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_factor);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "lerp") < 0)) __PYX_ERR(0, 179, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_other = values[0];
    if (values[1]) {
      __pyx_v_factor = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_factor == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 179, __pyx_L3_error)
    } else {
      __pyx_v_factor = ((double)0.5);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lerp", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 179, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.lerp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_39lerp(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self), __pyx_v_other, __pyx_v_factor);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_39lerp(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, PyObject *__pyx_v_other, double __pyx_v_factor) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_o = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lerp", 0);

  /* "ezdxf/acc/vector.pyx":180
 * 
 *     def lerp(self, other: 'VecXY', double factor = 0.5) -> 'Vec2':
 *         cdef Vec2 o = Vec2(other)             # <<<<<<<<<<<<<<
 *         return v2_lerp(self, o, factor)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2), __pyx_v_other); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":181
 *     def lerp(self, other: 'VecXY', double factor = 0.5) -> 'Vec2':
 *         cdef Vec2 o = Vec2(other)
 *         return v2_lerp(self, o, factor)             # <<<<<<<<<<<<<<
 * 
 *     def normalize(self, double length = 1.) -> Vec2:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v2_lerp(__pyx_v_self, __pyx_v_o, __pyx_v_factor)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":179
 *         return v2_ortho(self, ccw)
 * 
 *     def lerp(self, other: 'VecXY', double factor = 0.5) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         cdef Vec2 o = Vec2(other)
 *         return v2_lerp(self, o, factor)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.lerp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_o);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":183
 *         return v2_lerp(self, o, factor)
 * 
 *     def normalize(self, double length = 1.) -> Vec2:             # <<<<<<<<<<<<<<
 *         return v2_normalize(self, length)
 * 
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_42normalize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_42normalize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_length;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_length,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_length);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "normalize") < 0)) __PYX_ERR(0, 183, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_length = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_length == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 183, __pyx_L3_error)
    } else {
      __pyx_v_length = ((double)1.);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("normalize", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 183, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.normalize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_41normalize(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self), __pyx_v_length);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_41normalize(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, double __pyx_v_length) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("normalize", 0);

  /* "ezdxf/acc/vector.pyx":184
 * 
 *     def normalize(self, double length = 1.) -> Vec2:
 *         return v2_normalize(self, length)             # <<<<<<<<<<<<<<
 * 
 *     def project(self, other: 'VecXY') -> 'Vec2':
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v2_normalize(__pyx_v_self, __pyx_v_length)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":183
 *         return v2_lerp(self, o, factor)
 * 
 *     def normalize(self, double length = 1.) -> Vec2:             # <<<<<<<<<<<<<<
 *         return v2_normalize(self, length)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.normalize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":186
 *         return v2_normalize(self, length)
 * 
 *     def project(self, other: 'VecXY') -> 'Vec2':             # <<<<<<<<<<<<<<
 *         cdef Vec2 o = Vec2(other)
 *         return v2_project(self, o)
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_44project(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_44project(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("project (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_43project(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_43project(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_o = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("project", 0);

  /* "ezdxf/acc/vector.pyx":187
 * 
 *     def project(self, other: 'VecXY') -> 'Vec2':
 *         cdef Vec2 o = Vec2(other)             # <<<<<<<<<<<<<<
 *         return v2_project(self, o)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2), __pyx_v_other); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":188
 *     def project(self, other: 'VecXY') -> 'Vec2':
 *         cdef Vec2 o = Vec2(other)
 *         return v2_project(self, o)             # <<<<<<<<<<<<<<
 * 
 *     def __neg__(self) -> 'Vec2':
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v2_project(__pyx_v_self, __pyx_v_o)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":186
 *         return v2_normalize(self, length)
 * 
 *     def project(self, other: 'VecXY') -> 'Vec2':             # <<<<<<<<<<<<<<
 *         cdef Vec2 o = Vec2(other)
 *         return v2_project(self, o)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_o);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":190
 *         return v2_project(self, o)
 * 
 *     def __neg__(self) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         cdef Vec2 res = Vec2()
 *         res.x = -self.x
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_46__neg__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_46__neg__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__neg__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_45__neg__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_45__neg__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__neg__", 0);

  /* "ezdxf/acc/vector.pyx":191
 * 
 *     def __neg__(self) -> 'Vec2':
 *         cdef Vec2 res = Vec2()             # <<<<<<<<<<<<<<
 *         res.x = -self.x
 *         res.y = -self.y
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":192
 *     def __neg__(self) -> 'Vec2':
 *         cdef Vec2 res = Vec2()
 *         res.x = -self.x             # <<<<<<<<<<<<<<
 *         res.y = -self.y
 *         return res
 */
  __pyx_v_res->x = (-__pyx_v_self->x);

  /* "ezdxf/acc/vector.pyx":193
 *         cdef Vec2 res = Vec2()
 *         res.x = -self.x
 *         res.y = -self.y             # <<<<<<<<<<<<<<
 *         return res
 * 
 */
  __pyx_v_res->y = (-__pyx_v_self->y);

  /* "ezdxf/acc/vector.pyx":194
 *         res.x = -self.x
 *         res.y = -self.y
 *         return res             # <<<<<<<<<<<<<<
 * 
 *     reversed = __neg__
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":190
 *         return v2_project(self, o)
 * 
 *     def __neg__(self) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         cdef Vec2 res = Vec2()
 *         res.x = -self.x
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.__neg__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":198
 *     reversed = __neg__
 * 
 *     def __bool__(self) -> bool:             # <<<<<<<<<<<<<<
 *         return self.x != 0 or self.y != 0
 * 
 */

/* Python wrapper */
static int __pyx_pw_5ezdxf_3acc_6vector_4Vec2_48__bool__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5ezdxf_3acc_6vector_4Vec2_48__bool__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__bool__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_47__bool__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5ezdxf_3acc_6vector_4Vec2_47__bool__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__bool__", 0);

  /* "ezdxf/acc/vector.pyx":199
 * 
 *     def __bool__(self) -> bool:
 *         return self.x != 0 or self.y != 0             # <<<<<<<<<<<<<<
 * 
 *     def isclose(self, other: 'VecXY', *, double rel_tol=REL_TOL,
 */
  __pyx_t_2 = (__pyx_v_self->x != 0.0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->y != 0.0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":198
 *     reversed = __neg__
 * 
 *     def __bool__(self) -> bool:             # <<<<<<<<<<<<<<
 *         return self.x != 0 or self.y != 0
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":201
 *         return self.x != 0 or self.y != 0
 * 
 *     def isclose(self, other: 'VecXY', *, double rel_tol=REL_TOL,             # <<<<<<<<<<<<<<
 *                 double abs_tol = ABS_TOL) -> bool:
 *         cdef Vec2 o = Vec2(other)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_50isclose(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_50isclose(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_other = 0;
  double __pyx_v_rel_tol;
  double __pyx_v_abs_tol;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isclose (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other,&__pyx_n_s_rel_tol,&__pyx_n_s_abs_tol,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_other)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 1; index < 3 && kw_args > 0; index++) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, *__pyx_pyargnames[index]);
          if (value) { values[index] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "isclose") < 0)) __PYX_ERR(0, 201, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_other = values[0];
    if (values[1]) {
      __pyx_v_rel_tol = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_rel_tol == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 201, __pyx_L3_error)
    } else {
      __pyx_v_rel_tol = ((double)1e-09);
    }
    if (values[2]) {
      __pyx_v_abs_tol = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_abs_tol == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 202, __pyx_L3_error)
    } else {
      __pyx_v_abs_tol = ((double)1e-12);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isclose", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 201, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.isclose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_49isclose(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self), __pyx_v_other, __pyx_v_rel_tol, __pyx_v_abs_tol);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_49isclose(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, PyObject *__pyx_v_other, double __pyx_v_rel_tol, double __pyx_v_abs_tol) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_o = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isclose", 0);

  /* "ezdxf/acc/vector.pyx":203
 *     def isclose(self, other: 'VecXY', *, double rel_tol=REL_TOL,
 *                 double abs_tol = ABS_TOL) -> bool:
 *         cdef Vec2 o = Vec2(other)             # <<<<<<<<<<<<<<
 *         return isclose(self.x, o.x, rel_tol, abs_tol) and \
 *                isclose(self.y, o.y, rel_tol, abs_tol)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2), __pyx_v_other); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":204
 *                 double abs_tol = ABS_TOL) -> bool:
 *         cdef Vec2 o = Vec2(other)
 *         return isclose(self.x, o.x, rel_tol, abs_tol) and \             # <<<<<<<<<<<<<<
 *                isclose(self.y, o.y, rel_tol, abs_tol)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_5ezdxf_3acc_6vector_isclose(__pyx_v_self->x, __pyx_v_o->x, __pyx_v_rel_tol, __pyx_v_abs_tol);
  if (__pyx_t_2) {
  } else {
    __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L3_bool_binop_done;
  }

  /* "ezdxf/acc/vector.pyx":205
 *         cdef Vec2 o = Vec2(other)
 *         return isclose(self.x, o.x, rel_tol, abs_tol) and \
 *                isclose(self.y, o.y, rel_tol, abs_tol)             # <<<<<<<<<<<<<<
 * 
 *     def __eq__(self, other: 'Vertex') -> bool:
 */
  __pyx_t_2 = __pyx_f_5ezdxf_3acc_6vector_isclose(__pyx_v_self->y, __pyx_v_o->y, __pyx_v_rel_tol, __pyx_v_abs_tol);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":201
 *         return self.x != 0 or self.y != 0
 * 
 *     def isclose(self, other: 'VecXY', *, double rel_tol=REL_TOL,             # <<<<<<<<<<<<<<
 *                 double abs_tol = ABS_TOL) -> bool:
 *         cdef Vec2 o = Vec2(other)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.isclose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":207
 *                isclose(self.y, o.y, rel_tol, abs_tol)
 * 
 *     def __eq__(self, other: 'Vertex') -> bool:             # <<<<<<<<<<<<<<
 *         if not isinstance(other, Vec2):
 *             other = Vec2(other)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_52__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_52__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_51__eq__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_51__eq__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__eq__", 0);
  __Pyx_INCREF(__pyx_v_other);

  /* "ezdxf/acc/vector.pyx":208
 * 
 *     def __eq__(self, other: 'Vertex') -> bool:
 *         if not isinstance(other, Vec2):             # <<<<<<<<<<<<<<
 *             other = Vec2(other)
 *         return self.x == other.x and self.y == other.y
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_5ezdxf_3acc_6vector_Vec2); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "ezdxf/acc/vector.pyx":209
 *     def __eq__(self, other: 'Vertex') -> bool:
 *         if not isinstance(other, Vec2):
 *             other = Vec2(other)             # <<<<<<<<<<<<<<
 *         return self.x == other.x and self.y == other.y
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2), __pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 209, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_other, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "ezdxf/acc/vector.pyx":208
 * 
 *     def __eq__(self, other: 'Vertex') -> bool:
 *         if not isinstance(other, Vec2):             # <<<<<<<<<<<<<<
 *             other = Vec2(other)
 *         return self.x == other.x and self.y == other.y
 */
  }

  /* "ezdxf/acc/vector.pyx":210
 *         if not isinstance(other, Vec2):
 *             other = Vec2(other)
 *         return self.x == other.x and self.y == other.y             # <<<<<<<<<<<<<<
 * 
 *     def __lt__(self, other) -> bool:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_x); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyObject_RichCompare(__pyx_t_4, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 210, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_6);
    __pyx_t_3 = __pyx_t_6;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->y); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_y); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_6, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_3 = __pyx_t_4;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_L4_bool_binop_done:;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":207
 *                isclose(self.y, o.y, rel_tol, abs_tol)
 * 
 *     def __eq__(self, other: 'Vertex') -> bool:             # <<<<<<<<<<<<<<
 *         if not isinstance(other, Vec2):
 *             other = Vec2(other)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_other);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":212
 *         return self.x == other.x and self.y == other.y
 * 
 *     def __lt__(self, other) -> bool:             # <<<<<<<<<<<<<<
 *         cdef Vec2 o = Vec2(other)
 *         if self.x == o.x:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_54__lt__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_54__lt__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__lt__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_53__lt__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_53__lt__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_o = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__lt__", 0);

  /* "ezdxf/acc/vector.pyx":213
 * 
 *     def __lt__(self, other) -> bool:
 *         cdef Vec2 o = Vec2(other)             # <<<<<<<<<<<<<<
 *         if self.x == o.x:
 *             return self.y < o.y
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2), __pyx_v_other); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":214
 *     def __lt__(self, other) -> bool:
 *         cdef Vec2 o = Vec2(other)
 *         if self.x == o.x:             # <<<<<<<<<<<<<<
 *             return self.y < o.y
 *         else:
 */
  __pyx_t_2 = ((__pyx_v_self->x == __pyx_v_o->x) != 0);
  if (__pyx_t_2) {

    /* "ezdxf/acc/vector.pyx":215
 *         cdef Vec2 o = Vec2(other)
 *         if self.x == o.x:
 *             return self.y < o.y             # <<<<<<<<<<<<<<
 *         else:
 *             return self.x < o.x
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->y < __pyx_v_o->y)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 215, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "ezdxf/acc/vector.pyx":214
 *     def __lt__(self, other) -> bool:
 *         cdef Vec2 o = Vec2(other)
 *         if self.x == o.x:             # <<<<<<<<<<<<<<
 *             return self.y < o.y
 *         else:
 */
  }

  /* "ezdxf/acc/vector.pyx":217
 *             return self.y < o.y
 *         else:
 *             return self.x < o.x             # <<<<<<<<<<<<<<
 * 
 *     def __add__(self, other: 'VecXY') -> 'Vec2':
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->x < __pyx_v_o->x)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "ezdxf/acc/vector.pyx":212
 *         return self.x == other.x and self.y == other.y
 * 
 *     def __lt__(self, other) -> bool:             # <<<<<<<<<<<<<<
 *         cdef Vec2 o = Vec2(other)
 *         if self.x == o.x:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.__lt__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":219
 *             return self.x < o.x
 * 
 *     def __add__(self, other: 'VecXY') -> 'Vec2':             # <<<<<<<<<<<<<<
 *         if not isinstance(other, Vec2):
 *             other = Vec2(other)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_56__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_56__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_55__add__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_55__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 0);
  __Pyx_INCREF(__pyx_v_other);

  /* "ezdxf/acc/vector.pyx":220
 * 
 *     def __add__(self, other: 'VecXY') -> 'Vec2':
 *         if not isinstance(other, Vec2):             # <<<<<<<<<<<<<<
 *             other = Vec2(other)
 *         return v2_add(self, <Vec2> other)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_5ezdxf_3acc_6vector_Vec2); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "ezdxf/acc/vector.pyx":221
 *     def __add__(self, other: 'VecXY') -> 'Vec2':
 *         if not isinstance(other, Vec2):
 *             other = Vec2(other)             # <<<<<<<<<<<<<<
 *         return v2_add(self, <Vec2> other)
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2), __pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_other, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "ezdxf/acc/vector.pyx":220
 * 
 *     def __add__(self, other: 'VecXY') -> 'Vec2':
 *         if not isinstance(other, Vec2):             # <<<<<<<<<<<<<<
 *             other = Vec2(other)
 *         return v2_add(self, <Vec2> other)
 */
  }

  /* "ezdxf/acc/vector.pyx":222
 *         if not isinstance(other, Vec2):
 *             other = Vec2(other)
 *         return v2_add(self, <Vec2> other)             # <<<<<<<<<<<<<<
 * 
 *     # __radd__ not supported for Vec2
 */
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(((__pyx_v_self) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_self, __pyx_ptype_5ezdxf_3acc_6vector_Vec2))))) __PYX_ERR(0, 222, __pyx_L1_error)
  __pyx_t_3 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v2_add(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self), ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_other))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":219
 *             return self.x < o.x
 * 
 *     def __add__(self, other: 'VecXY') -> 'Vec2':             # <<<<<<<<<<<<<<
 *         if not isinstance(other, Vec2):
 *             other = Vec2(other)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_other);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":228
 *     __iadd__ = __add__  # immutable
 * 
 *     def __sub__(self, other: 'VecXY') -> 'Vec2':             # <<<<<<<<<<<<<<
 *         if not isinstance(other, Vec2):
 *             other = Vec2(other)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_58__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_58__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__sub__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_57__sub__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_57__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__sub__", 0);
  __Pyx_INCREF(__pyx_v_other);

  /* "ezdxf/acc/vector.pyx":229
 * 
 *     def __sub__(self, other: 'VecXY') -> 'Vec2':
 *         if not isinstance(other, Vec2):             # <<<<<<<<<<<<<<
 *             other = Vec2(other)
 *         return v2_sub(self, <Vec2> other)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_5ezdxf_3acc_6vector_Vec2); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "ezdxf/acc/vector.pyx":230
 *     def __sub__(self, other: 'VecXY') -> 'Vec2':
 *         if not isinstance(other, Vec2):
 *             other = Vec2(other)             # <<<<<<<<<<<<<<
 *         return v2_sub(self, <Vec2> other)
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2), __pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_other, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "ezdxf/acc/vector.pyx":229
 * 
 *     def __sub__(self, other: 'VecXY') -> 'Vec2':
 *         if not isinstance(other, Vec2):             # <<<<<<<<<<<<<<
 *             other = Vec2(other)
 *         return v2_sub(self, <Vec2> other)
 */
  }

  /* "ezdxf/acc/vector.pyx":231
 *         if not isinstance(other, Vec2):
 *             other = Vec2(other)
 *         return v2_sub(self, <Vec2> other)             # <<<<<<<<<<<<<<
 * 
 *     # __rsub__ not supported for Vec2
 */
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(((__pyx_v_self) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_self, __pyx_ptype_5ezdxf_3acc_6vector_Vec2))))) __PYX_ERR(0, 231, __pyx_L1_error)
  __pyx_t_3 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v2_sub(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self), ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_other))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":228
 *     __iadd__ = __add__  # immutable
 * 
 *     def __sub__(self, other: 'VecXY') -> 'Vec2':             # <<<<<<<<<<<<<<
 *         if not isinstance(other, Vec2):
 *             other = Vec2(other)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.__sub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_other);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":237
 *     __isub__ = __sub__  # immutable
 * 
 *     def __mul__(self, factor) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         if isinstance(self, Vec2):
 *             return v2_mul(self, factor)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_60__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_factor); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_60__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_factor) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_59__mul__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_factor));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_59__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_factor) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "ezdxf/acc/vector.pyx":238
 * 
 *     def __mul__(self, factor) -> 'Vec2':
 *         if isinstance(self, Vec2):             # <<<<<<<<<<<<<<
 *             return v2_mul(self, factor)
 *         elif isinstance(factor, Vec2):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_self, __pyx_ptype_5ezdxf_3acc_6vector_Vec2); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "ezdxf/acc/vector.pyx":239
 *     def __mul__(self, factor) -> 'Vec2':
 *         if isinstance(self, Vec2):
 *             return v2_mul(self, factor)             # <<<<<<<<<<<<<<
 *         elif isinstance(factor, Vec2):
 *             return v2_mul(<Vec2> factor, <double> self)
 */
    __Pyx_XDECREF(__pyx_r);
    if (!(likely(((__pyx_v_self) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_self, __pyx_ptype_5ezdxf_3acc_6vector_Vec2))))) __PYX_ERR(0, 239, __pyx_L1_error)
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_factor); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 239, __pyx_L1_error)
    __pyx_t_4 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v2_mul(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self), __pyx_t_3)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "ezdxf/acc/vector.pyx":238
 * 
 *     def __mul__(self, factor) -> 'Vec2':
 *         if isinstance(self, Vec2):             # <<<<<<<<<<<<<<
 *             return v2_mul(self, factor)
 *         elif isinstance(factor, Vec2):
 */
  }

  /* "ezdxf/acc/vector.pyx":240
 *         if isinstance(self, Vec2):
 *             return v2_mul(self, factor)
 *         elif isinstance(factor, Vec2):             # <<<<<<<<<<<<<<
 *             return v2_mul(<Vec2> factor, <double> self)
 *         else:
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_factor, __pyx_ptype_5ezdxf_3acc_6vector_Vec2); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "ezdxf/acc/vector.pyx":241
 *             return v2_mul(self, factor)
 *         elif isinstance(factor, Vec2):
 *             return v2_mul(<Vec2> factor, <double> self)             # <<<<<<<<<<<<<<
 *         else:
 *             return NotImplemented
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_self); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 241, __pyx_L1_error)
    __pyx_t_4 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v2_mul(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_factor), ((double)__pyx_t_3))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "ezdxf/acc/vector.pyx":240
 *         if isinstance(self, Vec2):
 *             return v2_mul(self, factor)
 *         elif isinstance(factor, Vec2):             # <<<<<<<<<<<<<<
 *             return v2_mul(<Vec2> factor, <double> self)
 *         else:
 */
  }

  /* "ezdxf/acc/vector.pyx":243
 *             return v2_mul(<Vec2> factor, <double> self)
 *         else:
 *             return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *     # Special Cython <(3.0) feature: __rmul__ == __mul__(factor, self)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;
  }

  /* "ezdxf/acc/vector.pyx":237
 *     __isub__ = __sub__  # immutable
 * 
 *     def __mul__(self, factor) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         if isinstance(self, Vec2):
 *             return v2_mul(self, factor)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":247
 *     # Special Cython <(3.0) feature: __rmul__ == __mul__(factor, self)
 * 
 *     def __rmul__(self, double factor) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         # for Cython >= 3.0
 *         return v2_mul(self, factor)
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_62__rmul__(PyObject *__pyx_v_self, PyObject *__pyx_arg_factor); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_62__rmul__(PyObject *__pyx_v_self, PyObject *__pyx_arg_factor) {
  double __pyx_v_factor;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__rmul__ (wrapper)", 0);
  assert(__pyx_arg_factor); {
    __pyx_v_factor = __pyx_PyFloat_AsDouble(__pyx_arg_factor); if (unlikely((__pyx_v_factor == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 247, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.__rmul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_61__rmul__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self), ((double)__pyx_v_factor));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_61__rmul__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, double __pyx_v_factor) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__rmul__", 0);

  /* "ezdxf/acc/vector.pyx":249
 *     def __rmul__(self, double factor) -> 'Vec2':
 *         # for Cython >= 3.0
 *         return v2_mul(self, factor)             # <<<<<<<<<<<<<<
 * 
 *     __imul__ = __mul__  # immutable
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v2_mul(__pyx_v_self, __pyx_v_factor)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":247
 *     # Special Cython <(3.0) feature: __rmul__ == __mul__(factor, self)
 * 
 *     def __rmul__(self, double factor) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         # for Cython >= 3.0
 *         return v2_mul(self, factor)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.__rmul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":253
 *     __imul__ = __mul__  # immutable
 * 
 *     def __truediv__(self, double factor) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         return v2_mul(self, 1.0 / factor)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_64__truediv__(PyObject *__pyx_v_self, PyObject *__pyx_arg_factor); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_64__truediv__(PyObject *__pyx_v_self, PyObject *__pyx_arg_factor) {
  double __pyx_v_factor;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__truediv__ (wrapper)", 0);
  assert(__pyx_arg_factor); {
    __pyx_v_factor = __pyx_PyFloat_AsDouble(__pyx_arg_factor); if (unlikely((__pyx_v_factor == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 253, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.__truediv__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_63__truediv__(((PyObject *)__pyx_v_self), ((double)__pyx_v_factor));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_63__truediv__(PyObject *__pyx_v_self, double __pyx_v_factor) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__truediv__", 0);

  /* "ezdxf/acc/vector.pyx":254
 * 
 *     def __truediv__(self, double factor) -> 'Vec2':
 *         return v2_mul(self, 1.0 / factor)             # <<<<<<<<<<<<<<
 * 
 *     # __rtruediv__ not supported -> TypeError
 */
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(((__pyx_v_self) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_self, __pyx_ptype_5ezdxf_3acc_6vector_Vec2))))) __PYX_ERR(0, 254, __pyx_L1_error)
  if (unlikely(__pyx_v_factor == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 254, __pyx_L1_error)
  }
  __pyx_t_1 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v2_mul(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self), (1.0 / __pyx_v_factor))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":253
 *     __imul__ = __mul__  # immutable
 * 
 *     def __truediv__(self, double factor) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         return v2_mul(self, 1.0 / factor)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.__truediv__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":258
 *     # __rtruediv__ not supported -> TypeError
 * 
 *     def dot(self, other: 'VecXY') -> float:             # <<<<<<<<<<<<<<
 *         cdef Vec2 o = Vec2(other)
 *         return v2_dot(self, o)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_66dot(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_66dot(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_65dot(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_65dot(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_o = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dot", 0);

  /* "ezdxf/acc/vector.pyx":259
 * 
 *     def dot(self, other: 'VecXY') -> float:
 *         cdef Vec2 o = Vec2(other)             # <<<<<<<<<<<<<<
 *         return v2_dot(self, o)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2), __pyx_v_other); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":260
 *     def dot(self, other: 'VecXY') -> float:
 *         cdef Vec2 o = Vec2(other)
 *         return v2_dot(self, o)             # <<<<<<<<<<<<<<
 * 
 *     def det(self, other: 'VecXY') -> float:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_5ezdxf_3acc_6vector_v2_dot(__pyx_v_self, __pyx_v_o)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":258
 *     # __rtruediv__ not supported -> TypeError
 * 
 *     def dot(self, other: 'VecXY') -> float:             # <<<<<<<<<<<<<<
 *         cdef Vec2 o = Vec2(other)
 *         return v2_dot(self, o)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":262
 *         return v2_dot(self, o)
 * 
 *     def det(self, other: 'VecXY') -> float:             # <<<<<<<<<<<<<<
 *         cdef Vec2 o = Vec2(other)
 *         return v2_det(self, o)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_68det(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_68det(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("det (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_67det(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_67det(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_o = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("det", 0);

  /* "ezdxf/acc/vector.pyx":263
 * 
 *     def det(self, other: 'VecXY') -> float:
 *         cdef Vec2 o = Vec2(other)             # <<<<<<<<<<<<<<
 *         return v2_det(self, o)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2), __pyx_v_other); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":264
 *     def det(self, other: 'VecXY') -> float:
 *         cdef Vec2 o = Vec2(other)
 *         return v2_det(self, o)             # <<<<<<<<<<<<<<
 * 
 *     def distance(self, other: 'VecXY') -> float:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_5ezdxf_3acc_6vector_v2_det(__pyx_v_self, __pyx_v_o)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":262
 *         return v2_dot(self, o)
 * 
 *     def det(self, other: 'VecXY') -> float:             # <<<<<<<<<<<<<<
 *         cdef Vec2 o = Vec2(other)
 *         return v2_det(self, o)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.det", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":266
 *         return v2_det(self, o)
 * 
 *     def distance(self, other: 'VecXY') -> float:             # <<<<<<<<<<<<<<
 *         cdef Vec2 o = Vec2(other)
 *         return v2_dist(self, o)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_70distance(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_70distance(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distance (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_69distance(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_69distance(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_o = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance", 0);

  /* "ezdxf/acc/vector.pyx":267
 * 
 *     def distance(self, other: 'VecXY') -> float:
 *         cdef Vec2 o = Vec2(other)             # <<<<<<<<<<<<<<
 *         return v2_dist(self, o)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2), __pyx_v_other); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":268
 *     def distance(self, other: 'VecXY') -> float:
 *         cdef Vec2 o = Vec2(other)
 *         return v2_dist(self, o)             # <<<<<<<<<<<<<<
 * 
 *     def angle_between(self, other: 'VecXY') -> float:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_5ezdxf_3acc_6vector_v2_dist(__pyx_v_self, __pyx_v_o)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":266
 *         return v2_det(self, o)
 * 
 *     def distance(self, other: 'VecXY') -> float:             # <<<<<<<<<<<<<<
 *         cdef Vec2 o = Vec2(other)
 *         return v2_dist(self, o)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":270
 *         return v2_dist(self, o)
 * 
 *     def angle_between(self, other: 'VecXY') -> float:             # <<<<<<<<<<<<<<
 *         cdef Vec2 o = Vec2(other)
 *         return v2_angle_between(self, o)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_72angle_between(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_72angle_between(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("angle_between (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_71angle_between(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_71angle_between(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_o = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("angle_between", 0);

  /* "ezdxf/acc/vector.pyx":271
 * 
 *     def angle_between(self, other: 'VecXY') -> float:
 *         cdef Vec2 o = Vec2(other)             # <<<<<<<<<<<<<<
 *         return v2_angle_between(self, o)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2), __pyx_v_other); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":272
 *     def angle_between(self, other: 'VecXY') -> float:
 *         cdef Vec2 o = Vec2(other)
 *         return v2_angle_between(self, o)             # <<<<<<<<<<<<<<
 * 
 *     def rotate(self, double angle: float):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_5ezdxf_3acc_6vector_v2_angle_between(__pyx_v_self, __pyx_v_o); if (unlikely(__pyx_t_2 == ((double)-1000.0))) __PYX_ERR(0, 272, __pyx_L1_error)
  __pyx_t_1 = PyFloat_FromDouble(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":270
 *         return v2_dist(self, o)
 * 
 *     def angle_between(self, other: 'VecXY') -> float:             # <<<<<<<<<<<<<<
 *         cdef Vec2 o = Vec2(other)
 *         return v2_angle_between(self, o)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.angle_between", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":274
 *         return v2_angle_between(self, o)
 * 
 *     def rotate(self, double angle: float):             # <<<<<<<<<<<<<<
 *         cdef double self_angle = atan2(self.y, self.x)
 *         cdef double magnitude = hypot(self.x, self.y)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_74rotate(PyObject *__pyx_v_self, PyObject *__pyx_arg_angle); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_74rotate(PyObject *__pyx_v_self, PyObject *__pyx_arg_angle) {
  double __pyx_v_angle;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rotate (wrapper)", 0);
  assert(__pyx_arg_angle); {
    __pyx_v_angle = __pyx_PyFloat_AsDouble(__pyx_arg_angle); if (unlikely((__pyx_v_angle == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 274, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.rotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_73rotate(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self), ((double)__pyx_v_angle));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_73rotate(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, double __pyx_v_angle) {
  double __pyx_v_self_angle;
  double __pyx_v_magnitude;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rotate", 0);

  /* "ezdxf/acc/vector.pyx":275
 * 
 *     def rotate(self, double angle: float):
 *         cdef double self_angle = atan2(self.y, self.x)             # <<<<<<<<<<<<<<
 *         cdef double magnitude = hypot(self.x, self.y)
 *         return v2_from_angle(self_angle + angle, magnitude)
 */
  __pyx_v_self_angle = atan2(__pyx_v_self->y, __pyx_v_self->x);

  /* "ezdxf/acc/vector.pyx":276
 *     def rotate(self, double angle: float):
 *         cdef double self_angle = atan2(self.y, self.x)
 *         cdef double magnitude = hypot(self.x, self.y)             # <<<<<<<<<<<<<<
 *         return v2_from_angle(self_angle + angle, magnitude)
 * 
 */
  __pyx_v_magnitude = hypot(__pyx_v_self->x, __pyx_v_self->y);

  /* "ezdxf/acc/vector.pyx":277
 *         cdef double self_angle = atan2(self.y, self.x)
 *         cdef double magnitude = hypot(self.x, self.y)
 *         return v2_from_angle(self_angle + angle, magnitude)             # <<<<<<<<<<<<<<
 * 
 *     def rotate_deg(self, double angle) -> 'Vec2':
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v2_from_angle((__pyx_v_self_angle + __pyx_v_angle), __pyx_v_magnitude)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":274
 *         return v2_angle_between(self, o)
 * 
 *     def rotate(self, double angle: float):             # <<<<<<<<<<<<<<
 *         cdef double self_angle = atan2(self.y, self.x)
 *         cdef double magnitude = hypot(self.x, self.y)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.rotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":279
 *         return v2_from_angle(self_angle + angle, magnitude)
 * 
 *     def rotate_deg(self, double angle) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         return self.rotate(angle * DEG2RAD)
 * 
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_76rotate_deg(PyObject *__pyx_v_self, PyObject *__pyx_arg_angle); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_76rotate_deg(PyObject *__pyx_v_self, PyObject *__pyx_arg_angle) {
  double __pyx_v_angle;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rotate_deg (wrapper)", 0);
  assert(__pyx_arg_angle); {
    __pyx_v_angle = __pyx_PyFloat_AsDouble(__pyx_arg_angle); if (unlikely((__pyx_v_angle == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 279, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.rotate_deg", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_75rotate_deg(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self), ((double)__pyx_v_angle));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_75rotate_deg(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self, double __pyx_v_angle) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rotate_deg", 0);

  /* "ezdxf/acc/vector.pyx":280
 * 
 *     def rotate_deg(self, double angle) -> 'Vec2':
 *         return self.rotate(angle * DEG2RAD)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rotate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_angle * __pyx_v_5ezdxf_3acc_6vector_DEG2RAD)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5ezdxf_3acc_6vector_Vec2))))) __PYX_ERR(0, 280, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":279
 *         return v2_from_angle(self_angle + angle, magnitude)
 * 
 *     def rotate_deg(self, double angle) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         return self.rotate(angle * DEG2RAD)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.rotate_deg", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":283
 * 
 *     @staticmethod
 *     def sum(items: Iterable['Vec2']) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         cdef Vec2 res = Vec2()
 *         cdef Vec2 tmp
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_78sum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5ezdxf_3acc_6vector_4Vec2_78sum = {"sum", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec2_78sum, METH_VARARGS|METH_KEYWORDS, 0};
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_78sum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_items = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sum (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_items,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_items)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sum") < 0)) __PYX_ERR(0, 283, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_items = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sum", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 283, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.sum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_77sum(__pyx_v_items);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_77sum(PyObject *__pyx_v_items) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_res = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_tmp = 0;
  PyObject *__pyx_v_v = NULL;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sum", 0);

  /* "ezdxf/acc/vector.pyx":284
 *     @staticmethod
 *     def sum(items: Iterable['Vec2']) -> 'Vec2':
 *         cdef Vec2 res = Vec2()             # <<<<<<<<<<<<<<
 *         cdef Vec2 tmp
 *         res.x = 0.0
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":286
 *         cdef Vec2 res = Vec2()
 *         cdef Vec2 tmp
 *         res.x = 0.0             # <<<<<<<<<<<<<<
 *         res.y = 0.0
 *         for v in items:
 */
  __pyx_v_res->x = 0.0;

  /* "ezdxf/acc/vector.pyx":287
 *         cdef Vec2 tmp
 *         res.x = 0.0
 *         res.y = 0.0             # <<<<<<<<<<<<<<
 *         for v in items:
 *             tmp = v
 */
  __pyx_v_res->y = 0.0;

  /* "ezdxf/acc/vector.pyx":288
 *         res.x = 0.0
 *         res.y = 0.0
 *         for v in items:             # <<<<<<<<<<<<<<
 *             tmp = v
 *             res.x += tmp.x
 */
  if (likely(PyList_CheckExact(__pyx_v_items)) || PyTuple_CheckExact(__pyx_v_items)) {
    __pyx_t_1 = __pyx_v_items; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_items); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 288, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 288, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 288, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 288, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 288, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 288, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "ezdxf/acc/vector.pyx":289
 *         res.y = 0.0
 *         for v in items:
 *             tmp = v             # <<<<<<<<<<<<<<
 *             res.x += tmp.x
 *             res.y += tmp.y
 */
    if (!(likely(((__pyx_v_v) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_v, __pyx_ptype_5ezdxf_3acc_6vector_Vec2))))) __PYX_ERR(0, 289, __pyx_L1_error)
    __pyx_t_4 = __pyx_v_v;
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_tmp, ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "ezdxf/acc/vector.pyx":290
 *         for v in items:
 *             tmp = v
 *             res.x += tmp.x             # <<<<<<<<<<<<<<
 *             res.y += tmp.y
 *         return res
 */
    __pyx_v_res->x = (__pyx_v_res->x + __pyx_v_tmp->x);

    /* "ezdxf/acc/vector.pyx":291
 *             tmp = v
 *             res.x += tmp.x
 *             res.y += tmp.y             # <<<<<<<<<<<<<<
 *         return res
 * 
 */
    __pyx_v_res->y = (__pyx_v_res->y + __pyx_v_tmp->y);

    /* "ezdxf/acc/vector.pyx":288
 *         res.x = 0.0
 *         res.y = 0.0
 *         for v in items:             # <<<<<<<<<<<<<<
 *             tmp = v
 *             res.x += tmp.x
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":292
 *             res.x += tmp.x
 *             res.y += tmp.y
 *         return res             # <<<<<<<<<<<<<<
 * 
 *     cdef CppVec3 to_cpp_vec3(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":283
 * 
 *     @staticmethod
 *     def sum(items: Iterable['Vec2']) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         cdef Vec2 res = Vec2()
 *         cdef Vec2 tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.sum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XDECREF((PyObject *)__pyx_v_tmp);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":294
 *         return res
 * 
 *     cdef CppVec3 to_cpp_vec3(self):             # <<<<<<<<<<<<<<
 *         return CppVec3(self.x, self.y, 0.0)
 * 
 */

static CppVec3 __pyx_f_5ezdxf_3acc_6vector_4Vec2_to_cpp_vec3(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self) {
  CppVec3 __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_cpp_vec3", 0);

  /* "ezdxf/acc/vector.pyx":295
 * 
 *     cdef CppVec3 to_cpp_vec3(self):
 *         return CppVec3(self.x, self.y, 0.0)             # <<<<<<<<<<<<<<
 * 
 * cdef Vec2 v2_add(Vec2 a, Vec2 b):
 */
  __pyx_r = CppVec3(__pyx_v_self->x, __pyx_v_self->y, 0.0);
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":294
 *         return res
 * 
 *     cdef CppVec3 to_cpp_vec3(self):             # <<<<<<<<<<<<<<
 *         return CppVec3(self.x, self.y, 0.0)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pxd":15
 * 
 * cdef class Vec2:
 *     cdef readonly double x, y             # <<<<<<<<<<<<<<
 *     cdef CppVec3 to_cpp_vec3(self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_1x_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_1x_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_1x___get__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_1x___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.x.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_1y_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec2_1y_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec2_1y___get__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec2_1y___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->y); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec2.y.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":297
 *         return CppVec3(self.x, self.y, 0.0)
 * 
 * cdef Vec2 v2_add(Vec2 a, Vec2 b):             # <<<<<<<<<<<<<<
 *     res = Vec2()
 *     res.x = a.x + b.x
 */

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_f_5ezdxf_3acc_6vector_v2_add(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_a, struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_b) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_res = NULL;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("v2_add", 0);

  /* "ezdxf/acc/vector.pyx":298
 * 
 * cdef Vec2 v2_add(Vec2 a, Vec2 b):
 *     res = Vec2()             # <<<<<<<<<<<<<<
 *     res.x = a.x + b.x
 *     res.y = a.y + b.y
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":299
 * cdef Vec2 v2_add(Vec2 a, Vec2 b):
 *     res = Vec2()
 *     res.x = a.x + b.x             # <<<<<<<<<<<<<<
 *     res.y = a.y + b.y
 *     return res
 */
  __pyx_v_res->x = (__pyx_v_a->x + __pyx_v_b->x);

  /* "ezdxf/acc/vector.pyx":300
 *     res = Vec2()
 *     res.x = a.x + b.x
 *     res.y = a.y + b.y             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  __pyx_v_res->y = (__pyx_v_a->y + __pyx_v_b->y);

  /* "ezdxf/acc/vector.pyx":301
 *     res.x = a.x + b.x
 *     res.y = a.y + b.y
 *     return res             # <<<<<<<<<<<<<<
 * 
 * cdef Vec2 v2_sub(Vec2 a, Vec2 b):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":297
 *         return CppVec3(self.x, self.y, 0.0)
 * 
 * cdef Vec2 v2_add(Vec2 a, Vec2 b):             # <<<<<<<<<<<<<<
 *     res = Vec2()
 *     res.x = a.x + b.x
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.v2_add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":303
 *     return res
 * 
 * cdef Vec2 v2_sub(Vec2 a, Vec2 b):             # <<<<<<<<<<<<<<
 *     res = Vec2()
 *     res.x = a.x - b.x
 */

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_f_5ezdxf_3acc_6vector_v2_sub(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_a, struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_b) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_res = NULL;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("v2_sub", 0);

  /* "ezdxf/acc/vector.pyx":304
 * 
 * cdef Vec2 v2_sub(Vec2 a, Vec2 b):
 *     res = Vec2()             # <<<<<<<<<<<<<<
 *     res.x = a.x - b.x
 *     res.y = a.y - b.y
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":305
 * cdef Vec2 v2_sub(Vec2 a, Vec2 b):
 *     res = Vec2()
 *     res.x = a.x - b.x             # <<<<<<<<<<<<<<
 *     res.y = a.y - b.y
 *     return res
 */
  __pyx_v_res->x = (__pyx_v_a->x - __pyx_v_b->x);

  /* "ezdxf/acc/vector.pyx":306
 *     res = Vec2()
 *     res.x = a.x - b.x
 *     res.y = a.y - b.y             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  __pyx_v_res->y = (__pyx_v_a->y - __pyx_v_b->y);

  /* "ezdxf/acc/vector.pyx":307
 *     res.x = a.x - b.x
 *     res.y = a.y - b.y
 *     return res             # <<<<<<<<<<<<<<
 * 
 * cdef Vec2 v2_mul(Vec2 a, double factor):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":303
 *     return res
 * 
 * cdef Vec2 v2_sub(Vec2 a, Vec2 b):             # <<<<<<<<<<<<<<
 *     res = Vec2()
 *     res.x = a.x - b.x
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.v2_sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":309
 *     return res
 * 
 * cdef Vec2 v2_mul(Vec2 a, double factor):             # <<<<<<<<<<<<<<
 *     res = Vec2()
 *     res.x = a.x * factor
 */

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_f_5ezdxf_3acc_6vector_v2_mul(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_a, double __pyx_v_factor) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_res = NULL;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("v2_mul", 0);

  /* "ezdxf/acc/vector.pyx":310
 * 
 * cdef Vec2 v2_mul(Vec2 a, double factor):
 *     res = Vec2()             # <<<<<<<<<<<<<<
 *     res.x = a.x * factor
 *     res.y = a.y * factor
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":311
 * cdef Vec2 v2_mul(Vec2 a, double factor):
 *     res = Vec2()
 *     res.x = a.x * factor             # <<<<<<<<<<<<<<
 *     res.y = a.y * factor
 *     return res
 */
  __pyx_v_res->x = (__pyx_v_a->x * __pyx_v_factor);

  /* "ezdxf/acc/vector.pyx":312
 *     res = Vec2()
 *     res.x = a.x * factor
 *     res.y = a.y * factor             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  __pyx_v_res->y = (__pyx_v_a->y * __pyx_v_factor);

  /* "ezdxf/acc/vector.pyx":313
 *     res.x = a.x * factor
 *     res.y = a.y * factor
 *     return res             # <<<<<<<<<<<<<<
 * 
 * cdef double v2_dot(Vec2 a, Vec2 b):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":309
 *     return res
 * 
 * cdef Vec2 v2_mul(Vec2 a, double factor):             # <<<<<<<<<<<<<<
 *     res = Vec2()
 *     res.x = a.x * factor
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.v2_mul", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":315
 *     return res
 * 
 * cdef double v2_dot(Vec2 a, Vec2 b):             # <<<<<<<<<<<<<<
 *     return a.x * b.x + a.y * b.y
 * 
 */

static double __pyx_f_5ezdxf_3acc_6vector_v2_dot(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_a, struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_b) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("v2_dot", 0);

  /* "ezdxf/acc/vector.pyx":316
 * 
 * cdef double v2_dot(Vec2 a, Vec2 b):
 *     return a.x * b.x + a.y * b.y             # <<<<<<<<<<<<<<
 * 
 * cdef double v2_det(Vec2 a, Vec2 b):
 */
  __pyx_r = ((__pyx_v_a->x * __pyx_v_b->x) + (__pyx_v_a->y * __pyx_v_b->y));
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":315
 *     return res
 * 
 * cdef double v2_dot(Vec2 a, Vec2 b):             # <<<<<<<<<<<<<<
 *     return a.x * b.x + a.y * b.y
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":318
 *     return a.x * b.x + a.y * b.y
 * 
 * cdef double v2_det(Vec2 a, Vec2 b):             # <<<<<<<<<<<<<<
 *     return a.x * b.y - a.y * b.x
 * 
 */

static double __pyx_f_5ezdxf_3acc_6vector_v2_det(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_a, struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_b) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("v2_det", 0);

  /* "ezdxf/acc/vector.pyx":319
 * 
 * cdef double v2_det(Vec2 a, Vec2 b):
 *     return a.x * b.y - a.y * b.x             # <<<<<<<<<<<<<<
 * 
 * cdef double v2_dist(Vec2 a, Vec2 b):
 */
  __pyx_r = ((__pyx_v_a->x * __pyx_v_b->y) - (__pyx_v_a->y * __pyx_v_b->x));
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":318
 *     return a.x * b.x + a.y * b.y
 * 
 * cdef double v2_det(Vec2 a, Vec2 b):             # <<<<<<<<<<<<<<
 *     return a.x * b.y - a.y * b.x
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":321
 *     return a.x * b.y - a.y * b.x
 * 
 * cdef double v2_dist(Vec2 a, Vec2 b):             # <<<<<<<<<<<<<<
 *     return hypot(a.x - b.x, a.y - b.y)
 * 
 */

static double __pyx_f_5ezdxf_3acc_6vector_v2_dist(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_a, struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_b) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("v2_dist", 0);

  /* "ezdxf/acc/vector.pyx":322
 * 
 * cdef double v2_dist(Vec2 a, Vec2 b):
 *     return hypot(a.x - b.x, a.y - b.y)             # <<<<<<<<<<<<<<
 * 
 * cdef Vec2 v2_from_angle(double angle, double length):
 */
  __pyx_r = hypot((__pyx_v_a->x - __pyx_v_b->x), (__pyx_v_a->y - __pyx_v_b->y));
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":321
 *     return a.x * b.y - a.y * b.x
 * 
 * cdef double v2_dist(Vec2 a, Vec2 b):             # <<<<<<<<<<<<<<
 *     return hypot(a.x - b.x, a.y - b.y)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":324
 *     return hypot(a.x - b.x, a.y - b.y)
 * 
 * cdef Vec2 v2_from_angle(double angle, double length):             # <<<<<<<<<<<<<<
 *     cdef Vec2 res = Vec2()
 *     res.x = cos(angle) * length
 */

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_f_5ezdxf_3acc_6vector_v2_from_angle(double __pyx_v_angle, double __pyx_v_length) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_res = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("v2_from_angle", 0);

  /* "ezdxf/acc/vector.pyx":325
 * 
 * cdef Vec2 v2_from_angle(double angle, double length):
 *     cdef Vec2 res = Vec2()             # <<<<<<<<<<<<<<
 *     res.x = cos(angle) * length
 *     res.y = sin(angle) * length
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":326
 * cdef Vec2 v2_from_angle(double angle, double length):
 *     cdef Vec2 res = Vec2()
 *     res.x = cos(angle) * length             # <<<<<<<<<<<<<<
 *     res.y = sin(angle) * length
 *     return res
 */
  __pyx_v_res->x = (cos(__pyx_v_angle) * __pyx_v_length);

  /* "ezdxf/acc/vector.pyx":327
 *     cdef Vec2 res = Vec2()
 *     res.x = cos(angle) * length
 *     res.y = sin(angle) * length             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  __pyx_v_res->y = (sin(__pyx_v_angle) * __pyx_v_length);

  /* "ezdxf/acc/vector.pyx":328
 *     res.x = cos(angle) * length
 *     res.y = sin(angle) * length
 *     return res             # <<<<<<<<<<<<<<
 * 
 * cdef double v2_angle_between(Vec2 a, Vec2 b) except -1000:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":324
 *     return hypot(a.x - b.x, a.y - b.y)
 * 
 * cdef Vec2 v2_from_angle(double angle, double length):             # <<<<<<<<<<<<<<
 *     cdef Vec2 res = Vec2()
 *     res.x = cos(angle) * length
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.v2_from_angle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":330
 *     return res
 * 
 * cdef double v2_angle_between(Vec2 a, Vec2 b) except -1000:             # <<<<<<<<<<<<<<
 *     cdef double cos_theta = v2_dot(v2_normalize(a, 1.0), v2_normalize(b, 1.0))
 *     # avoid domain errors caused by floating point imprecision:
 */

static double __pyx_f_5ezdxf_3acc_6vector_v2_angle_between(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_a, struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_b) {
  double __pyx_v_cos_theta;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("v2_angle_between", 0);

  /* "ezdxf/acc/vector.pyx":331
 * 
 * cdef double v2_angle_between(Vec2 a, Vec2 b) except -1000:
 *     cdef double cos_theta = v2_dot(v2_normalize(a, 1.0), v2_normalize(b, 1.0))             # <<<<<<<<<<<<<<
 *     # avoid domain errors caused by floating point imprecision:
 *     if cos_theta < -1.0:
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v2_normalize(__pyx_v_a, 1.0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v2_normalize(__pyx_v_b, 1.0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_cos_theta = __pyx_f_5ezdxf_3acc_6vector_v2_dot(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_1), ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_2));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ezdxf/acc/vector.pyx":333
 *     cdef double cos_theta = v2_dot(v2_normalize(a, 1.0), v2_normalize(b, 1.0))
 *     # avoid domain errors caused by floating point imprecision:
 *     if cos_theta < -1.0:             # <<<<<<<<<<<<<<
 *         cos_theta = -1.0
 *     elif cos_theta > 1.0:
 */
  __pyx_t_3 = ((__pyx_v_cos_theta < -1.0) != 0);
  if (__pyx_t_3) {

    /* "ezdxf/acc/vector.pyx":334
 *     # avoid domain errors caused by floating point imprecision:
 *     if cos_theta < -1.0:
 *         cos_theta = -1.0             # <<<<<<<<<<<<<<
 *     elif cos_theta > 1.0:
 *         cos_theta = 1.0
 */
    __pyx_v_cos_theta = -1.0;

    /* "ezdxf/acc/vector.pyx":333
 *     cdef double cos_theta = v2_dot(v2_normalize(a, 1.0), v2_normalize(b, 1.0))
 *     # avoid domain errors caused by floating point imprecision:
 *     if cos_theta < -1.0:             # <<<<<<<<<<<<<<
 *         cos_theta = -1.0
 *     elif cos_theta > 1.0:
 */
    goto __pyx_L3;
  }

  /* "ezdxf/acc/vector.pyx":335
 *     if cos_theta < -1.0:
 *         cos_theta = -1.0
 *     elif cos_theta > 1.0:             # <<<<<<<<<<<<<<
 *         cos_theta = 1.0
 *     return acos(cos_theta)
 */
  __pyx_t_3 = ((__pyx_v_cos_theta > 1.0) != 0);
  if (__pyx_t_3) {

    /* "ezdxf/acc/vector.pyx":336
 *         cos_theta = -1.0
 *     elif cos_theta > 1.0:
 *         cos_theta = 1.0             # <<<<<<<<<<<<<<
 *     return acos(cos_theta)
 * 
 */
    __pyx_v_cos_theta = 1.0;

    /* "ezdxf/acc/vector.pyx":335
 *     if cos_theta < -1.0:
 *         cos_theta = -1.0
 *     elif cos_theta > 1.0:             # <<<<<<<<<<<<<<
 *         cos_theta = 1.0
 *     return acos(cos_theta)
 */
  }
  __pyx_L3:;

  /* "ezdxf/acc/vector.pyx":337
 *     elif cos_theta > 1.0:
 *         cos_theta = 1.0
 *     return acos(cos_theta)             # <<<<<<<<<<<<<<
 * 
 * cdef Vec2 v2_normalize(Vec2 a, double length):
 */
  __pyx_r = acos(__pyx_v_cos_theta);
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":330
 *     return res
 * 
 * cdef double v2_angle_between(Vec2 a, Vec2 b) except -1000:             # <<<<<<<<<<<<<<
 *     cdef double cos_theta = v2_dot(v2_normalize(a, 1.0), v2_normalize(b, 1.0))
 *     # avoid domain errors caused by floating point imprecision:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ezdxf.acc.vector.v2_angle_between", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1000.0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":339
 *     return acos(cos_theta)
 * 
 * cdef Vec2 v2_normalize(Vec2 a, double length):             # <<<<<<<<<<<<<<
 *     cdef double factor = length / hypot(a.x, a.y)
 *     cdef Vec2 res = Vec2()
 */

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_f_5ezdxf_3acc_6vector_v2_normalize(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_a, double __pyx_v_length) {
  double __pyx_v_factor;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_res = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("v2_normalize", 0);

  /* "ezdxf/acc/vector.pyx":340
 * 
 * cdef Vec2 v2_normalize(Vec2 a, double length):
 *     cdef double factor = length / hypot(a.x, a.y)             # <<<<<<<<<<<<<<
 *     cdef Vec2 res = Vec2()
 *     res.x = a.x * factor
 */
  __pyx_t_1 = hypot(__pyx_v_a->x, __pyx_v_a->y);
  if (unlikely(__pyx_t_1 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 340, __pyx_L1_error)
  }
  __pyx_v_factor = (__pyx_v_length / __pyx_t_1);

  /* "ezdxf/acc/vector.pyx":341
 * cdef Vec2 v2_normalize(Vec2 a, double length):
 *     cdef double factor = length / hypot(a.x, a.y)
 *     cdef Vec2 res = Vec2()             # <<<<<<<<<<<<<<
 *     res.x = a.x * factor
 *     res.y = a.y * factor
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_res = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ezdxf/acc/vector.pyx":342
 *     cdef double factor = length / hypot(a.x, a.y)
 *     cdef Vec2 res = Vec2()
 *     res.x = a.x * factor             # <<<<<<<<<<<<<<
 *     res.y = a.y * factor
 *     return res
 */
  __pyx_v_res->x = (__pyx_v_a->x * __pyx_v_factor);

  /* "ezdxf/acc/vector.pyx":343
 *     cdef Vec2 res = Vec2()
 *     res.x = a.x * factor
 *     res.y = a.y * factor             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  __pyx_v_res->y = (__pyx_v_a->y * __pyx_v_factor);

  /* "ezdxf/acc/vector.pyx":344
 *     res.x = a.x * factor
 *     res.y = a.y * factor
 *     return res             # <<<<<<<<<<<<<<
 * 
 * cdef Vec2 v2_lerp(Vec2 a, Vec2 b, double factor):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":339
 *     return acos(cos_theta)
 * 
 * cdef Vec2 v2_normalize(Vec2 a, double length):             # <<<<<<<<<<<<<<
 *     cdef double factor = length / hypot(a.x, a.y)
 *     cdef Vec2 res = Vec2()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ezdxf.acc.vector.v2_normalize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":346
 *     return res
 * 
 * cdef Vec2 v2_lerp(Vec2 a, Vec2 b, double factor):             # <<<<<<<<<<<<<<
 *     cdef Vec2 res = Vec2()
 *     res.x = a.x + (b.x - a.x) * factor
 */

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_f_5ezdxf_3acc_6vector_v2_lerp(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_a, struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_b, double __pyx_v_factor) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_res = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("v2_lerp", 0);

  /* "ezdxf/acc/vector.pyx":347
 * 
 * cdef Vec2 v2_lerp(Vec2 a, Vec2 b, double factor):
 *     cdef Vec2 res = Vec2()             # <<<<<<<<<<<<<<
 *     res.x = a.x + (b.x - a.x) * factor
 *     res.y = a.y + (b.y - a.y) * factor
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":348
 * cdef Vec2 v2_lerp(Vec2 a, Vec2 b, double factor):
 *     cdef Vec2 res = Vec2()
 *     res.x = a.x + (b.x - a.x) * factor             # <<<<<<<<<<<<<<
 *     res.y = a.y + (b.y - a.y) * factor
 *     return res
 */
  __pyx_v_res->x = (__pyx_v_a->x + ((__pyx_v_b->x - __pyx_v_a->x) * __pyx_v_factor));

  /* "ezdxf/acc/vector.pyx":349
 *     cdef Vec2 res = Vec2()
 *     res.x = a.x + (b.x - a.x) * factor
 *     res.y = a.y + (b.y - a.y) * factor             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  __pyx_v_res->y = (__pyx_v_a->y + ((__pyx_v_b->y - __pyx_v_a->y) * __pyx_v_factor));

  /* "ezdxf/acc/vector.pyx":350
 *     res.x = a.x + (b.x - a.x) * factor
 *     res.y = a.y + (b.y - a.y) * factor
 *     return res             # <<<<<<<<<<<<<<
 * 
 * cdef Vec2 v2_ortho(Vec2 a, bint ccw):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":346
 *     return res
 * 
 * cdef Vec2 v2_lerp(Vec2 a, Vec2 b, double factor):             # <<<<<<<<<<<<<<
 *     cdef Vec2 res = Vec2()
 *     res.x = a.x + (b.x - a.x) * factor
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.v2_lerp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":352
 *     return res
 * 
 * cdef Vec2 v2_ortho(Vec2 a, bint ccw):             # <<<<<<<<<<<<<<
 *     cdef Vec2 res = Vec2()
 *     if ccw:
 */

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_f_5ezdxf_3acc_6vector_v2_ortho(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_a, int __pyx_v_ccw) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_res = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("v2_ortho", 0);

  /* "ezdxf/acc/vector.pyx":353
 * 
 * cdef Vec2 v2_ortho(Vec2 a, bint ccw):
 *     cdef Vec2 res = Vec2()             # <<<<<<<<<<<<<<
 *     if ccw:
 *         res.x = -a.y
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":354
 * cdef Vec2 v2_ortho(Vec2 a, bint ccw):
 *     cdef Vec2 res = Vec2()
 *     if ccw:             # <<<<<<<<<<<<<<
 *         res.x = -a.y
 *         res.y = a.x
 */
  __pyx_t_2 = (__pyx_v_ccw != 0);
  if (__pyx_t_2) {

    /* "ezdxf/acc/vector.pyx":355
 *     cdef Vec2 res = Vec2()
 *     if ccw:
 *         res.x = -a.y             # <<<<<<<<<<<<<<
 *         res.y = a.x
 *     else:
 */
    __pyx_v_res->x = (-__pyx_v_a->y);

    /* "ezdxf/acc/vector.pyx":356
 *     if ccw:
 *         res.x = -a.y
 *         res.y = a.x             # <<<<<<<<<<<<<<
 *     else:
 *         res.x = a.y
 */
    __pyx_t_3 = __pyx_v_a->x;
    __pyx_v_res->y = __pyx_t_3;

    /* "ezdxf/acc/vector.pyx":354
 * cdef Vec2 v2_ortho(Vec2 a, bint ccw):
 *     cdef Vec2 res = Vec2()
 *     if ccw:             # <<<<<<<<<<<<<<
 *         res.x = -a.y
 *         res.y = a.x
 */
    goto __pyx_L3;
  }

  /* "ezdxf/acc/vector.pyx":358
 *         res.y = a.x
 *     else:
 *         res.x = a.y             # <<<<<<<<<<<<<<
 *         res.y = -a.x
 *     return res
 */
  /*else*/ {
    __pyx_t_3 = __pyx_v_a->y;
    __pyx_v_res->x = __pyx_t_3;

    /* "ezdxf/acc/vector.pyx":359
 *     else:
 *         res.x = a.y
 *         res.y = -a.x             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
    __pyx_v_res->y = (-__pyx_v_a->x);
  }
  __pyx_L3:;

  /* "ezdxf/acc/vector.pyx":360
 *         res.x = a.y
 *         res.y = -a.x
 *     return res             # <<<<<<<<<<<<<<
 * 
 * cdef Vec2 v2_project(Vec2 a, Vec2 b):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":352
 *     return res
 * 
 * cdef Vec2 v2_ortho(Vec2 a, bint ccw):             # <<<<<<<<<<<<<<
 *     cdef Vec2 res = Vec2()
 *     if ccw:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.v2_ortho", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":362
 *     return res
 * 
 * cdef Vec2 v2_project(Vec2 a, Vec2 b):             # <<<<<<<<<<<<<<
 *     cdef Vec2 uv = v2_normalize(a, 1.0)
 *     return v2_mul(uv, v2_dot(uv, b))
 */

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_f_5ezdxf_3acc_6vector_v2_project(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_a, struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_b) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_uv = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("v2_project", 0);

  /* "ezdxf/acc/vector.pyx":363
 * 
 * cdef Vec2 v2_project(Vec2 a, Vec2 b):
 *     cdef Vec2 uv = v2_normalize(a, 1.0)             # <<<<<<<<<<<<<<
 *     return v2_mul(uv, v2_dot(uv, b))
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v2_normalize(__pyx_v_a, 1.0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_uv = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":364
 * cdef Vec2 v2_project(Vec2 a, Vec2 b):
 *     cdef Vec2 uv = v2_normalize(a, 1.0)
 *     return v2_mul(uv, v2_dot(uv, b))             # <<<<<<<<<<<<<<
 * 
 * cdef bint v2_isclose(Vec2 a, Vec2 b, double rel_tol, double abs_tol):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v2_mul(__pyx_v_uv, __pyx_f_5ezdxf_3acc_6vector_v2_dot(__pyx_v_uv, __pyx_v_b))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":362
 *     return res
 * 
 * cdef Vec2 v2_project(Vec2 a, Vec2 b):             # <<<<<<<<<<<<<<
 *     cdef Vec2 uv = v2_normalize(a, 1.0)
 *     return v2_mul(uv, v2_dot(uv, b))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.v2_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_uv);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":366
 *     return v2_mul(uv, v2_dot(uv, b))
 * 
 * cdef bint v2_isclose(Vec2 a, Vec2 b, double rel_tol, double abs_tol):             # <<<<<<<<<<<<<<
 *     return isclose(a.x, b.x, rel_tol, abs_tol) and \
 *            isclose(a.y, b.y, rel_tol, abs_tol)
 */

static int __pyx_f_5ezdxf_3acc_6vector_v2_isclose(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_a, struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_b, double __pyx_v_rel_tol, double __pyx_v_abs_tol) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("v2_isclose", 0);

  /* "ezdxf/acc/vector.pyx":367
 * 
 * cdef bint v2_isclose(Vec2 a, Vec2 b, double rel_tol, double abs_tol):
 *     return isclose(a.x, b.x, rel_tol, abs_tol) and \             # <<<<<<<<<<<<<<
 *            isclose(a.y, b.y, rel_tol, abs_tol)
 * 
 */
  __pyx_t_2 = (__pyx_f_5ezdxf_3acc_6vector_isclose(__pyx_v_a->x, __pyx_v_b->x, __pyx_v_rel_tol, __pyx_v_abs_tol) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }

  /* "ezdxf/acc/vector.pyx":368
 * cdef bint v2_isclose(Vec2 a, Vec2 b, double rel_tol, double abs_tol):
 *     return isclose(a.x, b.x, rel_tol, abs_tol) and \
 *            isclose(a.y, b.y, rel_tol, abs_tol)             # <<<<<<<<<<<<<<
 * 
 * cdef Vec2 v2_from_cpp_vec3(CppVec3 c):
 */
  __pyx_t_2 = (__pyx_f_5ezdxf_3acc_6vector_isclose(__pyx_v_a->y, __pyx_v_b->y, __pyx_v_rel_tol, __pyx_v_abs_tol) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":366
 *     return v2_mul(uv, v2_dot(uv, b))
 * 
 * cdef bint v2_isclose(Vec2 a, Vec2 b, double rel_tol, double abs_tol):             # <<<<<<<<<<<<<<
 *     return isclose(a.x, b.x, rel_tol, abs_tol) and \
 *            isclose(a.y, b.y, rel_tol, abs_tol)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":370
 *            isclose(a.y, b.y, rel_tol, abs_tol)
 * 
 * cdef Vec2 v2_from_cpp_vec3(CppVec3 c):             # <<<<<<<<<<<<<<
 *     cdef Vec2 v = Vec2()
 *     v.x = c.x
 */

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_f_5ezdxf_3acc_6vector_v2_from_cpp_vec3(CppVec3 __pyx_v_c) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_v = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("v2_from_cpp_vec3", 0);

  /* "ezdxf/acc/vector.pyx":371
 * 
 * cdef Vec2 v2_from_cpp_vec3(CppVec3 c):
 *     cdef Vec2 v = Vec2()             # <<<<<<<<<<<<<<
 *     v.x = c.x
 *     v.y = c.y
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_v = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":372
 * cdef Vec2 v2_from_cpp_vec3(CppVec3 c):
 *     cdef Vec2 v = Vec2()
 *     v.x = c.x             # <<<<<<<<<<<<<<
 *     v.y = c.y
 *     return v
 */
  __pyx_t_2 = __pyx_v_c.x;
  __pyx_v_v->x = __pyx_t_2;

  /* "ezdxf/acc/vector.pyx":373
 *     cdef Vec2 v = Vec2()
 *     v.x = c.x
 *     v.y = c.y             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
  __pyx_t_2 = __pyx_v_c.y;
  __pyx_v_v->y = __pyx_t_2;

  /* "ezdxf/acc/vector.pyx":374
 *     v.x = c.x
 *     v.y = c.y
 *     return v             # <<<<<<<<<<<<<<
 * 
 * cdef class Vec3:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_v));
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":370
 *            isclose(a.y, b.y, rel_tol, abs_tol)
 * 
 * cdef Vec2 v2_from_cpp_vec3(CppVec3 c):             # <<<<<<<<<<<<<<
 *     cdef Vec2 v = Vec2()
 *     v.x = c.x
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.v2_from_cpp_vec3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_v);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":391
 *     """
 * 
 *     def __cinit__(self, *args):             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t count = len(<tuple> args)
 *         if count == 0:  # fastest init - default constructor
 */

/* Python wrapper */
static int __pyx_pw_5ezdxf_3acc_6vector_4Vec3_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5ezdxf_3acc_6vector_4Vec3_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3___cinit__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5ezdxf_3acc_6vector_4Vec3___cinit__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_args) {
  Py_ssize_t __pyx_v_count;
  PyObject *__pyx_v_arg0 = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_args);

  /* "ezdxf/acc/vector.pyx":392
 * 
 *     def __cinit__(self, *args):
 *         cdef Py_ssize_t count = len(<tuple> args)             # <<<<<<<<<<<<<<
 *         if count == 0:  # fastest init - default constructor
 *             self.x = 0
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 392, __pyx_L1_error)
  }
  __pyx_t_1 = PyTuple_GET_SIZE(((PyObject*)__pyx_v_args)); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 392, __pyx_L1_error)
  __pyx_v_count = __pyx_t_1;

  /* "ezdxf/acc/vector.pyx":393
 *     def __cinit__(self, *args):
 *         cdef Py_ssize_t count = len(<tuple> args)
 *         if count == 0:  # fastest init - default constructor             # <<<<<<<<<<<<<<
 *             self.x = 0
 *             self.y = 0
 */
  __pyx_t_2 = ((__pyx_v_count == 0) != 0);
  if (__pyx_t_2) {

    /* "ezdxf/acc/vector.pyx":394
 *         cdef Py_ssize_t count = len(<tuple> args)
 *         if count == 0:  # fastest init - default constructor
 *             self.x = 0             # <<<<<<<<<<<<<<
 *             self.y = 0
 *             self.z = 0
 */
    __pyx_v_self->x = 0.0;

    /* "ezdxf/acc/vector.pyx":395
 *         if count == 0:  # fastest init - default constructor
 *             self.x = 0
 *             self.y = 0             # <<<<<<<<<<<<<<
 *             self.z = 0
 *             return
 */
    __pyx_v_self->y = 0.0;

    /* "ezdxf/acc/vector.pyx":396
 *             self.x = 0
 *             self.y = 0
 *             self.z = 0             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __pyx_v_self->z = 0.0;

    /* "ezdxf/acc/vector.pyx":397
 *             self.y = 0
 *             self.z = 0
 *             return             # <<<<<<<<<<<<<<
 * 
 *         if count == 1:
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "ezdxf/acc/vector.pyx":393
 *     def __cinit__(self, *args):
 *         cdef Py_ssize_t count = len(<tuple> args)
 *         if count == 0:  # fastest init - default constructor             # <<<<<<<<<<<<<<
 *             self.x = 0
 *             self.y = 0
 */
  }

  /* "ezdxf/acc/vector.pyx":399
 *             return
 * 
 *         if count == 1:             # <<<<<<<<<<<<<<
 *             arg0 = args[0]
 *             if isinstance(arg0, Vec3):
 */
  __pyx_t_2 = ((__pyx_v_count == 1) != 0);
  if (__pyx_t_2) {

    /* "ezdxf/acc/vector.pyx":400
 * 
 *         if count == 1:
 *             arg0 = args[0]             # <<<<<<<<<<<<<<
 *             if isinstance(arg0, Vec3):
 *                 # fast init by Vec3()
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_arg0 = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "ezdxf/acc/vector.pyx":401
 *         if count == 1:
 *             arg0 = args[0]
 *             if isinstance(arg0, Vec3):             # <<<<<<<<<<<<<<
 *                 # fast init by Vec3()
 *                 self.x = (<Vec3> arg0).x
 */
    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_arg0, __pyx_ptype_5ezdxf_3acc_6vector_Vec3); 
    __pyx_t_4 = (__pyx_t_2 != 0);
    if (__pyx_t_4) {

      /* "ezdxf/acc/vector.pyx":403
 *             if isinstance(arg0, Vec3):
 *                 # fast init by Vec3()
 *                 self.x = (<Vec3> arg0).x             # <<<<<<<<<<<<<<
 *                 self.y = (<Vec3> arg0).y
 *                 self.z = (<Vec3> arg0).z
 */
      __pyx_t_5 = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_arg0)->x;
      __pyx_v_self->x = __pyx_t_5;

      /* "ezdxf/acc/vector.pyx":404
 *                 # fast init by Vec3()
 *                 self.x = (<Vec3> arg0).x
 *                 self.y = (<Vec3> arg0).y             # <<<<<<<<<<<<<<
 *                 self.z = (<Vec3> arg0).z
 *                 return
 */
      __pyx_t_5 = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_arg0)->y;
      __pyx_v_self->y = __pyx_t_5;

      /* "ezdxf/acc/vector.pyx":405
 *                 self.x = (<Vec3> arg0).x
 *                 self.y = (<Vec3> arg0).y
 *                 self.z = (<Vec3> arg0).z             # <<<<<<<<<<<<<<
 *                 return
 *             if isinstance(arg0, Vec2):
 */
      __pyx_t_5 = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_arg0)->z;
      __pyx_v_self->z = __pyx_t_5;

      /* "ezdxf/acc/vector.pyx":406
 *                 self.y = (<Vec3> arg0).y
 *                 self.z = (<Vec3> arg0).z
 *                 return             # <<<<<<<<<<<<<<
 *             if isinstance(arg0, Vec2):
 *                 # fast init by Vec2()
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "ezdxf/acc/vector.pyx":401
 *         if count == 1:
 *             arg0 = args[0]
 *             if isinstance(arg0, Vec3):             # <<<<<<<<<<<<<<
 *                 # fast init by Vec3()
 *                 self.x = (<Vec3> arg0).x
 */
    }

    /* "ezdxf/acc/vector.pyx":407
 *                 self.z = (<Vec3> arg0).z
 *                 return
 *             if isinstance(arg0, Vec2):             # <<<<<<<<<<<<<<
 *                 # fast init by Vec2()
 *                 self.x = (<Vec2> arg0).x
 */
    __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_arg0, __pyx_ptype_5ezdxf_3acc_6vector_Vec2); 
    __pyx_t_2 = (__pyx_t_4 != 0);
    if (__pyx_t_2) {

      /* "ezdxf/acc/vector.pyx":409
 *             if isinstance(arg0, Vec2):
 *                 # fast init by Vec2()
 *                 self.x = (<Vec2> arg0).x             # <<<<<<<<<<<<<<
 *                 self.y = (<Vec2> arg0).y
 *                 self.z = 0
 */
      __pyx_t_5 = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_arg0)->x;
      __pyx_v_self->x = __pyx_t_5;

      /* "ezdxf/acc/vector.pyx":410
 *                 # fast init by Vec2()
 *                 self.x = (<Vec2> arg0).x
 *                 self.y = (<Vec2> arg0).y             # <<<<<<<<<<<<<<
 *                 self.z = 0
 *                 return
 */
      __pyx_t_5 = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_v_arg0)->y;
      __pyx_v_self->y = __pyx_t_5;

      /* "ezdxf/acc/vector.pyx":411
 *                 self.x = (<Vec2> arg0).x
 *                 self.y = (<Vec2> arg0).y
 *                 self.z = 0             # <<<<<<<<<<<<<<
 *                 return
 *             args = arg0
 */
      __pyx_v_self->z = 0.0;

      /* "ezdxf/acc/vector.pyx":412
 *                 self.y = (<Vec2> arg0).y
 *                 self.z = 0
 *                 return             # <<<<<<<<<<<<<<
 *             args = arg0
 *             count = len(args)
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "ezdxf/acc/vector.pyx":407
 *                 self.z = (<Vec3> arg0).z
 *                 return
 *             if isinstance(arg0, Vec2):             # <<<<<<<<<<<<<<
 *                 # fast init by Vec2()
 *                 self.x = (<Vec2> arg0).x
 */
    }

    /* "ezdxf/acc/vector.pyx":413
 *                 self.z = 0
 *                 return
 *             args = arg0             # <<<<<<<<<<<<<<
 *             count = len(args)
 * 
 */
    __Pyx_INCREF(__pyx_v_arg0);
    __Pyx_DECREF_SET(__pyx_v_args, __pyx_v_arg0);

    /* "ezdxf/acc/vector.pyx":414
 *                 return
 *             args = arg0
 *             count = len(args)             # <<<<<<<<<<<<<<
 * 
 *         if count > 3 or count < 2:
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 414, __pyx_L1_error)
    __pyx_v_count = __pyx_t_1;

    /* "ezdxf/acc/vector.pyx":399
 *             return
 * 
 *         if count == 1:             # <<<<<<<<<<<<<<
 *             arg0 = args[0]
 *             if isinstance(arg0, Vec3):
 */
  }

  /* "ezdxf/acc/vector.pyx":416
 *             count = len(args)
 * 
 *         if count > 3 or count < 2:             # <<<<<<<<<<<<<<
 *             raise TypeError('invalid argument count')
 * 
 */
  __pyx_t_4 = ((__pyx_v_count > 3) != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_4 = ((__pyx_v_count < 2) != 0);
  __pyx_t_2 = __pyx_t_4;
  __pyx_L8_bool_binop_done:;
  if (unlikely(__pyx_t_2)) {

    /* "ezdxf/acc/vector.pyx":417
 * 
 *         if count > 3 or count < 2:
 *             raise TypeError('invalid argument count')             # <<<<<<<<<<<<<<
 * 
 *         # slow init by sequence
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 417, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 417, __pyx_L1_error)

    /* "ezdxf/acc/vector.pyx":416
 *             count = len(args)
 * 
 *         if count > 3 or count < 2:             # <<<<<<<<<<<<<<
 *             raise TypeError('invalid argument count')
 * 
 */
  }

  /* "ezdxf/acc/vector.pyx":420
 * 
 *         # slow init by sequence
 *         self.x = args[0]             # <<<<<<<<<<<<<<
 *         self.y = args[1]
 *         if count > 2:
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->x = __pyx_t_5;

  /* "ezdxf/acc/vector.pyx":421
 *         # slow init by sequence
 *         self.x = args[0]
 *         self.y = args[1]             # <<<<<<<<<<<<<<
 *         if count > 2:
 *             self.z = args[2]
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_args, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->y = __pyx_t_5;

  /* "ezdxf/acc/vector.pyx":422
 *         self.x = args[0]
 *         self.y = args[1]
 *         if count > 2:             # <<<<<<<<<<<<<<
 *             self.z = args[2]
 *         else:
 */
  __pyx_t_2 = ((__pyx_v_count > 2) != 0);
  if (__pyx_t_2) {

    /* "ezdxf/acc/vector.pyx":423
 *         self.y = args[1]
 *         if count > 2:
 *             self.z = args[2]             # <<<<<<<<<<<<<<
 *         else:
 *             self.z = 0.0
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_args, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_self->z = __pyx_t_5;

    /* "ezdxf/acc/vector.pyx":422
 *         self.x = args[0]
 *         self.y = args[1]
 *         if count > 2:             # <<<<<<<<<<<<<<
 *             self.z = args[2]
 *         else:
 */
    goto __pyx_L10;
  }

  /* "ezdxf/acc/vector.pyx":425
 *             self.z = args[2]
 *         else:
 *             self.z = 0.0             # <<<<<<<<<<<<<<
 * 
 *     def __reduce__(self):
 */
  /*else*/ {
    __pyx_v_self->z = 0.0;
  }
  __pyx_L10:;

  /* "ezdxf/acc/vector.pyx":391
 *     """
 * 
 *     def __cinit__(self, *args):             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t count = len(<tuple> args)
 *         if count == 0:  # fastest init - default constructor
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_arg0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":427
 *             self.z = 0.0
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return Vec3, self.xyz
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_3__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_3__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_2__reduce__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_2__reduce__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "ezdxf/acc/vector.pyx":428
 * 
 *     def __reduce__(self):
 *         return Vec3, self.xyz             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_xyz); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":427
 *             self.z = 0.0
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return Vec3, self.xyz
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":431
 * 
 *     @property
 *     def xy(self) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         cdef Vec3 res = Vec3()
 *         res.x = self.x
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_2xy_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_2xy_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_2xy___get__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_2xy___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "ezdxf/acc/vector.pyx":432
 *     @property
 *     def xy(self) -> 'Vec3':
 *         cdef Vec3 res = Vec3()             # <<<<<<<<<<<<<<
 *         res.x = self.x
 *         res.y = self.y
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":433
 *     def xy(self) -> 'Vec3':
 *         cdef Vec3 res = Vec3()
 *         res.x = self.x             # <<<<<<<<<<<<<<
 *         res.y = self.y
 *         return res
 */
  __pyx_t_2 = __pyx_v_self->x;
  __pyx_v_res->x = __pyx_t_2;

  /* "ezdxf/acc/vector.pyx":434
 *         cdef Vec3 res = Vec3()
 *         res.x = self.x
 *         res.y = self.y             # <<<<<<<<<<<<<<
 *         return res
 * 
 */
  __pyx_t_2 = __pyx_v_self->y;
  __pyx_v_res->y = __pyx_t_2;

  /* "ezdxf/acc/vector.pyx":435
 *         res.x = self.x
 *         res.y = self.y
 *         return res             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":431
 * 
 *     @property
 *     def xy(self) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         cdef Vec3 res = Vec3()
 *         res.x = self.x
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.xy.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":438
 * 
 *     @property
 *     def xyz(self) -> Tuple[float, float, float]:             # <<<<<<<<<<<<<<
 *         return self.x, self.y, self.z
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_3xyz_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_3xyz_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_3xyz___get__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_3xyz___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "ezdxf/acc/vector.pyx":439
 *     @property
 *     def xyz(self) -> Tuple[float, float, float]:
 *         return self.x, self.y, self.z             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->y); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->z); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":438
 * 
 *     @property
 *     def xyz(self) -> Tuple[float, float, float]:             # <<<<<<<<<<<<<<
 *         return self.x, self.y, self.z
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.xyz.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":442
 * 
 *     @property
 *     def vec2(self) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         cdef Vec2 res = Vec2()
 *         res.x = self.x
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_4vec2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_4vec2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_4vec2___get__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_4vec2___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "ezdxf/acc/vector.pyx":443
 *     @property
 *     def vec2(self) -> 'Vec2':
 *         cdef Vec2 res = Vec2()             # <<<<<<<<<<<<<<
 *         res.x = self.x
 *         res.y = self.y
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":444
 *     def vec2(self) -> 'Vec2':
 *         cdef Vec2 res = Vec2()
 *         res.x = self.x             # <<<<<<<<<<<<<<
 *         res.y = self.y
 *         return res
 */
  __pyx_t_2 = __pyx_v_self->x;
  __pyx_v_res->x = __pyx_t_2;

  /* "ezdxf/acc/vector.pyx":445
 *         cdef Vec2 res = Vec2()
 *         res.x = self.x
 *         res.y = self.y             # <<<<<<<<<<<<<<
 *         return res
 * 
 */
  __pyx_t_2 = __pyx_v_self->y;
  __pyx_v_res->y = __pyx_t_2;

  /* "ezdxf/acc/vector.pyx":446
 *         res.x = self.x
 *         res.y = self.y
 *         return res             # <<<<<<<<<<<<<<
 * 
 *     def replace(self, x: float = None, y: float = None,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":442
 * 
 *     @property
 *     def vec2(self) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         cdef Vec2 res = Vec2()
 *         res.x = self.x
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.vec2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":448
 *         return res
 * 
 *     def replace(self, x: float = None, y: float = None,             # <<<<<<<<<<<<<<
 *                 z: float = None) -> 'Vec3':
 *         cdef Vec3 res = Vec3()
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_5replace(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_5replace(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_z = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("replace (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_z,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);

    /* "ezdxf/acc/vector.pyx":449
 * 
 *     def replace(self, x: float = None, y: float = None,
 *                 z: float = None) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         cdef Vec3 res = Vec3()
 *         res.x = self.x if x is None else x
 */
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "replace") < 0)) __PYX_ERR(0, 448, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
    __pyx_v_z = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("replace", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 448, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.replace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_4replace(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_z);

  /* "ezdxf/acc/vector.pyx":448
 *         return res
 * 
 *     def replace(self, x: float = None, y: float = None,             # <<<<<<<<<<<<<<
 *                 z: float = None) -> 'Vec3':
 *         cdef Vec3 res = Vec3()
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_4replace(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_z) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_res = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_t_3;
  double __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("replace", 0);

  /* "ezdxf/acc/vector.pyx":450
 *     def replace(self, x: float = None, y: float = None,
 *                 z: float = None) -> 'Vec3':
 *         cdef Vec3 res = Vec3()             # <<<<<<<<<<<<<<
 *         res.x = self.x if x is None else x
 *         res.y = self.y if y is None else y
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":451
 *                 z: float = None) -> 'Vec3':
 *         cdef Vec3 res = Vec3()
 *         res.x = self.x if x is None else x             # <<<<<<<<<<<<<<
 *         res.y = self.y if y is None else y
 *         res.z = self.z if z is None else z
 */
  __pyx_t_3 = (__pyx_v_x == Py_None);
  if ((__pyx_t_3 != 0)) {
    __pyx_t_2 = __pyx_v_self->x;
  } else {
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 451, __pyx_L1_error)
    __pyx_t_2 = __pyx_t_4;
  }
  __pyx_v_res->x = __pyx_t_2;

  /* "ezdxf/acc/vector.pyx":452
 *         cdef Vec3 res = Vec3()
 *         res.x = self.x if x is None else x
 *         res.y = self.y if y is None else y             # <<<<<<<<<<<<<<
 *         res.z = self.z if z is None else z
 *         return res
 */
  __pyx_t_3 = (__pyx_v_y == Py_None);
  if ((__pyx_t_3 != 0)) {
    __pyx_t_2 = __pyx_v_self->y;
  } else {
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_y); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 452, __pyx_L1_error)
    __pyx_t_2 = __pyx_t_4;
  }
  __pyx_v_res->y = __pyx_t_2;

  /* "ezdxf/acc/vector.pyx":453
 *         res.x = self.x if x is None else x
 *         res.y = self.y if y is None else y
 *         res.z = self.z if z is None else z             # <<<<<<<<<<<<<<
 *         return res
 * 
 */
  __pyx_t_3 = (__pyx_v_z == Py_None);
  if ((__pyx_t_3 != 0)) {
    __pyx_t_2 = __pyx_v_self->z;
  } else {
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_z); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 453, __pyx_L1_error)
    __pyx_t_2 = __pyx_t_4;
  }
  __pyx_v_res->z = __pyx_t_2;

  /* "ezdxf/acc/vector.pyx":454
 *         res.y = self.y if y is None else y
 *         res.z = self.z if z is None else z
 *         return res             # <<<<<<<<<<<<<<
 * 
 *     def round(self, ndigits: int = None) -> 'Vec3':
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":448
 *         return res
 * 
 *     def replace(self, x: float = None, y: float = None,             # <<<<<<<<<<<<<<
 *                 z: float = None) -> 'Vec3':
 *         cdef Vec3 res = Vec3()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.replace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":456
 *         return res
 * 
 *     def round(self, ndigits: int = None) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         return Vec3(
 *             round(self.x, ndigits),
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_7round(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_7round(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ndigits = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("round (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ndigits,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ndigits);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "round") < 0)) __PYX_ERR(0, 456, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ndigits = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("round", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 456, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.round", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_6round(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self), __pyx_v_ndigits);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_6round(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_ndigits) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("round", 0);

  /* "ezdxf/acc/vector.pyx":457
 * 
 *     def round(self, ndigits: int = None) -> 'Vec3':
 *         return Vec3(             # <<<<<<<<<<<<<<
 *             round(self.x, ndigits),
 *             round(self.y, ndigits),
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));

  /* "ezdxf/acc/vector.pyx":458
 *     def round(self, ndigits: int = None) -> 'Vec3':
 *         return Vec3(
 *             round(self.x, ndigits),             # <<<<<<<<<<<<<<
 *             round(self.y, ndigits),
 *             round(self.z, ndigits),
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_ndigits);
  __Pyx_GIVEREF(__pyx_v_ndigits);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_ndigits);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ezdxf/acc/vector.pyx":459
 *         return Vec3(
 *             round(self.x, ndigits),
 *             round(self.y, ndigits),             # <<<<<<<<<<<<<<
 *             round(self.z, ndigits),
 *         )
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->y); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_ndigits);
  __Pyx_GIVEREF(__pyx_v_ndigits);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_ndigits);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ezdxf/acc/vector.pyx":460
 *             round(self.x, ndigits),
 *             round(self.y, ndigits),
 *             round(self.z, ndigits),             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->z); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_INCREF(__pyx_v_ndigits);
  __Pyx_GIVEREF(__pyx_v_ndigits);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_ndigits);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ezdxf/acc/vector.pyx":457
 * 
 *     def round(self, ndigits: int = None) -> 'Vec3':
 *         return Vec3(             # <<<<<<<<<<<<<<
 *             round(self.x, ndigits),
 *             round(self.y, ndigits),
 */
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":456
 *         return res
 * 
 *     def round(self, ndigits: int = None) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         return Vec3(
 *             round(self.x, ndigits),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.round", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":464
 * 
 *     @staticmethod
 *     def list(items: Iterable['Vertex']) -> List['Vec3']:             # <<<<<<<<<<<<<<
 *         return list(Vec3.generate(items))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_9list(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5ezdxf_3acc_6vector_4Vec3_9list = {"list", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_9list, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_9list(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_items = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("list (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_items,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_items)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "list") < 0)) __PYX_ERR(0, 464, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_items = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("list", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 464, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_8list(__pyx_v_items);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_8list(PyObject *__pyx_v_items) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("list", 0);

  /* "ezdxf/acc/vector.pyx":465
 *     @staticmethod
 *     def list(items: Iterable['Vertex']) -> List['Vec3']:
 *         return list(Vec3.generate(items))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_n_s_generate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_items) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_items);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PySequence_List(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":464
 * 
 *     @staticmethod
 *     def list(items: Iterable['Vertex']) -> List['Vec3']:             # <<<<<<<<<<<<<<
 *         return list(Vec3.generate(items))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":468
 * 
 *     @staticmethod
 *     def tuple(items: Iterable['Vertex']) -> Sequence['Vec3']:             # <<<<<<<<<<<<<<
 *         return tuple(Vec3.generate(items))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_11tuple(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5ezdxf_3acc_6vector_4Vec3_11tuple = {"tuple", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_11tuple, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_11tuple(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_items = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tuple (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_items,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_items)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "tuple") < 0)) __PYX_ERR(0, 468, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_items = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("tuple", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 468, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.tuple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_10tuple(__pyx_v_items);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_10tuple(PyObject *__pyx_v_items) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("tuple", 0);

  /* "ezdxf/acc/vector.pyx":469
 *     @staticmethod
 *     def tuple(items: Iterable['Vertex']) -> Sequence['Vec3']:
 *         return tuple(Vec3.generate(items))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_n_s_generate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_items) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_items);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":468
 * 
 *     @staticmethod
 *     def tuple(items: Iterable['Vertex']) -> Sequence['Vec3']:             # <<<<<<<<<<<<<<
 *         return tuple(Vec3.generate(items))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.tuple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":472
 * 
 *     @staticmethod
 *     def generate(items: Iterable['Vertex']) -> Iterable['Vec3']:             # <<<<<<<<<<<<<<
 *         return (Vec3(item) for item in items)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_13generate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5ezdxf_3acc_6vector_4Vec3_13generate = {"generate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_13generate, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_13generate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_items = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("generate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_items,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_items)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "generate") < 0)) __PYX_ERR(0, 472, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_items = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("generate", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 472, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.generate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_12generate(__pyx_v_items);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5ezdxf_3acc_6vector_4Vec3_8generate_2generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ezdxf/acc/vector.pyx":473
 *     @staticmethod
 *     def generate(items: Iterable['Vertex']) -> Iterable['Vec3']:
 *         return (Vec3(item) for item in items)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_8generate_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr *)__pyx_tp_new_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr(__pyx_ptype_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 473, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5ezdxf_3acc_6vector_4Vec3_8generate_2generator3, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_generate_locals_genexpr, __pyx_n_s_ezdxf_acc_vector); if (unlikely(!gen)) __PYX_ERR(0, 473, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.generate.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5ezdxf_3acc_6vector_4Vec3_8generate_2generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 473, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_items)) { __Pyx_RaiseClosureNameError("items"); __PYX_ERR(0, 473, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_items)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_items)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_items; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_items); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 473, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 473, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 473, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 473, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 473, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 473, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_item);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_item, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_cur_scope->__pyx_v_item); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 473, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":472
 * 
 *     @staticmethod
 *     def generate(items: Iterable['Vertex']) -> Iterable['Vec3']:             # <<<<<<<<<<<<<<
 *         return (Vec3(item) for item in items)
 * 
 */

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_12generate(PyObject *__pyx_v_items) {
  struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("generate", 0);
  __pyx_cur_scope = (struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate *)__pyx_tp_new_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate(__pyx_ptype_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 472, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_items = __pyx_v_items;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_items);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_items);

  /* "ezdxf/acc/vector.pyx":473
 *     @staticmethod
 *     def generate(items: Iterable['Vertex']) -> Iterable['Vec3']:
 *         return (Vec3(item) for item in items)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_8generate_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":472
 * 
 *     @staticmethod
 *     def generate(items: Iterable['Vertex']) -> Iterable['Vec3']:             # <<<<<<<<<<<<<<
 *         return (Vec3(item) for item in items)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.generate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":476
 * 
 *     @staticmethod
 *     def from_angle(double angle, double length = 1.0) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         return v3_from_angle(angle, length)
 * 
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_15from_angle(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5ezdxf_3acc_6vector_4Vec3_15from_angle = {"from_angle", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_15from_angle, METH_VARARGS|METH_KEYWORDS, 0};
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_15from_angle(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_angle;
  double __pyx_v_length;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_angle (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_angle,&__pyx_n_s_length,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_angle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_length);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_angle") < 0)) __PYX_ERR(0, 476, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_angle = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_angle == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 476, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_length = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_length == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 476, __pyx_L3_error)
    } else {
      __pyx_v_length = ((double)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_angle", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 476, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.from_angle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_14from_angle(__pyx_v_angle, __pyx_v_length);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_14from_angle(double __pyx_v_angle, double __pyx_v_length) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_angle", 0);

  /* "ezdxf/acc/vector.pyx":477
 *     @staticmethod
 *     def from_angle(double angle, double length = 1.0) -> 'Vec3':
 *         return v3_from_angle(angle, length)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_from_angle(__pyx_v_angle, __pyx_v_length)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":476
 * 
 *     @staticmethod
 *     def from_angle(double angle, double length = 1.0) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         return v3_from_angle(angle, length)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.from_angle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":480
 * 
 *     @staticmethod
 *     def from_deg_angle(double angle, double length = 1.0) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         return v3_from_angle(angle * DEG2RAD, length)
 * 
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_17from_deg_angle(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5ezdxf_3acc_6vector_4Vec3_17from_deg_angle = {"from_deg_angle", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_17from_deg_angle, METH_VARARGS|METH_KEYWORDS, 0};
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_17from_deg_angle(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_angle;
  double __pyx_v_length;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_deg_angle (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_angle,&__pyx_n_s_length,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_angle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_length);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_deg_angle") < 0)) __PYX_ERR(0, 480, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_angle = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_angle == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 480, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_length = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_length == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 480, __pyx_L3_error)
    } else {
      __pyx_v_length = ((double)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_deg_angle", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 480, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.from_deg_angle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_16from_deg_angle(__pyx_v_angle, __pyx_v_length);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_16from_deg_angle(double __pyx_v_angle, double __pyx_v_length) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_deg_angle", 0);

  /* "ezdxf/acc/vector.pyx":481
 *     @staticmethod
 *     def from_deg_angle(double angle, double length = 1.0) -> 'Vec3':
 *         return v3_from_angle(angle * DEG2RAD, length)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_from_angle((__pyx_v_angle * __pyx_v_5ezdxf_3acc_6vector_DEG2RAD), __pyx_v_length)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":480
 * 
 *     @staticmethod
 *     def from_deg_angle(double angle, double length = 1.0) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         return v3_from_angle(angle * DEG2RAD, length)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.from_deg_angle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":484
 * 
 *     @staticmethod
 *     def random(double length = 1.0) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         cdef Vec3 res = Vec3()
 *         uniform = random.uniform
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_19random(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5ezdxf_3acc_6vector_4Vec3_19random = {"random", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_19random, METH_VARARGS|METH_KEYWORDS, 0};
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_19random(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_length;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("random (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_length,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_length);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "random") < 0)) __PYX_ERR(0, 484, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_length = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_length == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 484, __pyx_L3_error)
    } else {
      __pyx_v_length = ((double)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("random", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 484, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.random", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_18random(__pyx_v_length);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_18random(double __pyx_v_length) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_res = 0;
  PyObject *__pyx_v_uniform = NULL;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("random", 0);

  /* "ezdxf/acc/vector.pyx":485
 *     @staticmethod
 *     def random(double length = 1.0) -> 'Vec3':
 *         cdef Vec3 res = Vec3()             # <<<<<<<<<<<<<<
 *         uniform = random.uniform
 *         res.x = uniform(-1, 1)
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":486
 *     def random(double length = 1.0) -> 'Vec3':
 *         cdef Vec3 res = Vec3()
 *         uniform = random.uniform             # <<<<<<<<<<<<<<
 *         res.x = uniform(-1, 1)
 *         res.y = uniform(-1, 1)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_random); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_uniform); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_uniform = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "ezdxf/acc/vector.pyx":487
 *         cdef Vec3 res = Vec3()
 *         uniform = random.uniform
 *         res.x = uniform(-1, 1)             # <<<<<<<<<<<<<<
 *         res.y = uniform(-1, 1)
 *         res.z = uniform(-1, 1)
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_v_uniform, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_res->x = __pyx_t_3;

  /* "ezdxf/acc/vector.pyx":488
 *         uniform = random.uniform
 *         res.x = uniform(-1, 1)
 *         res.y = uniform(-1, 1)             # <<<<<<<<<<<<<<
 *         res.z = uniform(-1, 1)
 *         return v3_normalize(res, length)
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_v_uniform, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_res->y = __pyx_t_3;

  /* "ezdxf/acc/vector.pyx":489
 *         res.x = uniform(-1, 1)
 *         res.y = uniform(-1, 1)
 *         res.z = uniform(-1, 1)             # <<<<<<<<<<<<<<
 *         return v3_normalize(res, length)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_v_uniform, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_res->z = __pyx_t_3;

  /* "ezdxf/acc/vector.pyx":490
 *         res.y = uniform(-1, 1)
 *         res.z = uniform(-1, 1)
 *         return v3_normalize(res, length)             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self) -> str:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_2 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_normalize(__pyx_v_res, __pyx_v_length)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":484
 * 
 *     @staticmethod
 *     def random(double length = 1.0) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         cdef Vec3 res = Vec3()
 *         uniform = random.uniform
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.random", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XDECREF(__pyx_v_uniform);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":492
 *         return v3_normalize(res, length)
 * 
 *     def __str__(self) -> str:             # <<<<<<<<<<<<<<
 *         return f'({self.x}, {self.y}, {self.z})'
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_21__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_21__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_20__str__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_20__str__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "ezdxf/acc/vector.pyx":493
 * 
 *     def __str__(self) -> str:
 *         return f'({self.x}, {self.y}, {self.z})'             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self)-> str:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u__2);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u__2);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__3);
  __pyx_t_2 += 2;
  __Pyx_GIVEREF(__pyx_kp_u__3);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__3);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->y); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__3);
  __pyx_t_2 += 2;
  __Pyx_GIVEREF(__pyx_kp_u__3);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->z); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__4);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__4);
  PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u__4);
  __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 7, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":492
 *         return v3_normalize(res, length)
 * 
 *     def __str__(self) -> str:             # <<<<<<<<<<<<<<
 *         return f'({self.x}, {self.y}, {self.z})'
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":495
 *         return f'({self.x}, {self.y}, {self.z})'
 * 
 *     def __repr__(self)-> str:             # <<<<<<<<<<<<<<
 *         return "Vec3" + self.__str__()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_23__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_23__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_22__repr__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_22__repr__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "ezdxf/acc/vector.pyx":496
 * 
 *     def __repr__(self)-> str:
 *         return "Vec3" + self.__str__()             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self) -> int:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_str); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_n_u_Vec3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":495
 *         return f'({self.x}, {self.y}, {self.z})'
 * 
 *     def __repr__(self)-> str:             # <<<<<<<<<<<<<<
 *         return "Vec3" + self.__str__()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":498
 *         return "Vec3" + self.__str__()
 * 
 *     def __len__(self) -> int:             # <<<<<<<<<<<<<<
 *         return 3
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_5ezdxf_3acc_6vector_4Vec3_25__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_5ezdxf_3acc_6vector_4Vec3_25__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_24__len__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_5ezdxf_3acc_6vector_4Vec3_24__len__(CYTHON_UNUSED struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "ezdxf/acc/vector.pyx":499
 * 
 *     def __len__(self) -> int:
 *         return 3             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(self) -> int:
 */
  __pyx_r = 3;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":498
 *         return "Vec3" + self.__str__()
 * 
 *     def __len__(self) -> int:             # <<<<<<<<<<<<<<
 *         return 3
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":501
 *         return 3
 * 
 *     def __hash__(self) -> int:             # <<<<<<<<<<<<<<
 *         return hash(self.xyz)
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_5ezdxf_3acc_6vector_4Vec3_27__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_5ezdxf_3acc_6vector_4Vec3_27__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_26__hash__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_5ezdxf_3acc_6vector_4Vec3_26__hash__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_hash_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "ezdxf/acc/vector.pyx":502
 * 
 *     def __hash__(self) -> int:
 *         return hash(self.xyz)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self) -> 'Vec3':
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_xyz); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Hash(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_hash_t)-1))) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":501
 *         return 3
 * 
 *     def __hash__(self) -> int:             # <<<<<<<<<<<<<<
 *         return hash(self.xyz)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":504
 *         return hash(self.xyz)
 * 
 *     def copy(self) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         return self  # immutable
 * 
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_29copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_29copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_28copy(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_28copy(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy", 0);

  /* "ezdxf/acc/vector.pyx":505
 * 
 *     def copy(self) -> 'Vec3':
 *         return self  # immutable             # <<<<<<<<<<<<<<
 * 
 *     __copy__ = copy
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":504
 *         return hash(self.xyz)
 * 
 *     def copy(self) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         return self  # immutable
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":509
 *     __copy__ = copy
 * 
 *     def __deepcopy__(self, memodict: dict) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         return self  # immutable!
 * 
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_31__deepcopy__(PyObject *__pyx_v_self, PyObject *__pyx_v_memodict); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_31__deepcopy__(PyObject *__pyx_v_self, PyObject *__pyx_v_memodict) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__deepcopy__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_memodict), (&PyDict_Type), 1, "memodict", 1))) __PYX_ERR(0, 509, __pyx_L1_error)
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_30__deepcopy__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self), ((PyObject*)__pyx_v_memodict));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_30__deepcopy__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_memodict) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__deepcopy__", 0);

  /* "ezdxf/acc/vector.pyx":510
 * 
 *     def __deepcopy__(self, memodict: dict) -> 'Vec3':
 *         return self  # immutable!             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, int index) -> float:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":509
 *     __copy__ = copy
 * 
 *     def __deepcopy__(self, memodict: dict) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         return self  # immutable!
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":512
 *         return self  # immutable!
 * 
 *     def __getitem__(self, int index) -> float:             # <<<<<<<<<<<<<<
 *         if index == 0:
 *             return self.x
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_33__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_index); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_33__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_index) {
  int __pyx_v_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 512, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_32__getitem__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self), ((int)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_32__getitem__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "ezdxf/acc/vector.pyx":513
 * 
 *     def __getitem__(self, int index) -> float:
 *         if index == 0:             # <<<<<<<<<<<<<<
 *             return self.x
 *         elif index == 1:
 */
  switch (__pyx_v_index) {
    case 0:

    /* "ezdxf/acc/vector.pyx":514
 *     def __getitem__(self, int index) -> float:
 *         if index == 0:
 *             return self.x             # <<<<<<<<<<<<<<
 *         elif index == 1:
 *             return self.y
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "ezdxf/acc/vector.pyx":513
 * 
 *     def __getitem__(self, int index) -> float:
 *         if index == 0:             # <<<<<<<<<<<<<<
 *             return self.x
 *         elif index == 1:
 */
    break;
    case 1:

    /* "ezdxf/acc/vector.pyx":516
 *             return self.x
 *         elif index == 1:
 *             return self.y             # <<<<<<<<<<<<<<
 *         elif index == 2:
 *             return self.z
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "ezdxf/acc/vector.pyx":515
 *         if index == 0:
 *             return self.x
 *         elif index == 1:             # <<<<<<<<<<<<<<
 *             return self.y
 *         elif index == 2:
 */
    break;
    case 2:

    /* "ezdxf/acc/vector.pyx":518
 *             return self.y
 *         elif index == 2:
 *             return self.z             # <<<<<<<<<<<<<<
 *         else:
 *             raise IndexError(f'invalid index {index}')
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->z); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "ezdxf/acc/vector.pyx":517
 *         elif index == 1:
 *             return self.y
 *         elif index == 2:             # <<<<<<<<<<<<<<
 *             return self.z
 *         else:
 */
    break;
    default:

    /* "ezdxf/acc/vector.pyx":520
 *             return self.z
 *         else:
 *             raise IndexError(f'invalid index {index}')             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self) -> Iterable[float]:
 */
    __pyx_t_1 = __Pyx_PyUnicode_From_int(__pyx_v_index, 0, ' ', 'd'); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_u_invalid_index, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 520, __pyx_L1_error)
    break;
  }

  /* "ezdxf/acc/vector.pyx":512
 *         return self  # immutable!
 * 
 *     def __getitem__(self, int index) -> float:             # <<<<<<<<<<<<<<
 *         if index == 0:
 *             return self.x
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5ezdxf_3acc_6vector_4Vec3_36generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ezdxf/acc/vector.pyx":522
 *             raise IndexError(f'invalid index {index}')
 * 
 *     def __iter__(self) -> Iterable[float]:             # <<<<<<<<<<<<<<
 *         yield self.x
 *         yield self.y
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_35__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_35__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_34__iter__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_34__iter__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self) {
  struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__ *)__pyx_tp_new_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__(__pyx_ptype_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 522, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5ezdxf_3acc_6vector_4Vec3_36generator1, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter, __pyx_n_s_Vec3___iter, __pyx_n_s_ezdxf_acc_vector); if (unlikely(!gen)) __PYX_ERR(0, 522, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5ezdxf_3acc_6vector_4Vec3_36generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__ *__pyx_cur_scope = ((struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_yield;
    case 2: goto __pyx_L5_resume_from_yield;
    case 3: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 522, __pyx_L1_error)

  /* "ezdxf/acc/vector.pyx":523
 * 
 *     def __iter__(self) -> Iterable[float]:
 *         yield self.x             # <<<<<<<<<<<<<<
 *         yield self.y
 *         yield self.z
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 1;
  return __pyx_r;
  __pyx_L4_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 523, __pyx_L1_error)

  /* "ezdxf/acc/vector.pyx":524
 *     def __iter__(self) -> Iterable[float]:
 *         yield self.x
 *         yield self.y             # <<<<<<<<<<<<<<
 *         yield self.z
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 2;
  return __pyx_r;
  __pyx_L5_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 524, __pyx_L1_error)

  /* "ezdxf/acc/vector.pyx":525
 *         yield self.x
 *         yield self.y
 *         yield self.z             # <<<<<<<<<<<<<<
 * 
 *     def __abs__(self) -> float:
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->z); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 3;
  return __pyx_r;
  __pyx_L6_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 525, __pyx_L1_error)
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "ezdxf/acc/vector.pyx":522
 *             raise IndexError(f'invalid index {index}')
 * 
 *     def __iter__(self) -> Iterable[float]:             # <<<<<<<<<<<<<<
 *         yield self.x
 *         yield self.y
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":527
 *         yield self.z
 * 
 *     def __abs__(self) -> float:             # <<<<<<<<<<<<<<
 *         return v3_magnitude(self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_38__abs__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_38__abs__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__abs__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_37__abs__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_37__abs__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__abs__", 0);

  /* "ezdxf/acc/vector.pyx":528
 * 
 *     def __abs__(self) -> float:
 *         return v3_magnitude(self)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_5ezdxf_3acc_6vector_v3_magnitude(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":527
 *         yield self.z
 * 
 *     def __abs__(self) -> float:             # <<<<<<<<<<<<<<
 *         return v3_magnitude(self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.__abs__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":531
 * 
 *     @property
 *     def magnitude(self) -> float:             # <<<<<<<<<<<<<<
 *         return v3_magnitude(self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_9magnitude_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_9magnitude_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_9magnitude___get__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_9magnitude___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "ezdxf/acc/vector.pyx":532
 *     @property
 *     def magnitude(self) -> float:
 *         return v3_magnitude(self)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_5ezdxf_3acc_6vector_v3_magnitude(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":531
 * 
 *     @property
 *     def magnitude(self) -> float:             # <<<<<<<<<<<<<<
 *         return v3_magnitude(self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.magnitude.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":535
 * 
 *     @property
 *     def magnitude_xy(self) -> float:             # <<<<<<<<<<<<<<
 *         return hypot(self.x, self.y)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_12magnitude_xy_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_12magnitude_xy_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_12magnitude_xy___get__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_12magnitude_xy___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "ezdxf/acc/vector.pyx":536
 *     @property
 *     def magnitude_xy(self) -> float:
 *         return hypot(self.x, self.y)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(hypot(__pyx_v_self->x, __pyx_v_self->y)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":535
 * 
 *     @property
 *     def magnitude_xy(self) -> float:             # <<<<<<<<<<<<<<
 *         return hypot(self.x, self.y)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.magnitude_xy.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":539
 * 
 *     @property
 *     def magnitude_square(self) -> float:             # <<<<<<<<<<<<<<
 *         return v3_magnitude_sqr(self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_16magnitude_square_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_16magnitude_square_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_16magnitude_square___get__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_16magnitude_square___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "ezdxf/acc/vector.pyx":540
 *     @property
 *     def magnitude_square(self) -> float:
 *         return v3_magnitude_sqr(self)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_5ezdxf_3acc_6vector_v3_magnitude_sqr(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":539
 * 
 *     @property
 *     def magnitude_square(self) -> float:             # <<<<<<<<<<<<<<
 *         return v3_magnitude_sqr(self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.magnitude_square.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":543
 * 
 *     @property
 *     def is_null(self) -> bool:             # <<<<<<<<<<<<<<
 *         return fabs(self.x) <= ABS_TOL and fabs(self.y) <= ABS_TOL and \
 *                fabs(self.z) <= ABS_TOL
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_7is_null_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_7is_null_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_7is_null___get__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_7is_null___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "ezdxf/acc/vector.pyx":544
 *     @property
 *     def is_null(self) -> bool:
 *         return fabs(self.x) <= ABS_TOL and fabs(self.y) <= ABS_TOL and \             # <<<<<<<<<<<<<<
 *                fabs(self.z) <= ABS_TOL
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = (fabs(__pyx_v_self->x) <= 1e-12);
  if (__pyx_t_2) {
  } else {
    __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = (fabs(__pyx_v_self->y) <= 1e-12);
  if (__pyx_t_2) {
  } else {
    __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L3_bool_binop_done;
  }

  /* "ezdxf/acc/vector.pyx":545
 *     def is_null(self) -> bool:
 *         return fabs(self.x) <= ABS_TOL and fabs(self.y) <= ABS_TOL and \
 *                fabs(self.z) <= ABS_TOL             # <<<<<<<<<<<<<<
 * 
 *     def is_parallel(self, other: 'Vertex', *, double rel_tol=REL_TOL,
 */
  __pyx_t_2 = (fabs(__pyx_v_self->z) <= 1e-12);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":543
 * 
 *     @property
 *     def is_null(self) -> bool:             # <<<<<<<<<<<<<<
 *         return fabs(self.x) <= ABS_TOL and fabs(self.y) <= ABS_TOL and \
 *                fabs(self.z) <= ABS_TOL
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.is_null.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":547
 *                fabs(self.z) <= ABS_TOL
 * 
 *     def is_parallel(self, other: 'Vertex', *, double rel_tol=REL_TOL,             # <<<<<<<<<<<<<<
 *                     double abs_tol = ABS_TOL) -> bool:
 *         cdef Vec3 o = Vec3(other)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_40is_parallel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_40is_parallel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_other = 0;
  double __pyx_v_rel_tol;
  double __pyx_v_abs_tol;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_parallel (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other,&__pyx_n_s_rel_tol,&__pyx_n_s_abs_tol,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_other)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 1; index < 3 && kw_args > 0; index++) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, *__pyx_pyargnames[index]);
          if (value) { values[index] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_parallel") < 0)) __PYX_ERR(0, 547, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_other = values[0];
    if (values[1]) {
      __pyx_v_rel_tol = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_rel_tol == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 547, __pyx_L3_error)
    } else {
      __pyx_v_rel_tol = ((double)1e-09);
    }
    if (values[2]) {
      __pyx_v_abs_tol = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_abs_tol == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 548, __pyx_L3_error)
    } else {
      __pyx_v_abs_tol = ((double)1e-12);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_parallel", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 547, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.is_parallel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_39is_parallel(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self), __pyx_v_other, __pyx_v_rel_tol, __pyx_v_abs_tol);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_39is_parallel(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_other, double __pyx_v_rel_tol, double __pyx_v_abs_tol) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_o = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_v1 = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_v2 = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_neg_v2 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_parallel", 0);

  /* "ezdxf/acc/vector.pyx":549
 *     def is_parallel(self, other: 'Vertex', *, double rel_tol=REL_TOL,
 *                     double abs_tol = ABS_TOL) -> bool:
 *         cdef Vec3 o = Vec3(other)             # <<<<<<<<<<<<<<
 *         cdef Vec3 v1 = v3_normalize(self, 1.0)
 *         cdef Vec3 v2 = v3_normalize(o, 1.0)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_v_other); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":550
 *                     double abs_tol = ABS_TOL) -> bool:
 *         cdef Vec3 o = Vec3(other)
 *         cdef Vec3 v1 = v3_normalize(self, 1.0)             # <<<<<<<<<<<<<<
 *         cdef Vec3 v2 = v3_normalize(o, 1.0)
 *         cdef Vec3 neg_v2 = v3_reverse(v2)
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_normalize(__pyx_v_self, 1.0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_v1 = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":551
 *         cdef Vec3 o = Vec3(other)
 *         cdef Vec3 v1 = v3_normalize(self, 1.0)
 *         cdef Vec3 v2 = v3_normalize(o, 1.0)             # <<<<<<<<<<<<<<
 *         cdef Vec3 neg_v2 = v3_reverse(v2)
 *         return v3_isclose(v1, v2, rel_tol, abs_tol) or \
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_normalize(__pyx_v_o, 1.0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_v2 = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":552
 *         cdef Vec3 v1 = v3_normalize(self, 1.0)
 *         cdef Vec3 v2 = v3_normalize(o, 1.0)
 *         cdef Vec3 neg_v2 = v3_reverse(v2)             # <<<<<<<<<<<<<<
 *         return v3_isclose(v1, v2, rel_tol, abs_tol) or \
 *                v3_isclose(v1, neg_v2, rel_tol, abs_tol)
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_reverse(__pyx_v_v2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_neg_v2 = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":553
 *         cdef Vec3 v2 = v3_normalize(o, 1.0)
 *         cdef Vec3 neg_v2 = v3_reverse(v2)
 *         return v3_isclose(v1, v2, rel_tol, abs_tol) or \             # <<<<<<<<<<<<<<
 *                v3_isclose(v1, neg_v2, rel_tol, abs_tol)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_5ezdxf_3acc_6vector_v3_isclose(__pyx_v_v1, __pyx_v_v2, __pyx_v_rel_tol, __pyx_v_abs_tol);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L3_bool_binop_done;
  }

  /* "ezdxf/acc/vector.pyx":554
 *         cdef Vec3 neg_v2 = v3_reverse(v2)
 *         return v3_isclose(v1, v2, rel_tol, abs_tol) or \
 *                v3_isclose(v1, neg_v2, rel_tol, abs_tol)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_2 = __pyx_f_5ezdxf_3acc_6vector_v3_isclose(__pyx_v_v1, __pyx_v_neg_v2, __pyx_v_rel_tol, __pyx_v_abs_tol);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":547
 *                fabs(self.z) <= ABS_TOL
 * 
 *     def is_parallel(self, other: 'Vertex', *, double rel_tol=REL_TOL,             # <<<<<<<<<<<<<<
 *                     double abs_tol = ABS_TOL) -> bool:
 *         cdef Vec3 o = Vec3(other)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.is_parallel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_o);
  __Pyx_XDECREF((PyObject *)__pyx_v_v1);
  __Pyx_XDECREF((PyObject *)__pyx_v_v2);
  __Pyx_XDECREF((PyObject *)__pyx_v_neg_v2);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":557
 * 
 *     @property
 *     def spatial_angle(self) -> float:             # <<<<<<<<<<<<<<
 *         return acos(v3_dot(<Vec3> X_AXIS, v3_normalize(self, 1.0)))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_13spatial_angle_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_13spatial_angle_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_13spatial_angle___get__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_13spatial_angle___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "ezdxf/acc/vector.pyx":558
 *     @property
 *     def spatial_angle(self) -> float:
 *         return acos(v3_dot(<Vec3> X_AXIS, v3_normalize(self, 1.0)))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_X_AXIS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_normalize(__pyx_v_self, 1.0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(acos(__pyx_f_5ezdxf_3acc_6vector_v3_dot(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1), ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_2)))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":557
 * 
 *     @property
 *     def spatial_angle(self) -> float:             # <<<<<<<<<<<<<<
 *         return acos(v3_dot(<Vec3> X_AXIS, v3_normalize(self, 1.0)))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.spatial_angle.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":561
 * 
 *     @property
 *     def spatial_angle_deg(self) -> float:             # <<<<<<<<<<<<<<
 *         return self.spatial_angle * RAD2DEG
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_17spatial_angle_deg_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_17spatial_angle_deg_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_17spatial_angle_deg___get__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_17spatial_angle_deg___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "ezdxf/acc/vector.pyx":562
 *     @property
 *     def spatial_angle_deg(self) -> float:
 *         return self.spatial_angle * RAD2DEG             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_spatial_angle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_5ezdxf_3acc_6vector_RAD2DEG); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":561
 * 
 *     @property
 *     def spatial_angle_deg(self) -> float:             # <<<<<<<<<<<<<<
 *         return self.spatial_angle * RAD2DEG
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.spatial_angle_deg.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":565
 * 
 *     @property
 *     def angle(self) -> float:             # <<<<<<<<<<<<<<
 *         return atan2(self.y, self.x)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_5angle_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_5angle_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_5angle___get__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_5angle___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "ezdxf/acc/vector.pyx":566
 *     @property
 *     def angle(self) -> float:
 *         return atan2(self.y, self.x)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(atan2(__pyx_v_self->y, __pyx_v_self->x)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":565
 * 
 *     @property
 *     def angle(self) -> float:             # <<<<<<<<<<<<<<
 *         return atan2(self.y, self.x)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.angle.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":569
 * 
 *     @property
 *     def angle_deg(self) -> float:             # <<<<<<<<<<<<<<
 *         return atan2(self.y, self.x) * RAD2DEG
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_9angle_deg_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_9angle_deg_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_9angle_deg___get__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_9angle_deg___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "ezdxf/acc/vector.pyx":570
 *     @property
 *     def angle_deg(self) -> float:
 *         return atan2(self.y, self.x) * RAD2DEG             # <<<<<<<<<<<<<<
 * 
 *     def orthogonal(self, ccw: bool = True) -> 'Vec3':
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((atan2(__pyx_v_self->y, __pyx_v_self->x) * __pyx_v_5ezdxf_3acc_6vector_RAD2DEG)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":569
 * 
 *     @property
 *     def angle_deg(self) -> float:             # <<<<<<<<<<<<<<
 *         return atan2(self.y, self.x) * RAD2DEG
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.angle_deg.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":572
 *         return atan2(self.y, self.x) * RAD2DEG
 * 
 *     def orthogonal(self, ccw: bool = True) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         return v3_ortho(self, ccw)
 * 
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_42orthogonal(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_42orthogonal(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ccw = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("orthogonal (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ccw,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ccw);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "orthogonal") < 0)) __PYX_ERR(0, 572, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ccw = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("orthogonal", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 572, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.orthogonal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_41orthogonal(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self), __pyx_v_ccw);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_41orthogonal(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_ccw) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("orthogonal", 0);

  /* "ezdxf/acc/vector.pyx":573
 * 
 *     def orthogonal(self, ccw: bool = True) -> 'Vec3':
 *         return v3_ortho(self, ccw)             # <<<<<<<<<<<<<<
 * 
 *     def lerp(self, other: 'Vertex', double factor=0.5) -> 'Vec3':
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_ccw); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 573, __pyx_L1_error)
  __pyx_t_2 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_ortho(__pyx_v_self, __pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":572
 *         return atan2(self.y, self.x) * RAD2DEG
 * 
 *     def orthogonal(self, ccw: bool = True) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         return v3_ortho(self, ccw)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.orthogonal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":575
 *         return v3_ortho(self, ccw)
 * 
 *     def lerp(self, other: 'Vertex', double factor=0.5) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         if not isinstance(other, Vec3):
 *             other = Vec3(other)
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_44lerp(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_44lerp(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_other = 0;
  double __pyx_v_factor;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lerp (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other,&__pyx_n_s_factor,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_other)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_factor);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "lerp") < 0)) __PYX_ERR(0, 575, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_other = values[0];
    if (values[1]) {
      __pyx_v_factor = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_factor == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 575, __pyx_L3_error)
    } else {
      __pyx_v_factor = ((double)0.5);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lerp", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 575, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.lerp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_43lerp(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self), __pyx_v_other, __pyx_v_factor);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_43lerp(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_other, double __pyx_v_factor) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lerp", 0);
  __Pyx_INCREF(__pyx_v_other);

  /* "ezdxf/acc/vector.pyx":576
 * 
 *     def lerp(self, other: 'Vertex', double factor=0.5) -> 'Vec3':
 *         if not isinstance(other, Vec3):             # <<<<<<<<<<<<<<
 *             other = Vec3(other)
 *         return v3_lerp(self, <Vec3> other, factor)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_5ezdxf_3acc_6vector_Vec3); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "ezdxf/acc/vector.pyx":577
 *     def lerp(self, other: 'Vertex', double factor=0.5) -> 'Vec3':
 *         if not isinstance(other, Vec3):
 *             other = Vec3(other)             # <<<<<<<<<<<<<<
 *         return v3_lerp(self, <Vec3> other, factor)
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_other, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "ezdxf/acc/vector.pyx":576
 * 
 *     def lerp(self, other: 'Vertex', double factor=0.5) -> 'Vec3':
 *         if not isinstance(other, Vec3):             # <<<<<<<<<<<<<<
 *             other = Vec3(other)
 *         return v3_lerp(self, <Vec3> other, factor)
 */
  }

  /* "ezdxf/acc/vector.pyx":578
 *         if not isinstance(other, Vec3):
 *             other = Vec3(other)
 *         return v3_lerp(self, <Vec3> other, factor)             # <<<<<<<<<<<<<<
 * 
 *     def project(self, other: 'Vertex') -> 'Vec3':
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_3 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_lerp(__pyx_v_self, ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_other), __pyx_v_factor)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":575
 *         return v3_ortho(self, ccw)
 * 
 *     def lerp(self, other: 'Vertex', double factor=0.5) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         if not isinstance(other, Vec3):
 *             other = Vec3(other)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.lerp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_other);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":580
 *         return v3_lerp(self, <Vec3> other, factor)
 * 
 *     def project(self, other: 'Vertex') -> 'Vec3':             # <<<<<<<<<<<<<<
 *         if not isinstance(other, Vec3):
 *             other = Vec3(other)
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_46project(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_46project(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("project (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_45project(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_45project(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("project", 0);
  __Pyx_INCREF(__pyx_v_other);

  /* "ezdxf/acc/vector.pyx":581
 * 
 *     def project(self, other: 'Vertex') -> 'Vec3':
 *         if not isinstance(other, Vec3):             # <<<<<<<<<<<<<<
 *             other = Vec3(other)
 *         return v3_project(self, <Vec3> other)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_5ezdxf_3acc_6vector_Vec3); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "ezdxf/acc/vector.pyx":582
 *     def project(self, other: 'Vertex') -> 'Vec3':
 *         if not isinstance(other, Vec3):
 *             other = Vec3(other)             # <<<<<<<<<<<<<<
 *         return v3_project(self, <Vec3> other)
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_other, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "ezdxf/acc/vector.pyx":581
 * 
 *     def project(self, other: 'Vertex') -> 'Vec3':
 *         if not isinstance(other, Vec3):             # <<<<<<<<<<<<<<
 *             other = Vec3(other)
 *         return v3_project(self, <Vec3> other)
 */
  }

  /* "ezdxf/acc/vector.pyx":583
 *         if not isinstance(other, Vec3):
 *             other = Vec3(other)
 *         return v3_project(self, <Vec3> other)             # <<<<<<<<<<<<<<
 * 
 *     def normalize(self, double length = 1.) -> 'Vec3':
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_3 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_project(__pyx_v_self, ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_other))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":580
 *         return v3_lerp(self, <Vec3> other, factor)
 * 
 *     def project(self, other: 'Vertex') -> 'Vec3':             # <<<<<<<<<<<<<<
 *         if not isinstance(other, Vec3):
 *             other = Vec3(other)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_other);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":585
 *         return v3_project(self, <Vec3> other)
 * 
 *     def normalize(self, double length = 1.) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         return v3_normalize(self, length)
 * 
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_48normalize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_48normalize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_length;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_length,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_length);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "normalize") < 0)) __PYX_ERR(0, 585, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_length = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_length == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 585, __pyx_L3_error)
    } else {
      __pyx_v_length = ((double)1.);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("normalize", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 585, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.normalize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_47normalize(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self), __pyx_v_length);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_47normalize(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, double __pyx_v_length) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("normalize", 0);

  /* "ezdxf/acc/vector.pyx":586
 * 
 *     def normalize(self, double length = 1.) -> 'Vec3':
 *         return v3_normalize(self, length)             # <<<<<<<<<<<<<<
 * 
 *     def reversed(self) -> 'Vec3':
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_normalize(__pyx_v_self, __pyx_v_length)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":585
 *         return v3_project(self, <Vec3> other)
 * 
 *     def normalize(self, double length = 1.) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         return v3_normalize(self, length)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.normalize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":588
 *         return v3_normalize(self, length)
 * 
 *     def reversed(self) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         return v3_reverse(self)
 * 
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_50reversed(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_50reversed(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reversed (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_49reversed(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_49reversed(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reversed", 0);

  /* "ezdxf/acc/vector.pyx":589
 * 
 *     def reversed(self) -> 'Vec3':
 *         return v3_reverse(self)             # <<<<<<<<<<<<<<
 * 
 *     def __neg__(self) -> 'Vec3':
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_reverse(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":588
 *         return v3_normalize(self, length)
 * 
 *     def reversed(self) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         return v3_reverse(self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.reversed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":591
 *         return v3_reverse(self)
 * 
 *     def __neg__(self) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         return v3_reverse(self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_52__neg__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_52__neg__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__neg__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_51__neg__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_51__neg__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__neg__", 0);

  /* "ezdxf/acc/vector.pyx":592
 * 
 *     def __neg__(self) -> 'Vec3':
 *         return v3_reverse(self)             # <<<<<<<<<<<<<<
 * 
 *     def __bool__(self) -> bool:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_reverse(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":591
 *         return v3_reverse(self)
 * 
 *     def __neg__(self) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         return v3_reverse(self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.__neg__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":594
 *         return v3_reverse(self)
 * 
 *     def __bool__(self) -> bool:             # <<<<<<<<<<<<<<
 *         return not self.is_null
 * 
 */

/* Python wrapper */
static int __pyx_pw_5ezdxf_3acc_6vector_4Vec3_54__bool__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5ezdxf_3acc_6vector_4Vec3_54__bool__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__bool__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_53__bool__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5ezdxf_3acc_6vector_4Vec3_53__bool__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__bool__", 0);

  /* "ezdxf/acc/vector.pyx":595
 * 
 *     def __bool__(self) -> bool:
 *         return not self.is_null             # <<<<<<<<<<<<<<
 * 
 *     def isclose(self, other: 'Vertex', *, double rel_tol = REL_TOL,
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_null); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = (!__pyx_t_2);
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":594
 *         return v3_reverse(self)
 * 
 *     def __bool__(self) -> bool:             # <<<<<<<<<<<<<<
 *         return not self.is_null
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.__bool__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":597
 *         return not self.is_null
 * 
 *     def isclose(self, other: 'Vertex', *, double rel_tol = REL_TOL,             # <<<<<<<<<<<<<<
 *                 double abs_tol = ABS_TOL) -> bool:
 *         if not isinstance(other, Vec3):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_56isclose(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_56isclose(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_other = 0;
  double __pyx_v_rel_tol;
  double __pyx_v_abs_tol;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isclose (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other,&__pyx_n_s_rel_tol,&__pyx_n_s_abs_tol,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_other)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 1; index < 3 && kw_args > 0; index++) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, *__pyx_pyargnames[index]);
          if (value) { values[index] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "isclose") < 0)) __PYX_ERR(0, 597, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_other = values[0];
    if (values[1]) {
      __pyx_v_rel_tol = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_rel_tol == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 597, __pyx_L3_error)
    } else {
      __pyx_v_rel_tol = ((double)1e-09);
    }
    if (values[2]) {
      __pyx_v_abs_tol = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_abs_tol == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 598, __pyx_L3_error)
    } else {
      __pyx_v_abs_tol = ((double)1e-12);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isclose", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 597, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.isclose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_55isclose(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self), __pyx_v_other, __pyx_v_rel_tol, __pyx_v_abs_tol);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_55isclose(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_other, double __pyx_v_rel_tol, double __pyx_v_abs_tol) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isclose", 0);
  __Pyx_INCREF(__pyx_v_other);

  /* "ezdxf/acc/vector.pyx":599
 *     def isclose(self, other: 'Vertex', *, double rel_tol = REL_TOL,
 *                 double abs_tol = ABS_TOL) -> bool:
 *         if not isinstance(other, Vec3):             # <<<<<<<<<<<<<<
 *             other = Vec3(other)
 *         return v3_isclose(self, <Vec3> other, rel_tol, abs_tol)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_5ezdxf_3acc_6vector_Vec3); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "ezdxf/acc/vector.pyx":600
 *                 double abs_tol = ABS_TOL) -> bool:
 *         if not isinstance(other, Vec3):
 *             other = Vec3(other)             # <<<<<<<<<<<<<<
 *         return v3_isclose(self, <Vec3> other, rel_tol, abs_tol)
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 600, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_other, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "ezdxf/acc/vector.pyx":599
 *     def isclose(self, other: 'Vertex', *, double rel_tol = REL_TOL,
 *                 double abs_tol = ABS_TOL) -> bool:
 *         if not isinstance(other, Vec3):             # <<<<<<<<<<<<<<
 *             other = Vec3(other)
 *         return v3_isclose(self, <Vec3> other, rel_tol, abs_tol)
 */
  }

  /* "ezdxf/acc/vector.pyx":601
 *         if not isinstance(other, Vec3):
 *             other = Vec3(other)
 *         return v3_isclose(self, <Vec3> other, rel_tol, abs_tol)             # <<<<<<<<<<<<<<
 * 
 *     def __eq__(self, other: 'Vertex') -> bool:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_f_5ezdxf_3acc_6vector_v3_isclose(__pyx_v_self, ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_other), __pyx_v_rel_tol, __pyx_v_abs_tol)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":597
 *         return not self.is_null
 * 
 *     def isclose(self, other: 'Vertex', *, double rel_tol = REL_TOL,             # <<<<<<<<<<<<<<
 *                 double abs_tol = ABS_TOL) -> bool:
 *         if not isinstance(other, Vec3):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.isclose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_other);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":603
 *         return v3_isclose(self, <Vec3> other, rel_tol, abs_tol)
 * 
 *     def __eq__(self, other: 'Vertex') -> bool:             # <<<<<<<<<<<<<<
 *         if not isinstance(other, Vec3):
 *             other = Vec3(other)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_58__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_58__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_57__eq__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_57__eq__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__eq__", 0);
  __Pyx_INCREF(__pyx_v_other);

  /* "ezdxf/acc/vector.pyx":604
 * 
 *     def __eq__(self, other: 'Vertex') -> bool:
 *         if not isinstance(other, Vec3):             # <<<<<<<<<<<<<<
 *             other = Vec3(other)
 *         return self.x == other.x and self.y == other.y and self.z == other.z
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_5ezdxf_3acc_6vector_Vec3); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "ezdxf/acc/vector.pyx":605
 *     def __eq__(self, other: 'Vertex') -> bool:
 *         if not isinstance(other, Vec3):
 *             other = Vec3(other)             # <<<<<<<<<<<<<<
 *         return self.x == other.x and self.y == other.y and self.z == other.z
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_other, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "ezdxf/acc/vector.pyx":604
 * 
 *     def __eq__(self, other: 'Vertex') -> bool:
 *         if not isinstance(other, Vec3):             # <<<<<<<<<<<<<<
 *             other = Vec3(other)
 *         return self.x == other.x and self.y == other.y and self.z == other.z
 */
  }

  /* "ezdxf/acc/vector.pyx":606
 *         if not isinstance(other, Vec3):
 *             other = Vec3(other)
 *         return self.x == other.x and self.y == other.y and self.z == other.z             # <<<<<<<<<<<<<<
 * 
 *     def __lt__(self, other: 'Vertex') -> bool:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_x); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyObject_RichCompare(__pyx_t_4, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 606, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_6);
    __pyx_t_3 = __pyx_t_6;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->y); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_y); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_6, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 606, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->z); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_z); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyObject_RichCompare(__pyx_t_4, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_t_6);
  __pyx_t_3 = __pyx_t_6;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_L4_bool_binop_done:;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":603
 *         return v3_isclose(self, <Vec3> other, rel_tol, abs_tol)
 * 
 *     def __eq__(self, other: 'Vertex') -> bool:             # <<<<<<<<<<<<<<
 *         if not isinstance(other, Vec3):
 *             other = Vec3(other)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_other);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":608
 *         return self.x == other.x and self.y == other.y and self.z == other.z
 * 
 *     def __lt__(self, other: 'Vertex') -> bool:             # <<<<<<<<<<<<<<
 *         if not isinstance(other, Vec3):
 *             other = Vec3(other)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_60__lt__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_60__lt__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__lt__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_59__lt__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_59__lt__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__lt__", 0);
  __Pyx_INCREF(__pyx_v_other);

  /* "ezdxf/acc/vector.pyx":609
 * 
 *     def __lt__(self, other: 'Vertex') -> bool:
 *         if not isinstance(other, Vec3):             # <<<<<<<<<<<<<<
 *             other = Vec3(other)
 *         if self.x == (<Vec3> other).x:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_5ezdxf_3acc_6vector_Vec3); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "ezdxf/acc/vector.pyx":610
 *     def __lt__(self, other: 'Vertex') -> bool:
 *         if not isinstance(other, Vec3):
 *             other = Vec3(other)             # <<<<<<<<<<<<<<
 *         if self.x == (<Vec3> other).x:
 *             return self.y < (<Vec3> other).y
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_other, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "ezdxf/acc/vector.pyx":609
 * 
 *     def __lt__(self, other: 'Vertex') -> bool:
 *         if not isinstance(other, Vec3):             # <<<<<<<<<<<<<<
 *             other = Vec3(other)
 *         if self.x == (<Vec3> other).x:
 */
  }

  /* "ezdxf/acc/vector.pyx":611
 *         if not isinstance(other, Vec3):
 *             other = Vec3(other)
 *         if self.x == (<Vec3> other).x:             # <<<<<<<<<<<<<<
 *             return self.y < (<Vec3> other).y
 *         else:
 */
  __pyx_t_2 = ((__pyx_v_self->x == ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_other)->x) != 0);
  if (__pyx_t_2) {

    /* "ezdxf/acc/vector.pyx":612
 *             other = Vec3(other)
 *         if self.x == (<Vec3> other).x:
 *             return self.y < (<Vec3> other).y             # <<<<<<<<<<<<<<
 *         else:
 *             return self.x < (<Vec3> other).x
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_v_self->y < ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_other)->y)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "ezdxf/acc/vector.pyx":611
 *         if not isinstance(other, Vec3):
 *             other = Vec3(other)
 *         if self.x == (<Vec3> other).x:             # <<<<<<<<<<<<<<
 *             return self.y < (<Vec3> other).y
 *         else:
 */
  }

  /* "ezdxf/acc/vector.pyx":614
 *             return self.y < (<Vec3> other).y
 *         else:
 *             return self.x < (<Vec3> other).x             # <<<<<<<<<<<<<<
 * 
 *     # Special Cython (<3.0) feature: __radd__ == __add__(other, self)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_v_self->x < ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_other)->x)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 614, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "ezdxf/acc/vector.pyx":608
 *         return self.x == other.x and self.y == other.y and self.z == other.z
 * 
 *     def __lt__(self, other: 'Vertex') -> bool:             # <<<<<<<<<<<<<<
 *         if not isinstance(other, Vec3):
 *             other = Vec3(other)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.__lt__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_other);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":617
 * 
 *     # Special Cython (<3.0) feature: __radd__ == __add__(other, self)
 *     def __add__(self, other) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         if not isinstance(self, Vec3):
 *             # other is the real self
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_62__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_62__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_61__add__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_61__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 0);
  __Pyx_INCREF(__pyx_v_other);

  /* "ezdxf/acc/vector.pyx":618
 *     # Special Cython (<3.0) feature: __radd__ == __add__(other, self)
 *     def __add__(self, other) -> 'Vec3':
 *         if not isinstance(self, Vec3):             # <<<<<<<<<<<<<<
 *             # other is the real self
 *             return v3_add(Vec3(self), <Vec3> other)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_self, __pyx_ptype_5ezdxf_3acc_6vector_Vec3); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "ezdxf/acc/vector.pyx":620
 *         if not isinstance(self, Vec3):
 *             # other is the real self
 *             return v3_add(Vec3(self), <Vec3> other)             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(other, Vec3):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_v_self); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 620, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_add(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_3), ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_other))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 620, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "ezdxf/acc/vector.pyx":618
 *     # Special Cython (<3.0) feature: __radd__ == __add__(other, self)
 *     def __add__(self, other) -> 'Vec3':
 *         if not isinstance(self, Vec3):             # <<<<<<<<<<<<<<
 *             # other is the real self
 *             return v3_add(Vec3(self), <Vec3> other)
 */
  }

  /* "ezdxf/acc/vector.pyx":622
 *             return v3_add(Vec3(self), <Vec3> other)
 * 
 *         if not isinstance(other, Vec3):             # <<<<<<<<<<<<<<
 *             other = Vec3(other)
 *         return v3_add(<Vec3> self, <Vec3> other)
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_5ezdxf_3acc_6vector_Vec3); 
  __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_1) {

    /* "ezdxf/acc/vector.pyx":623
 * 
 *         if not isinstance(other, Vec3):
 *             other = Vec3(other)             # <<<<<<<<<<<<<<
 *         return v3_add(<Vec3> self, <Vec3> other)
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_v_other); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF_SET(__pyx_v_other, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "ezdxf/acc/vector.pyx":622
 *             return v3_add(Vec3(self), <Vec3> other)
 * 
 *         if not isinstance(other, Vec3):             # <<<<<<<<<<<<<<
 *             other = Vec3(other)
 *         return v3_add(<Vec3> self, <Vec3> other)
 */
  }

  /* "ezdxf/acc/vector.pyx":624
 *         if not isinstance(other, Vec3):
 *             other = Vec3(other)
 *         return v3_add(<Vec3> self, <Vec3> other)             # <<<<<<<<<<<<<<
 * 
 *     __radd__ = __add__  # Cython >= 3.0
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_add(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self), ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_other))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":617
 * 
 *     # Special Cython (<3.0) feature: __radd__ == __add__(other, self)
 *     def __add__(self, other) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         if not isinstance(self, Vec3):
 *             # other is the real self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_other);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":631
 * 
 *     # Special Cython (<3.0) feature: __rsub__ == __sub__(other, self)
 *     def __sub__(self, other) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         if not isinstance(self, Vec3):
 *             # other is the real self
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_64__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_64__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__sub__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_63__sub__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_63__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__sub__", 0);
  __Pyx_INCREF(__pyx_v_other);

  /* "ezdxf/acc/vector.pyx":632
 *     # Special Cython (<3.0) feature: __rsub__ == __sub__(other, self)
 *     def __sub__(self, other) -> 'Vec3':
 *         if not isinstance(self, Vec3):             # <<<<<<<<<<<<<<
 *             # other is the real self
 *             return v3_sub(Vec3(self), <Vec3> other)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_self, __pyx_ptype_5ezdxf_3acc_6vector_Vec3); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "ezdxf/acc/vector.pyx":634
 *         if not isinstance(self, Vec3):
 *             # other is the real self
 *             return v3_sub(Vec3(self), <Vec3> other)             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(other, Vec3):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_v_self); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 634, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_sub(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_3), ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_other))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 634, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "ezdxf/acc/vector.pyx":632
 *     # Special Cython (<3.0) feature: __rsub__ == __sub__(other, self)
 *     def __sub__(self, other) -> 'Vec3':
 *         if not isinstance(self, Vec3):             # <<<<<<<<<<<<<<
 *             # other is the real self
 *             return v3_sub(Vec3(self), <Vec3> other)
 */
  }

  /* "ezdxf/acc/vector.pyx":636
 *             return v3_sub(Vec3(self), <Vec3> other)
 * 
 *         if not isinstance(other, Vec3):             # <<<<<<<<<<<<<<
 *             other = Vec3(other)
 *         return v3_sub(<Vec3> self, <Vec3> other)
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_5ezdxf_3acc_6vector_Vec3); 
  __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_1) {

    /* "ezdxf/acc/vector.pyx":637
 * 
 *         if not isinstance(other, Vec3):
 *             other = Vec3(other)             # <<<<<<<<<<<<<<
 *         return v3_sub(<Vec3> self, <Vec3> other)
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_v_other); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 637, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF_SET(__pyx_v_other, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "ezdxf/acc/vector.pyx":636
 *             return v3_sub(Vec3(self), <Vec3> other)
 * 
 *         if not isinstance(other, Vec3):             # <<<<<<<<<<<<<<
 *             other = Vec3(other)
 *         return v3_sub(<Vec3> self, <Vec3> other)
 */
  }

  /* "ezdxf/acc/vector.pyx":638
 *         if not isinstance(other, Vec3):
 *             other = Vec3(other)
 *         return v3_sub(<Vec3> self, <Vec3> other)             # <<<<<<<<<<<<<<
 * 
 *     def __rsub__(self, other) -> 'Vec3':
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_sub(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self), ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_other))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":631
 * 
 *     # Special Cython (<3.0) feature: __rsub__ == __sub__(other, self)
 *     def __sub__(self, other) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         if not isinstance(self, Vec3):
 *             # other is the real self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.__sub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_other);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":640
 *         return v3_sub(<Vec3> self, <Vec3> other)
 * 
 *     def __rsub__(self, other) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         # for Cython >= 3.0
 *         return v3_sub(Vec3(other), <Vec3> self)
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_66__rsub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_66__rsub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__rsub__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_65__rsub__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_65__rsub__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__rsub__", 0);

  /* "ezdxf/acc/vector.pyx":642
 *     def __rsub__(self, other) -> 'Vec3':
 *         # for Cython >= 3.0
 *         return v3_sub(Vec3(other), <Vec3> self)             # <<<<<<<<<<<<<<
 * 
 *     __isub__ = __sub__  # immutable
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_v_other); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_sub(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1), __pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":640
 *         return v3_sub(<Vec3> self, <Vec3> other)
 * 
 *     def __rsub__(self, other) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         # for Cython >= 3.0
 *         return v3_sub(Vec3(other), <Vec3> self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.__rsub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":647
 * 
 *     # Special Cython <(3.0) feature: __rmul__ == __mul__(factor, self)
 *     def __mul__(self, factor) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         if isinstance(factor, Vec3):
 *             return v3_mul(<Vec3> factor, self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_68__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_factor); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_68__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_factor) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_67__mul__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_factor));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_67__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_factor) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "ezdxf/acc/vector.pyx":648
 *     # Special Cython <(3.0) feature: __rmul__ == __mul__(factor, self)
 *     def __mul__(self, factor) -> 'Vec3':
 *         if isinstance(factor, Vec3):             # <<<<<<<<<<<<<<
 *             return v3_mul(<Vec3> factor, self)
 *         return v3_mul(<Vec3> self, factor)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_factor, __pyx_ptype_5ezdxf_3acc_6vector_Vec3); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "ezdxf/acc/vector.pyx":649
 *     def __mul__(self, factor) -> 'Vec3':
 *         if isinstance(factor, Vec3):
 *             return v3_mul(<Vec3> factor, self)             # <<<<<<<<<<<<<<
 *         return v3_mul(<Vec3> self, factor)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_self); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 649, __pyx_L1_error)
    __pyx_t_4 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_mul(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_factor), __pyx_t_3)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "ezdxf/acc/vector.pyx":648
 *     # Special Cython <(3.0) feature: __rmul__ == __mul__(factor, self)
 *     def __mul__(self, factor) -> 'Vec3':
 *         if isinstance(factor, Vec3):             # <<<<<<<<<<<<<<
 *             return v3_mul(<Vec3> factor, self)
 *         return v3_mul(<Vec3> self, factor)
 */
  }

  /* "ezdxf/acc/vector.pyx":650
 *         if isinstance(factor, Vec3):
 *             return v3_mul(<Vec3> factor, self)
 *         return v3_mul(<Vec3> self, factor)             # <<<<<<<<<<<<<<
 * 
 *     def __rmul__(self, double factor) -> 'Vec3':
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_factor); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 650, __pyx_L1_error)
  __pyx_t_4 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_mul(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self), __pyx_t_3)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":647
 * 
 *     # Special Cython <(3.0) feature: __rmul__ == __mul__(factor, self)
 *     def __mul__(self, factor) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         if isinstance(factor, Vec3):
 *             return v3_mul(<Vec3> factor, self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":652
 *         return v3_mul(<Vec3> self, factor)
 * 
 *     def __rmul__(self, double factor) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         # for Cython >= 3.0
 *         return v3_mul(self, factor)
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_70__rmul__(PyObject *__pyx_v_self, PyObject *__pyx_arg_factor); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_70__rmul__(PyObject *__pyx_v_self, PyObject *__pyx_arg_factor) {
  double __pyx_v_factor;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__rmul__ (wrapper)", 0);
  assert(__pyx_arg_factor); {
    __pyx_v_factor = __pyx_PyFloat_AsDouble(__pyx_arg_factor); if (unlikely((__pyx_v_factor == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 652, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.__rmul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_69__rmul__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self), ((double)__pyx_v_factor));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_69__rmul__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, double __pyx_v_factor) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__rmul__", 0);

  /* "ezdxf/acc/vector.pyx":654
 *     def __rmul__(self, double factor) -> 'Vec3':
 *         # for Cython >= 3.0
 *         return v3_mul(self, factor)             # <<<<<<<<<<<<<<
 * 
 *     __imul__ = __mul__  # immutable
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_mul(__pyx_v_self, __pyx_v_factor)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":652
 *         return v3_mul(<Vec3> self, factor)
 * 
 *     def __rmul__(self, double factor) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         # for Cython >= 3.0
 *         return v3_mul(self, factor)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.__rmul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":658
 *     __imul__ = __mul__  # immutable
 * 
 *     def __truediv__(self, double factor) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         return v3_mul(self, 1.0 / factor)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_72__truediv__(PyObject *__pyx_v_self, PyObject *__pyx_arg_factor); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_72__truediv__(PyObject *__pyx_v_self, PyObject *__pyx_arg_factor) {
  double __pyx_v_factor;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__truediv__ (wrapper)", 0);
  assert(__pyx_arg_factor); {
    __pyx_v_factor = __pyx_PyFloat_AsDouble(__pyx_arg_factor); if (unlikely((__pyx_v_factor == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 658, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.__truediv__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_71__truediv__(((PyObject *)__pyx_v_self), ((double)__pyx_v_factor));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_71__truediv__(PyObject *__pyx_v_self, double __pyx_v_factor) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__truediv__", 0);

  /* "ezdxf/acc/vector.pyx":659
 * 
 *     def __truediv__(self, double factor) -> 'Vec3':
 *         return v3_mul(self, 1.0 / factor)             # <<<<<<<<<<<<<<
 * 
 *     # __rtruediv__ not supported -> TypeError
 */
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(((__pyx_v_self) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_self, __pyx_ptype_5ezdxf_3acc_6vector_Vec3))))) __PYX_ERR(0, 659, __pyx_L1_error)
  if (unlikely(__pyx_v_factor == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 659, __pyx_L1_error)
  }
  __pyx_t_1 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_mul(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self), (1.0 / __pyx_v_factor))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":658
 *     __imul__ = __mul__  # immutable
 * 
 *     def __truediv__(self, double factor) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         return v3_mul(self, 1.0 / factor)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.__truediv__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":664
 * 
 *     @staticmethod
 *     def sum(items: Iterable['Vertex']) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         cdef Vec3 res = Vec3()
 *         cdef Vec3 tmp
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_74sum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5ezdxf_3acc_6vector_4Vec3_74sum = {"sum", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_74sum, METH_VARARGS|METH_KEYWORDS, 0};
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_74sum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_items = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sum (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_items,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_items)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sum") < 0)) __PYX_ERR(0, 664, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_items = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sum", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 664, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.sum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_73sum(__pyx_v_items);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_73sum(PyObject *__pyx_v_items) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_res = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_tmp = 0;
  PyObject *__pyx_v_v = NULL;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sum", 0);

  /* "ezdxf/acc/vector.pyx":665
 *     @staticmethod
 *     def sum(items: Iterable['Vertex']) -> 'Vec3':
 *         cdef Vec3 res = Vec3()             # <<<<<<<<<<<<<<
 *         cdef Vec3 tmp
 *         for v in items:
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":667
 *         cdef Vec3 res = Vec3()
 *         cdef Vec3 tmp
 *         for v in items:             # <<<<<<<<<<<<<<
 *             tmp = Vec3(v)
 *             res.x += tmp.x
 */
  if (likely(PyList_CheckExact(__pyx_v_items)) || PyTuple_CheckExact(__pyx_v_items)) {
    __pyx_t_1 = __pyx_v_items; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_items); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 667, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 667, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 667, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 667, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 667, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 667, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 667, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "ezdxf/acc/vector.pyx":668
 *         cdef Vec3 tmp
 *         for v in items:
 *             tmp = Vec3(v)             # <<<<<<<<<<<<<<
 *             res.x += tmp.x
 *             res.y += tmp.y
 */
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_v_v); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 668, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_tmp, ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "ezdxf/acc/vector.pyx":669
 *         for v in items:
 *             tmp = Vec3(v)
 *             res.x += tmp.x             # <<<<<<<<<<<<<<
 *             res.y += tmp.y
 *             res.z += tmp.z
 */
    __pyx_v_res->x = (__pyx_v_res->x + __pyx_v_tmp->x);

    /* "ezdxf/acc/vector.pyx":670
 *             tmp = Vec3(v)
 *             res.x += tmp.x
 *             res.y += tmp.y             # <<<<<<<<<<<<<<
 *             res.z += tmp.z
 *         return res
 */
    __pyx_v_res->y = (__pyx_v_res->y + __pyx_v_tmp->y);

    /* "ezdxf/acc/vector.pyx":671
 *             res.x += tmp.x
 *             res.y += tmp.y
 *             res.z += tmp.z             # <<<<<<<<<<<<<<
 *         return res
 * 
 */
    __pyx_v_res->z = (__pyx_v_res->z + __pyx_v_tmp->z);

    /* "ezdxf/acc/vector.pyx":667
 *         cdef Vec3 res = Vec3()
 *         cdef Vec3 tmp
 *         for v in items:             # <<<<<<<<<<<<<<
 *             tmp = Vec3(v)
 *             res.x += tmp.x
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":672
 *             res.y += tmp.y
 *             res.z += tmp.z
 *         return res             # <<<<<<<<<<<<<<
 * 
 *     def dot(self, other: 'Vertex') -> float:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":664
 * 
 *     @staticmethod
 *     def sum(items: Iterable['Vertex']) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         cdef Vec3 res = Vec3()
 *         cdef Vec3 tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.sum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XDECREF((PyObject *)__pyx_v_tmp);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":674
 *         return res
 * 
 *     def dot(self, other: 'Vertex') -> float:             # <<<<<<<<<<<<<<
 *         cdef Vec3 o = Vec3(other)
 *         return v3_dot(self, o)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_76dot(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_76dot(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_75dot(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_75dot(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_o = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dot", 0);

  /* "ezdxf/acc/vector.pyx":675
 * 
 *     def dot(self, other: 'Vertex') -> float:
 *         cdef Vec3 o = Vec3(other)             # <<<<<<<<<<<<<<
 *         return v3_dot(self, o)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_v_other); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":676
 *     def dot(self, other: 'Vertex') -> float:
 *         cdef Vec3 o = Vec3(other)
 *         return v3_dot(self, o)             # <<<<<<<<<<<<<<
 * 
 *     def cross(self, other: 'Vertex') -> 'Vec3':
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_5ezdxf_3acc_6vector_v3_dot(__pyx_v_self, __pyx_v_o)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":674
 *         return res
 * 
 *     def dot(self, other: 'Vertex') -> float:             # <<<<<<<<<<<<<<
 *         cdef Vec3 o = Vec3(other)
 *         return v3_dot(self, o)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":678
 *         return v3_dot(self, o)
 * 
 *     def cross(self, other: 'Vertex') -> 'Vec3':             # <<<<<<<<<<<<<<
 *         cdef Vec3 o = Vec3(other)
 *         return v3_cross(self, o)
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_78cross(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_78cross(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cross (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_77cross(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_77cross(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_o = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cross", 0);

  /* "ezdxf/acc/vector.pyx":679
 * 
 *     def cross(self, other: 'Vertex') -> 'Vec3':
 *         cdef Vec3 o = Vec3(other)             # <<<<<<<<<<<<<<
 *         return v3_cross(self, o)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_v_other); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":680
 *     def cross(self, other: 'Vertex') -> 'Vec3':
 *         cdef Vec3 o = Vec3(other)
 *         return v3_cross(self, o)             # <<<<<<<<<<<<<<
 * 
 *     def distance(self, other: 'Vertex') -> float:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_cross(__pyx_v_self, __pyx_v_o)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":678
 *         return v3_dot(self, o)
 * 
 *     def cross(self, other: 'Vertex') -> 'Vec3':             # <<<<<<<<<<<<<<
 *         cdef Vec3 o = Vec3(other)
 *         return v3_cross(self, o)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.cross", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_o);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":682
 *         return v3_cross(self, o)
 * 
 *     def distance(self, other: 'Vertex') -> float:             # <<<<<<<<<<<<<<
 *         cdef Vec3 o = Vec3(other)
 *         return v3_dist(self, o)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_80distance(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_80distance(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distance (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_79distance(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_79distance(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_o = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance", 0);

  /* "ezdxf/acc/vector.pyx":683
 * 
 *     def distance(self, other: 'Vertex') -> float:
 *         cdef Vec3 o = Vec3(other)             # <<<<<<<<<<<<<<
 *         return v3_dist(self, o)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_v_other); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":684
 *     def distance(self, other: 'Vertex') -> float:
 *         cdef Vec3 o = Vec3(other)
 *         return v3_dist(self, o)             # <<<<<<<<<<<<<<
 * 
 *     def angle_between(self, other: 'Vertex') -> float:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_5ezdxf_3acc_6vector_v3_dist(__pyx_v_self, __pyx_v_o)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":682
 *         return v3_cross(self, o)
 * 
 *     def distance(self, other: 'Vertex') -> float:             # <<<<<<<<<<<<<<
 *         cdef Vec3 o = Vec3(other)
 *         return v3_dist(self, o)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":686
 *         return v3_dist(self, o)
 * 
 *     def angle_between(self, other: 'Vertex') -> float:             # <<<<<<<<<<<<<<
 *         cdef Vec3 o = Vec3(other)
 *         return v3_angle_between(self, o)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_82angle_between(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_82angle_between(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("angle_between (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_81angle_between(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_81angle_between(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_o = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("angle_between", 0);

  /* "ezdxf/acc/vector.pyx":687
 * 
 *     def angle_between(self, other: 'Vertex') -> float:
 *         cdef Vec3 o = Vec3(other)             # <<<<<<<<<<<<<<
 *         return v3_angle_between(self, o)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_v_other); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":688
 *     def angle_between(self, other: 'Vertex') -> float:
 *         cdef Vec3 o = Vec3(other)
 *         return v3_angle_between(self, o)             # <<<<<<<<<<<<<<
 * 
 *     def angle_about(self, base: 'Vertex', target: 'Vertex') -> float:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_5ezdxf_3acc_6vector_v3_angle_between(__pyx_v_self, __pyx_v_o); if (unlikely(__pyx_t_2 == ((double)-1000.0))) __PYX_ERR(0, 688, __pyx_L1_error)
  __pyx_t_1 = PyFloat_FromDouble(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":686
 *         return v3_dist(self, o)
 * 
 *     def angle_between(self, other: 'Vertex') -> float:             # <<<<<<<<<<<<<<
 *         cdef Vec3 o = Vec3(other)
 *         return v3_angle_between(self, o)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.angle_between", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":690
 *         return v3_angle_between(self, o)
 * 
 *     def angle_about(self, base: 'Vertex', target: 'Vertex') -> float:             # <<<<<<<<<<<<<<
 *         cdef Vec3 b = Vec3(base)
 *         cdef Vec3 t = Vec3(target)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_84angle_about(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_84angle_about(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_base = 0;
  PyObject *__pyx_v_target = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("angle_about (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_base,&__pyx_n_s_target,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_base)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_target)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("angle_about", 1, 2, 2, 1); __PYX_ERR(0, 690, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "angle_about") < 0)) __PYX_ERR(0, 690, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_base = values[0];
    __pyx_v_target = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("angle_about", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 690, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.angle_about", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_83angle_about(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self), __pyx_v_base, __pyx_v_target);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_83angle_about(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, PyObject *__pyx_v_base, PyObject *__pyx_v_target) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_b = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_t = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("angle_about", 0);

  /* "ezdxf/acc/vector.pyx":691
 * 
 *     def angle_about(self, base: 'Vertex', target: 'Vertex') -> float:
 *         cdef Vec3 b = Vec3(base)             # <<<<<<<<<<<<<<
 *         cdef Vec3 t = Vec3(target)
 *         return v3_angle_about(self, b, t)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_v_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_b = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":692
 *     def angle_about(self, base: 'Vertex', target: 'Vertex') -> float:
 *         cdef Vec3 b = Vec3(base)
 *         cdef Vec3 t = Vec3(target)             # <<<<<<<<<<<<<<
 *         return v3_angle_about(self, b, t)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_v_target); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_t = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":693
 *         cdef Vec3 b = Vec3(base)
 *         cdef Vec3 t = Vec3(target)
 *         return v3_angle_about(self, b, t)             # <<<<<<<<<<<<<<
 * 
 *     def rotate(self, double angle) -> 'Vec3':
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_5ezdxf_3acc_6vector_v3_angle_about(__pyx_v_self, __pyx_v_b, __pyx_v_t)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":690
 *         return v3_angle_between(self, o)
 * 
 *     def angle_about(self, base: 'Vertex', target: 'Vertex') -> float:             # <<<<<<<<<<<<<<
 *         cdef Vec3 b = Vec3(base)
 *         cdef Vec3 t = Vec3(target)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.angle_about", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_b);
  __Pyx_XDECREF((PyObject *)__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":695
 *         return v3_angle_about(self, b, t)
 * 
 *     def rotate(self, double angle) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         cdef double angle_ = atan2(self.y, self.x) + angle
 *         cdef double magnitude_ = hypot(self.x, self.y)
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_86rotate(PyObject *__pyx_v_self, PyObject *__pyx_arg_angle); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_86rotate(PyObject *__pyx_v_self, PyObject *__pyx_arg_angle) {
  double __pyx_v_angle;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rotate (wrapper)", 0);
  assert(__pyx_arg_angle); {
    __pyx_v_angle = __pyx_PyFloat_AsDouble(__pyx_arg_angle); if (unlikely((__pyx_v_angle == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 695, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.rotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_85rotate(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self), ((double)__pyx_v_angle));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_85rotate(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, double __pyx_v_angle) {
  double __pyx_v_angle_;
  double __pyx_v_magnitude_;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_res = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  double __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rotate", 0);

  /* "ezdxf/acc/vector.pyx":696
 * 
 *     def rotate(self, double angle) -> 'Vec3':
 *         cdef double angle_ = atan2(self.y, self.x) + angle             # <<<<<<<<<<<<<<
 *         cdef double magnitude_ = hypot(self.x, self.y)
 *         cdef Vec3 res = Vec3.from_angle(angle_, magnitude_)
 */
  __pyx_v_angle_ = (atan2(__pyx_v_self->y, __pyx_v_self->x) + __pyx_v_angle);

  /* "ezdxf/acc/vector.pyx":697
 *     def rotate(self, double angle) -> 'Vec3':
 *         cdef double angle_ = atan2(self.y, self.x) + angle
 *         cdef double magnitude_ = hypot(self.x, self.y)             # <<<<<<<<<<<<<<
 *         cdef Vec3 res = Vec3.from_angle(angle_, magnitude_)
 *         res.z = self.z
 */
  __pyx_v_magnitude_ = hypot(__pyx_v_self->x, __pyx_v_self->y);

  /* "ezdxf/acc/vector.pyx":698
 *         cdef double angle_ = atan2(self.y, self.x) + angle
 *         cdef double magnitude_ = hypot(self.x, self.y)
 *         cdef Vec3 res = Vec3.from_angle(angle_, magnitude_)             # <<<<<<<<<<<<<<
 *         res.z = self.z
 *         return res
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_n_s_from_angle); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_angle_); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_magnitude_); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 698, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 698, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5ezdxf_3acc_6vector_Vec3))))) __PYX_ERR(0, 698, __pyx_L1_error)
  __pyx_v_res = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":699
 *         cdef double magnitude_ = hypot(self.x, self.y)
 *         cdef Vec3 res = Vec3.from_angle(angle_, magnitude_)
 *         res.z = self.z             # <<<<<<<<<<<<<<
 *         return res
 * 
 */
  __pyx_t_8 = __pyx_v_self->z;
  __pyx_v_res->z = __pyx_t_8;

  /* "ezdxf/acc/vector.pyx":700
 *         cdef Vec3 res = Vec3.from_angle(angle_, magnitude_)
 *         res.z = self.z
 *         return res             # <<<<<<<<<<<<<<
 * 
 *     def rotate_deg(self, double angle) -> 'Vec3':
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":695
 *         return v3_angle_about(self, b, t)
 * 
 *     def rotate(self, double angle) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         cdef double angle_ = atan2(self.y, self.x) + angle
 *         cdef double magnitude_ = hypot(self.x, self.y)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.rotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":702
 *         return res
 * 
 *     def rotate_deg(self, double angle) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         return self.rotate(angle * DEG2RAD)
 * 
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_88rotate_deg(PyObject *__pyx_v_self, PyObject *__pyx_arg_angle); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_88rotate_deg(PyObject *__pyx_v_self, PyObject *__pyx_arg_angle) {
  double __pyx_v_angle;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rotate_deg (wrapper)", 0);
  assert(__pyx_arg_angle); {
    __pyx_v_angle = __pyx_PyFloat_AsDouble(__pyx_arg_angle); if (unlikely((__pyx_v_angle == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 702, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.rotate_deg", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_87rotate_deg(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self), ((double)__pyx_v_angle));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_87rotate_deg(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self, double __pyx_v_angle) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rotate_deg", 0);

  /* "ezdxf/acc/vector.pyx":703
 * 
 *     def rotate_deg(self, double angle) -> 'Vec3':
 *         return self.rotate(angle * DEG2RAD)             # <<<<<<<<<<<<<<
 * 
 *     cdef CppVec3 to_cpp_vec3(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rotate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_angle * __pyx_v_5ezdxf_3acc_6vector_DEG2RAD)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5ezdxf_3acc_6vector_Vec3))))) __PYX_ERR(0, 703, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":702
 *         return res
 * 
 *     def rotate_deg(self, double angle) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         return self.rotate(angle * DEG2RAD)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.rotate_deg", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":705
 *         return self.rotate(angle * DEG2RAD)
 * 
 *     cdef CppVec3 to_cpp_vec3(self):             # <<<<<<<<<<<<<<
 *         return CppVec3(self.x, self.y, self.z)
 * 
 */

static CppVec3 __pyx_f_5ezdxf_3acc_6vector_4Vec3_to_cpp_vec3(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self) {
  CppVec3 __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_cpp_vec3", 0);

  /* "ezdxf/acc/vector.pyx":706
 * 
 *     cdef CppVec3 to_cpp_vec3(self):
 *         return CppVec3(self.x, self.y, self.z)             # <<<<<<<<<<<<<<
 * 
 * X_AXIS = Vec3(1, 0, 0)
 */
  __pyx_r = CppVec3(__pyx_v_self->x, __pyx_v_self->y, __pyx_v_self->z);
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":705
 *         return self.rotate(angle * DEG2RAD)
 * 
 *     cdef CppVec3 to_cpp_vec3(self):             # <<<<<<<<<<<<<<
 *         return CppVec3(self.x, self.y, self.z)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pxd":37
 * 
 * cdef class Vec3:
 *     cdef readonly double x, y, z             # <<<<<<<<<<<<<<
 *     cdef CppVec3 to_cpp_vec3(self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_1x_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_1x_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_1x___get__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_1x___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.x.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_1y_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_1y_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_1y___get__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_1y___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->y); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.y.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_1z_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_4Vec3_1z_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4Vec3_1z___get__(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4Vec3_1z___get__(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->z); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.Vec3.z.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":714
 * Vector = Vec3
 * 
 * cdef Vec3 v3_add(Vec3 a, Vec3 b):             # <<<<<<<<<<<<<<
 *     res = Vec3()
 *     res.x = a.x + b.x
 */

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_f_5ezdxf_3acc_6vector_v3_add(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_a, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_b) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_res = NULL;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("v3_add", 0);

  /* "ezdxf/acc/vector.pyx":715
 * 
 * cdef Vec3 v3_add(Vec3 a, Vec3 b):
 *     res = Vec3()             # <<<<<<<<<<<<<<
 *     res.x = a.x + b.x
 *     res.y = a.y + b.y
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":716
 * cdef Vec3 v3_add(Vec3 a, Vec3 b):
 *     res = Vec3()
 *     res.x = a.x + b.x             # <<<<<<<<<<<<<<
 *     res.y = a.y + b.y
 *     res.z = a.z + b.z
 */
  __pyx_v_res->x = (__pyx_v_a->x + __pyx_v_b->x);

  /* "ezdxf/acc/vector.pyx":717
 *     res = Vec3()
 *     res.x = a.x + b.x
 *     res.y = a.y + b.y             # <<<<<<<<<<<<<<
 *     res.z = a.z + b.z
 *     return res
 */
  __pyx_v_res->y = (__pyx_v_a->y + __pyx_v_b->y);

  /* "ezdxf/acc/vector.pyx":718
 *     res.x = a.x + b.x
 *     res.y = a.y + b.y
 *     res.z = a.z + b.z             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  __pyx_v_res->z = (__pyx_v_a->z + __pyx_v_b->z);

  /* "ezdxf/acc/vector.pyx":719
 *     res.y = a.y + b.y
 *     res.z = a.z + b.z
 *     return res             # <<<<<<<<<<<<<<
 * 
 * cdef Vec3 v3_sub(Vec3 a, Vec3 b):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":714
 * Vector = Vec3
 * 
 * cdef Vec3 v3_add(Vec3 a, Vec3 b):             # <<<<<<<<<<<<<<
 *     res = Vec3()
 *     res.x = a.x + b.x
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.v3_add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":721
 *     return res
 * 
 * cdef Vec3 v3_sub(Vec3 a, Vec3 b):             # <<<<<<<<<<<<<<
 *     res = Vec3()
 *     res.x = a.x - b.x
 */

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_f_5ezdxf_3acc_6vector_v3_sub(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_a, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_b) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_res = NULL;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("v3_sub", 0);

  /* "ezdxf/acc/vector.pyx":722
 * 
 * cdef Vec3 v3_sub(Vec3 a, Vec3 b):
 *     res = Vec3()             # <<<<<<<<<<<<<<
 *     res.x = a.x - b.x
 *     res.y = a.y - b.y
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":723
 * cdef Vec3 v3_sub(Vec3 a, Vec3 b):
 *     res = Vec3()
 *     res.x = a.x - b.x             # <<<<<<<<<<<<<<
 *     res.y = a.y - b.y
 *     res.z = a.z - b.z
 */
  __pyx_v_res->x = (__pyx_v_a->x - __pyx_v_b->x);

  /* "ezdxf/acc/vector.pyx":724
 *     res = Vec3()
 *     res.x = a.x - b.x
 *     res.y = a.y - b.y             # <<<<<<<<<<<<<<
 *     res.z = a.z - b.z
 *     return res
 */
  __pyx_v_res->y = (__pyx_v_a->y - __pyx_v_b->y);

  /* "ezdxf/acc/vector.pyx":725
 *     res.x = a.x - b.x
 *     res.y = a.y - b.y
 *     res.z = a.z - b.z             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  __pyx_v_res->z = (__pyx_v_a->z - __pyx_v_b->z);

  /* "ezdxf/acc/vector.pyx":726
 *     res.y = a.y - b.y
 *     res.z = a.z - b.z
 *     return res             # <<<<<<<<<<<<<<
 * 
 * cdef Vec3 v3_mul(Vec3 a, double factor):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":721
 *     return res
 * 
 * cdef Vec3 v3_sub(Vec3 a, Vec3 b):             # <<<<<<<<<<<<<<
 *     res = Vec3()
 *     res.x = a.x - b.x
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.v3_sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":728
 *     return res
 * 
 * cdef Vec3 v3_mul(Vec3 a, double factor):             # <<<<<<<<<<<<<<
 *     res = Vec3()
 *     res.x = a.x * factor
 */

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_f_5ezdxf_3acc_6vector_v3_mul(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_a, double __pyx_v_factor) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_res = NULL;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("v3_mul", 0);

  /* "ezdxf/acc/vector.pyx":729
 * 
 * cdef Vec3 v3_mul(Vec3 a, double factor):
 *     res = Vec3()             # <<<<<<<<<<<<<<
 *     res.x = a.x * factor
 *     res.y = a.y * factor
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":730
 * cdef Vec3 v3_mul(Vec3 a, double factor):
 *     res = Vec3()
 *     res.x = a.x * factor             # <<<<<<<<<<<<<<
 *     res.y = a.y * factor
 *     res.z = a.z * factor
 */
  __pyx_v_res->x = (__pyx_v_a->x * __pyx_v_factor);

  /* "ezdxf/acc/vector.pyx":731
 *     res = Vec3()
 *     res.x = a.x * factor
 *     res.y = a.y * factor             # <<<<<<<<<<<<<<
 *     res.z = a.z * factor
 *     return res
 */
  __pyx_v_res->y = (__pyx_v_a->y * __pyx_v_factor);

  /* "ezdxf/acc/vector.pyx":732
 *     res.x = a.x * factor
 *     res.y = a.y * factor
 *     res.z = a.z * factor             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  __pyx_v_res->z = (__pyx_v_a->z * __pyx_v_factor);

  /* "ezdxf/acc/vector.pyx":733
 *     res.y = a.y * factor
 *     res.z = a.z * factor
 *     return res             # <<<<<<<<<<<<<<
 * 
 * cdef Vec3 v3_reverse(Vec3 a):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":728
 *     return res
 * 
 * cdef Vec3 v3_mul(Vec3 a, double factor):             # <<<<<<<<<<<<<<
 *     res = Vec3()
 *     res.x = a.x * factor
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.v3_mul", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":735
 *     return res
 * 
 * cdef Vec3 v3_reverse(Vec3 a):             # <<<<<<<<<<<<<<
 *     cdef Vec3 res = Vec3()
 *     res.x = -a.x
 */

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_f_5ezdxf_3acc_6vector_v3_reverse(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_a) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_res = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("v3_reverse", 0);

  /* "ezdxf/acc/vector.pyx":736
 * 
 * cdef Vec3 v3_reverse(Vec3 a):
 *     cdef Vec3 res = Vec3()             # <<<<<<<<<<<<<<
 *     res.x = -a.x
 *     res.y = -a.y
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":737
 * cdef Vec3 v3_reverse(Vec3 a):
 *     cdef Vec3 res = Vec3()
 *     res.x = -a.x             # <<<<<<<<<<<<<<
 *     res.y = -a.y
 *     res.z = -a.z
 */
  __pyx_v_res->x = (-__pyx_v_a->x);

  /* "ezdxf/acc/vector.pyx":738
 *     cdef Vec3 res = Vec3()
 *     res.x = -a.x
 *     res.y = -a.y             # <<<<<<<<<<<<<<
 *     res.z = -a.z
 *     return res
 */
  __pyx_v_res->y = (-__pyx_v_a->y);

  /* "ezdxf/acc/vector.pyx":739
 *     res.x = -a.x
 *     res.y = -a.y
 *     res.z = -a.z             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  __pyx_v_res->z = (-__pyx_v_a->z);

  /* "ezdxf/acc/vector.pyx":740
 *     res.y = -a.y
 *     res.z = -a.z
 *     return res             # <<<<<<<<<<<<<<
 * 
 * cdef double v3_dot(Vec3 a, Vec3 b):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":735
 *     return res
 * 
 * cdef Vec3 v3_reverse(Vec3 a):             # <<<<<<<<<<<<<<
 *     cdef Vec3 res = Vec3()
 *     res.x = -a.x
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.v3_reverse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":742
 *     return res
 * 
 * cdef double v3_dot(Vec3 a, Vec3 b):             # <<<<<<<<<<<<<<
 *     return a.x * b.x + a.y * b.y + a.z * b.z
 * 
 */

static double __pyx_f_5ezdxf_3acc_6vector_v3_dot(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_a, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_b) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("v3_dot", 0);

  /* "ezdxf/acc/vector.pyx":743
 * 
 * cdef double v3_dot(Vec3 a, Vec3 b):
 *     return a.x * b.x + a.y * b.y + a.z * b.z             # <<<<<<<<<<<<<<
 * 
 * cdef Vec3 v3_cross(Vec3 a, Vec3 b):
 */
  __pyx_r = (((__pyx_v_a->x * __pyx_v_b->x) + (__pyx_v_a->y * __pyx_v_b->y)) + (__pyx_v_a->z * __pyx_v_b->z));
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":742
 *     return res
 * 
 * cdef double v3_dot(Vec3 a, Vec3 b):             # <<<<<<<<<<<<<<
 *     return a.x * b.x + a.y * b.y + a.z * b.z
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":745
 *     return a.x * b.x + a.y * b.y + a.z * b.z
 * 
 * cdef Vec3 v3_cross(Vec3 a, Vec3 b):             # <<<<<<<<<<<<<<
 *     res = Vec3()
 *     res.x = a.y * b.z - a.z * b.y
 */

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_f_5ezdxf_3acc_6vector_v3_cross(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_a, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_b) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_res = NULL;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("v3_cross", 0);

  /* "ezdxf/acc/vector.pyx":746
 * 
 * cdef Vec3 v3_cross(Vec3 a, Vec3 b):
 *     res = Vec3()             # <<<<<<<<<<<<<<
 *     res.x = a.y * b.z - a.z * b.y
 *     res.y = a.z * b.x - a.x * b.z
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":747
 * cdef Vec3 v3_cross(Vec3 a, Vec3 b):
 *     res = Vec3()
 *     res.x = a.y * b.z - a.z * b.y             # <<<<<<<<<<<<<<
 *     res.y = a.z * b.x - a.x * b.z
 *     res.z = a.x * b.y - a.y * b.x
 */
  __pyx_v_res->x = ((__pyx_v_a->y * __pyx_v_b->z) - (__pyx_v_a->z * __pyx_v_b->y));

  /* "ezdxf/acc/vector.pyx":748
 *     res = Vec3()
 *     res.x = a.y * b.z - a.z * b.y
 *     res.y = a.z * b.x - a.x * b.z             # <<<<<<<<<<<<<<
 *     res.z = a.x * b.y - a.y * b.x
 *     return res
 */
  __pyx_v_res->y = ((__pyx_v_a->z * __pyx_v_b->x) - (__pyx_v_a->x * __pyx_v_b->z));

  /* "ezdxf/acc/vector.pyx":749
 *     res.x = a.y * b.z - a.z * b.y
 *     res.y = a.z * b.x - a.x * b.z
 *     res.z = a.x * b.y - a.y * b.x             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  __pyx_v_res->z = ((__pyx_v_a->x * __pyx_v_b->y) - (__pyx_v_a->y * __pyx_v_b->x));

  /* "ezdxf/acc/vector.pyx":750
 *     res.y = a.z * b.x - a.x * b.z
 *     res.z = a.x * b.y - a.y * b.x
 *     return res             # <<<<<<<<<<<<<<
 * 
 * cdef inline double v3_magnitude_sqr(Vec3 a):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":745
 *     return a.x * b.x + a.y * b.y + a.z * b.z
 * 
 * cdef Vec3 v3_cross(Vec3 a, Vec3 b):             # <<<<<<<<<<<<<<
 *     res = Vec3()
 *     res.x = a.y * b.z - a.z * b.y
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.v3_cross", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":752
 *     return res
 * 
 * cdef inline double v3_magnitude_sqr(Vec3 a):             # <<<<<<<<<<<<<<
 *     return a.x * a.x + a.y * a.y + a.z * a.z
 * 
 */

static CYTHON_INLINE double __pyx_f_5ezdxf_3acc_6vector_v3_magnitude_sqr(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_a) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("v3_magnitude_sqr", 0);

  /* "ezdxf/acc/vector.pyx":753
 * 
 * cdef inline double v3_magnitude_sqr(Vec3 a):
 *     return a.x * a.x + a.y * a.y + a.z * a.z             # <<<<<<<<<<<<<<
 * 
 * cdef inline double v3_magnitude(Vec3 a):
 */
  __pyx_r = (((__pyx_v_a->x * __pyx_v_a->x) + (__pyx_v_a->y * __pyx_v_a->y)) + (__pyx_v_a->z * __pyx_v_a->z));
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":752
 *     return res
 * 
 * cdef inline double v3_magnitude_sqr(Vec3 a):             # <<<<<<<<<<<<<<
 *     return a.x * a.x + a.y * a.y + a.z * a.z
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":755
 *     return a.x * a.x + a.y * a.y + a.z * a.z
 * 
 * cdef inline double v3_magnitude(Vec3 a):             # <<<<<<<<<<<<<<
 *     return sqrt(v3_magnitude_sqr(a))
 * 
 */

static CYTHON_INLINE double __pyx_f_5ezdxf_3acc_6vector_v3_magnitude(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_a) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("v3_magnitude", 0);

  /* "ezdxf/acc/vector.pyx":756
 * 
 * cdef inline double v3_magnitude(Vec3 a):
 *     return sqrt(v3_magnitude_sqr(a))             # <<<<<<<<<<<<<<
 * 
 * cdef double v3_dist(Vec3 a, Vec3 b):
 */
  __pyx_r = sqrt(__pyx_f_5ezdxf_3acc_6vector_v3_magnitude_sqr(__pyx_v_a));
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":755
 *     return a.x * a.x + a.y * a.y + a.z * a.z
 * 
 * cdef inline double v3_magnitude(Vec3 a):             # <<<<<<<<<<<<<<
 *     return sqrt(v3_magnitude_sqr(a))
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":758
 *     return sqrt(v3_magnitude_sqr(a))
 * 
 * cdef double v3_dist(Vec3 a, Vec3 b):             # <<<<<<<<<<<<<<
 *     cdef double dx = a.x - b.x
 *     cdef double dy = a.y - b.y
 */

static double __pyx_f_5ezdxf_3acc_6vector_v3_dist(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_a, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_b) {
  double __pyx_v_dx;
  double __pyx_v_dy;
  double __pyx_v_dz;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("v3_dist", 0);

  /* "ezdxf/acc/vector.pyx":759
 * 
 * cdef double v3_dist(Vec3 a, Vec3 b):
 *     cdef double dx = a.x - b.x             # <<<<<<<<<<<<<<
 *     cdef double dy = a.y - b.y
 *     cdef double dz = a.z - b.z
 */
  __pyx_v_dx = (__pyx_v_a->x - __pyx_v_b->x);

  /* "ezdxf/acc/vector.pyx":760
 * cdef double v3_dist(Vec3 a, Vec3 b):
 *     cdef double dx = a.x - b.x
 *     cdef double dy = a.y - b.y             # <<<<<<<<<<<<<<
 *     cdef double dz = a.z - b.z
 *     return sqrt(dx * dx + dy * dy + dz * dz)
 */
  __pyx_v_dy = (__pyx_v_a->y - __pyx_v_b->y);

  /* "ezdxf/acc/vector.pyx":761
 *     cdef double dx = a.x - b.x
 *     cdef double dy = a.y - b.y
 *     cdef double dz = a.z - b.z             # <<<<<<<<<<<<<<
 *     return sqrt(dx * dx + dy * dy + dz * dz)
 * 
 */
  __pyx_v_dz = (__pyx_v_a->z - __pyx_v_b->z);

  /* "ezdxf/acc/vector.pyx":762
 *     cdef double dy = a.y - b.y
 *     cdef double dz = a.z - b.z
 *     return sqrt(dx * dx + dy * dy + dz * dz)             # <<<<<<<<<<<<<<
 * 
 * cdef Vec3 v3_from_angle(double angle, double length):
 */
  __pyx_r = sqrt((((__pyx_v_dx * __pyx_v_dx) + (__pyx_v_dy * __pyx_v_dy)) + (__pyx_v_dz * __pyx_v_dz)));
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":758
 *     return sqrt(v3_magnitude_sqr(a))
 * 
 * cdef double v3_dist(Vec3 a, Vec3 b):             # <<<<<<<<<<<<<<
 *     cdef double dx = a.x - b.x
 *     cdef double dy = a.y - b.y
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":764
 *     return sqrt(dx * dx + dy * dy + dz * dz)
 * 
 * cdef Vec3 v3_from_angle(double angle, double length):             # <<<<<<<<<<<<<<
 *     cdef Vec3 res = Vec3()
 *     res.x = cos(angle) * length
 */

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_f_5ezdxf_3acc_6vector_v3_from_angle(double __pyx_v_angle, double __pyx_v_length) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_res = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("v3_from_angle", 0);

  /* "ezdxf/acc/vector.pyx":765
 * 
 * cdef Vec3 v3_from_angle(double angle, double length):
 *     cdef Vec3 res = Vec3()             # <<<<<<<<<<<<<<
 *     res.x = cos(angle) * length
 *     res.y = sin(angle) * length
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":766
 * cdef Vec3 v3_from_angle(double angle, double length):
 *     cdef Vec3 res = Vec3()
 *     res.x = cos(angle) * length             # <<<<<<<<<<<<<<
 *     res.y = sin(angle) * length
 *     return res
 */
  __pyx_v_res->x = (cos(__pyx_v_angle) * __pyx_v_length);

  /* "ezdxf/acc/vector.pyx":767
 *     cdef Vec3 res = Vec3()
 *     res.x = cos(angle) * length
 *     res.y = sin(angle) * length             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  __pyx_v_res->y = (sin(__pyx_v_angle) * __pyx_v_length);

  /* "ezdxf/acc/vector.pyx":768
 *     res.x = cos(angle) * length
 *     res.y = sin(angle) * length
 *     return res             # <<<<<<<<<<<<<<
 * 
 * cdef double v3_angle_between(Vec3 a, Vec3 b) except -1000:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":764
 *     return sqrt(dx * dx + dy * dy + dz * dz)
 * 
 * cdef Vec3 v3_from_angle(double angle, double length):             # <<<<<<<<<<<<<<
 *     cdef Vec3 res = Vec3()
 *     res.x = cos(angle) * length
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.v3_from_angle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":770
 *     return res
 * 
 * cdef double v3_angle_between(Vec3 a, Vec3 b) except -1000:             # <<<<<<<<<<<<<<
 *     cdef double cos_theta = v3_dot(v3_normalize(a, 1.0), v3_normalize(b, 1.0))
 *     # avoid domain errors caused by floating point imprecision:
 */

static double __pyx_f_5ezdxf_3acc_6vector_v3_angle_between(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_a, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_b) {
  double __pyx_v_cos_theta;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("v3_angle_between", 0);

  /* "ezdxf/acc/vector.pyx":771
 * 
 * cdef double v3_angle_between(Vec3 a, Vec3 b) except -1000:
 *     cdef double cos_theta = v3_dot(v3_normalize(a, 1.0), v3_normalize(b, 1.0))             # <<<<<<<<<<<<<<
 *     # avoid domain errors caused by floating point imprecision:
 *     if cos_theta < -1.0:
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_normalize(__pyx_v_a, 1.0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_normalize(__pyx_v_b, 1.0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_cos_theta = __pyx_f_5ezdxf_3acc_6vector_v3_dot(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1), ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_2));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ezdxf/acc/vector.pyx":773
 *     cdef double cos_theta = v3_dot(v3_normalize(a, 1.0), v3_normalize(b, 1.0))
 *     # avoid domain errors caused by floating point imprecision:
 *     if cos_theta < -1.0:             # <<<<<<<<<<<<<<
 *         cos_theta = -1.0
 *     elif cos_theta > 1.0:
 */
  __pyx_t_3 = ((__pyx_v_cos_theta < -1.0) != 0);
  if (__pyx_t_3) {

    /* "ezdxf/acc/vector.pyx":774
 *     # avoid domain errors caused by floating point imprecision:
 *     if cos_theta < -1.0:
 *         cos_theta = -1.0             # <<<<<<<<<<<<<<
 *     elif cos_theta > 1.0:
 *         cos_theta = 1.0
 */
    __pyx_v_cos_theta = -1.0;

    /* "ezdxf/acc/vector.pyx":773
 *     cdef double cos_theta = v3_dot(v3_normalize(a, 1.0), v3_normalize(b, 1.0))
 *     # avoid domain errors caused by floating point imprecision:
 *     if cos_theta < -1.0:             # <<<<<<<<<<<<<<
 *         cos_theta = -1.0
 *     elif cos_theta > 1.0:
 */
    goto __pyx_L3;
  }

  /* "ezdxf/acc/vector.pyx":775
 *     if cos_theta < -1.0:
 *         cos_theta = -1.0
 *     elif cos_theta > 1.0:             # <<<<<<<<<<<<<<
 *         cos_theta = 1.0
 *     return acos(cos_theta)
 */
  __pyx_t_3 = ((__pyx_v_cos_theta > 1.0) != 0);
  if (__pyx_t_3) {

    /* "ezdxf/acc/vector.pyx":776
 *         cos_theta = -1.0
 *     elif cos_theta > 1.0:
 *         cos_theta = 1.0             # <<<<<<<<<<<<<<
 *     return acos(cos_theta)
 * 
 */
    __pyx_v_cos_theta = 1.0;

    /* "ezdxf/acc/vector.pyx":775
 *     if cos_theta < -1.0:
 *         cos_theta = -1.0
 *     elif cos_theta > 1.0:             # <<<<<<<<<<<<<<
 *         cos_theta = 1.0
 *     return acos(cos_theta)
 */
  }
  __pyx_L3:;

  /* "ezdxf/acc/vector.pyx":777
 *     elif cos_theta > 1.0:
 *         cos_theta = 1.0
 *     return acos(cos_theta)             # <<<<<<<<<<<<<<
 * 
 * cdef double v3_angle_about(Vec3 a, Vec3 base, Vec3 target):
 */
  __pyx_r = acos(__pyx_v_cos_theta);
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":770
 *     return res
 * 
 * cdef double v3_angle_between(Vec3 a, Vec3 b) except -1000:             # <<<<<<<<<<<<<<
 *     cdef double cos_theta = v3_dot(v3_normalize(a, 1.0), v3_normalize(b, 1.0))
 *     # avoid domain errors caused by floating point imprecision:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ezdxf.acc.vector.v3_angle_between", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1000.0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":779
 *     return acos(cos_theta)
 * 
 * cdef double v3_angle_about(Vec3 a, Vec3 base, Vec3 target):             # <<<<<<<<<<<<<<
 *     cdef Vec3 x_axis = v3_normalize(v3_sub(base, v3_project(a, base)), 1.0)
 *     cdef Vec3 y_axis = v3_normalize(v3_cross(a, x_axis), 1.0)
 */

static double __pyx_f_5ezdxf_3acc_6vector_v3_angle_about(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_a, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_base, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_target) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_x_axis = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_y_axis = 0;
  double __pyx_v_target_projected_x;
  double __pyx_v_target_projected_y;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("v3_angle_about", 0);

  /* "ezdxf/acc/vector.pyx":780
 * 
 * cdef double v3_angle_about(Vec3 a, Vec3 base, Vec3 target):
 *     cdef Vec3 x_axis = v3_normalize(v3_sub(base, v3_project(a, base)), 1.0)             # <<<<<<<<<<<<<<
 *     cdef Vec3 y_axis = v3_normalize(v3_cross(a, x_axis), 1.0)
 *     cdef double target_projected_x = v3_dot(x_axis, target)
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_project(__pyx_v_a, __pyx_v_base)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_sub(__pyx_v_base, ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_normalize(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_2), 1.0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_x_axis = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":781
 * cdef double v3_angle_about(Vec3 a, Vec3 base, Vec3 target):
 *     cdef Vec3 x_axis = v3_normalize(v3_sub(base, v3_project(a, base)), 1.0)
 *     cdef Vec3 y_axis = v3_normalize(v3_cross(a, x_axis), 1.0)             # <<<<<<<<<<<<<<
 *     cdef double target_projected_x = v3_dot(x_axis, target)
 *     cdef double target_projected_y = v3_dot(y_axis, target)
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_cross(__pyx_v_a, __pyx_v_x_axis)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_normalize(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1), 1.0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_y_axis = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ezdxf/acc/vector.pyx":782
 *     cdef Vec3 x_axis = v3_normalize(v3_sub(base, v3_project(a, base)), 1.0)
 *     cdef Vec3 y_axis = v3_normalize(v3_cross(a, x_axis), 1.0)
 *     cdef double target_projected_x = v3_dot(x_axis, target)             # <<<<<<<<<<<<<<
 *     cdef double target_projected_y = v3_dot(y_axis, target)
 *     return normalize_rad_angle(atan2(target_projected_y, target_projected_x))
 */
  __pyx_v_target_projected_x = __pyx_f_5ezdxf_3acc_6vector_v3_dot(__pyx_v_x_axis, __pyx_v_target);

  /* "ezdxf/acc/vector.pyx":783
 *     cdef Vec3 y_axis = v3_normalize(v3_cross(a, x_axis), 1.0)
 *     cdef double target_projected_x = v3_dot(x_axis, target)
 *     cdef double target_projected_y = v3_dot(y_axis, target)             # <<<<<<<<<<<<<<
 *     return normalize_rad_angle(atan2(target_projected_y, target_projected_x))
 * 
 */
  __pyx_v_target_projected_y = __pyx_f_5ezdxf_3acc_6vector_v3_dot(__pyx_v_y_axis, __pyx_v_target);

  /* "ezdxf/acc/vector.pyx":784
 *     cdef double target_projected_x = v3_dot(x_axis, target)
 *     cdef double target_projected_y = v3_dot(y_axis, target)
 *     return normalize_rad_angle(atan2(target_projected_y, target_projected_x))             # <<<<<<<<<<<<<<
 * 
 * cdef Vec3 v3_normalize(Vec3 a, double length):
 */
  __pyx_r = __pyx_f_5ezdxf_3acc_6vector_normalize_rad_angle(atan2(__pyx_v_target_projected_y, __pyx_v_target_projected_x));
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":779
 *     return acos(cos_theta)
 * 
 * cdef double v3_angle_about(Vec3 a, Vec3 base, Vec3 target):             # <<<<<<<<<<<<<<
 *     cdef Vec3 x_axis = v3_normalize(v3_sub(base, v3_project(a, base)), 1.0)
 *     cdef Vec3 y_axis = v3_normalize(v3_cross(a, x_axis), 1.0)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("ezdxf.acc.vector.v3_angle_about", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_x_axis);
  __Pyx_XDECREF((PyObject *)__pyx_v_y_axis);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":786
 *     return normalize_rad_angle(atan2(target_projected_y, target_projected_x))
 * 
 * cdef Vec3 v3_normalize(Vec3 a, double length):             # <<<<<<<<<<<<<<
 *     cdef double factor = length / v3_magnitude(a)
 *     cdef Vec3 res = Vec3()
 */

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_f_5ezdxf_3acc_6vector_v3_normalize(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_a, double __pyx_v_length) {
  double __pyx_v_factor;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_res = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("v3_normalize", 0);

  /* "ezdxf/acc/vector.pyx":787
 * 
 * cdef Vec3 v3_normalize(Vec3 a, double length):
 *     cdef double factor = length / v3_magnitude(a)             # <<<<<<<<<<<<<<
 *     cdef Vec3 res = Vec3()
 *     res.x = a.x * factor
 */
  __pyx_t_1 = __pyx_f_5ezdxf_3acc_6vector_v3_magnitude(__pyx_v_a);
  if (unlikely(__pyx_t_1 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 787, __pyx_L1_error)
  }
  __pyx_v_factor = (__pyx_v_length / __pyx_t_1);

  /* "ezdxf/acc/vector.pyx":788
 * cdef Vec3 v3_normalize(Vec3 a, double length):
 *     cdef double factor = length / v3_magnitude(a)
 *     cdef Vec3 res = Vec3()             # <<<<<<<<<<<<<<
 *     res.x = a.x * factor
 *     res.y = a.y * factor
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_res = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ezdxf/acc/vector.pyx":789
 *     cdef double factor = length / v3_magnitude(a)
 *     cdef Vec3 res = Vec3()
 *     res.x = a.x * factor             # <<<<<<<<<<<<<<
 *     res.y = a.y * factor
 *     res.z = a.z * factor
 */
  __pyx_v_res->x = (__pyx_v_a->x * __pyx_v_factor);

  /* "ezdxf/acc/vector.pyx":790
 *     cdef Vec3 res = Vec3()
 *     res.x = a.x * factor
 *     res.y = a.y * factor             # <<<<<<<<<<<<<<
 *     res.z = a.z * factor
 *     return res
 */
  __pyx_v_res->y = (__pyx_v_a->y * __pyx_v_factor);

  /* "ezdxf/acc/vector.pyx":791
 *     res.x = a.x * factor
 *     res.y = a.y * factor
 *     res.z = a.z * factor             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  __pyx_v_res->z = (__pyx_v_a->z * __pyx_v_factor);

  /* "ezdxf/acc/vector.pyx":792
 *     res.y = a.y * factor
 *     res.z = a.z * factor
 *     return res             # <<<<<<<<<<<<<<
 * 
 * cdef Vec3 v3_lerp(Vec3 a, Vec3 b, double factor):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":786
 *     return normalize_rad_angle(atan2(target_projected_y, target_projected_x))
 * 
 * cdef Vec3 v3_normalize(Vec3 a, double length):             # <<<<<<<<<<<<<<
 *     cdef double factor = length / v3_magnitude(a)
 *     cdef Vec3 res = Vec3()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ezdxf.acc.vector.v3_normalize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":794
 *     return res
 * 
 * cdef Vec3 v3_lerp(Vec3 a, Vec3 b, double factor):             # <<<<<<<<<<<<<<
 *     cdef Vec3 res = Vec3()
 *     res.x = a.x + (b.x - a.x) * factor
 */

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_f_5ezdxf_3acc_6vector_v3_lerp(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_a, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_b, double __pyx_v_factor) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_res = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("v3_lerp", 0);

  /* "ezdxf/acc/vector.pyx":795
 * 
 * cdef Vec3 v3_lerp(Vec3 a, Vec3 b, double factor):
 *     cdef Vec3 res = Vec3()             # <<<<<<<<<<<<<<
 *     res.x = a.x + (b.x - a.x) * factor
 *     res.y = a.y + (b.y - a.y) * factor
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":796
 * cdef Vec3 v3_lerp(Vec3 a, Vec3 b, double factor):
 *     cdef Vec3 res = Vec3()
 *     res.x = a.x + (b.x - a.x) * factor             # <<<<<<<<<<<<<<
 *     res.y = a.y + (b.y - a.y) * factor
 *     res.z = a.z + (b.z - a.z) * factor
 */
  __pyx_v_res->x = (__pyx_v_a->x + ((__pyx_v_b->x - __pyx_v_a->x) * __pyx_v_factor));

  /* "ezdxf/acc/vector.pyx":797
 *     cdef Vec3 res = Vec3()
 *     res.x = a.x + (b.x - a.x) * factor
 *     res.y = a.y + (b.y - a.y) * factor             # <<<<<<<<<<<<<<
 *     res.z = a.z + (b.z - a.z) * factor
 *     return res
 */
  __pyx_v_res->y = (__pyx_v_a->y + ((__pyx_v_b->y - __pyx_v_a->y) * __pyx_v_factor));

  /* "ezdxf/acc/vector.pyx":798
 *     res.x = a.x + (b.x - a.x) * factor
 *     res.y = a.y + (b.y - a.y) * factor
 *     res.z = a.z + (b.z - a.z) * factor             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  __pyx_v_res->z = (__pyx_v_a->z + ((__pyx_v_b->z - __pyx_v_a->z) * __pyx_v_factor));

  /* "ezdxf/acc/vector.pyx":799
 *     res.y = a.y + (b.y - a.y) * factor
 *     res.z = a.z + (b.z - a.z) * factor
 *     return res             # <<<<<<<<<<<<<<
 * 
 * cdef Vec3 v3_ortho(Vec3 a, bint ccw):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":794
 *     return res
 * 
 * cdef Vec3 v3_lerp(Vec3 a, Vec3 b, double factor):             # <<<<<<<<<<<<<<
 *     cdef Vec3 res = Vec3()
 *     res.x = a.x + (b.x - a.x) * factor
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.v3_lerp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":801
 *     return res
 * 
 * cdef Vec3 v3_ortho(Vec3 a, bint ccw):             # <<<<<<<<<<<<<<
 *     cdef Vec3 res = Vec3()
 *     res.z = a.z
 */

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_f_5ezdxf_3acc_6vector_v3_ortho(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_a, int __pyx_v_ccw) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_res = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("v3_ortho", 0);

  /* "ezdxf/acc/vector.pyx":802
 * 
 * cdef Vec3 v3_ortho(Vec3 a, bint ccw):
 *     cdef Vec3 res = Vec3()             # <<<<<<<<<<<<<<
 *     res.z = a.z
 *     if ccw:
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":803
 * cdef Vec3 v3_ortho(Vec3 a, bint ccw):
 *     cdef Vec3 res = Vec3()
 *     res.z = a.z             # <<<<<<<<<<<<<<
 *     if ccw:
 *         res.x = -a.y
 */
  __pyx_t_2 = __pyx_v_a->z;
  __pyx_v_res->z = __pyx_t_2;

  /* "ezdxf/acc/vector.pyx":804
 *     cdef Vec3 res = Vec3()
 *     res.z = a.z
 *     if ccw:             # <<<<<<<<<<<<<<
 *         res.x = -a.y
 *         res.y = a.x
 */
  __pyx_t_3 = (__pyx_v_ccw != 0);
  if (__pyx_t_3) {

    /* "ezdxf/acc/vector.pyx":805
 *     res.z = a.z
 *     if ccw:
 *         res.x = -a.y             # <<<<<<<<<<<<<<
 *         res.y = a.x
 *     else:
 */
    __pyx_v_res->x = (-__pyx_v_a->y);

    /* "ezdxf/acc/vector.pyx":806
 *     if ccw:
 *         res.x = -a.y
 *         res.y = a.x             # <<<<<<<<<<<<<<
 *     else:
 *         res.x = a.y
 */
    __pyx_t_2 = __pyx_v_a->x;
    __pyx_v_res->y = __pyx_t_2;

    /* "ezdxf/acc/vector.pyx":804
 *     cdef Vec3 res = Vec3()
 *     res.z = a.z
 *     if ccw:             # <<<<<<<<<<<<<<
 *         res.x = -a.y
 *         res.y = a.x
 */
    goto __pyx_L3;
  }

  /* "ezdxf/acc/vector.pyx":808
 *         res.y = a.x
 *     else:
 *         res.x = a.y             # <<<<<<<<<<<<<<
 *         res.y = -a.x
 *     return res
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_a->y;
    __pyx_v_res->x = __pyx_t_2;

    /* "ezdxf/acc/vector.pyx":809
 *     else:
 *         res.x = a.y
 *         res.y = -a.x             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
    __pyx_v_res->y = (-__pyx_v_a->x);
  }
  __pyx_L3:;

  /* "ezdxf/acc/vector.pyx":810
 *         res.x = a.y
 *         res.y = -a.x
 *     return res             # <<<<<<<<<<<<<<
 * 
 * cdef Vec3 v3_project(Vec3 a, Vec3 b):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":801
 *     return res
 * 
 * cdef Vec3 v3_ortho(Vec3 a, bint ccw):             # <<<<<<<<<<<<<<
 *     cdef Vec3 res = Vec3()
 *     res.z = a.z
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.v3_ortho", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":812
 *     return res
 * 
 * cdef Vec3 v3_project(Vec3 a, Vec3 b):             # <<<<<<<<<<<<<<
 *     cdef Vec3 uv = v3_normalize(a, 1.0)
 *     return v3_mul(uv, v3_dot(uv, b))
 */

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_f_5ezdxf_3acc_6vector_v3_project(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_a, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_b) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_uv = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("v3_project", 0);

  /* "ezdxf/acc/vector.pyx":813
 * 
 * cdef Vec3 v3_project(Vec3 a, Vec3 b):
 *     cdef Vec3 uv = v3_normalize(a, 1.0)             # <<<<<<<<<<<<<<
 *     return v3_mul(uv, v3_dot(uv, b))
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_normalize(__pyx_v_a, 1.0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_uv = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":814
 * cdef Vec3 v3_project(Vec3 a, Vec3 b):
 *     cdef Vec3 uv = v3_normalize(a, 1.0)
 *     return v3_mul(uv, v3_dot(uv, b))             # <<<<<<<<<<<<<<
 * 
 * cdef bint v3_isclose(Vec3 a, Vec3 b, double rel_tol, double abs_tol):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_mul(__pyx_v_uv, __pyx_f_5ezdxf_3acc_6vector_v3_dot(__pyx_v_uv, __pyx_v_b))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":812
 *     return res
 * 
 * cdef Vec3 v3_project(Vec3 a, Vec3 b):             # <<<<<<<<<<<<<<
 *     cdef Vec3 uv = v3_normalize(a, 1.0)
 *     return v3_mul(uv, v3_dot(uv, b))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.v3_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_uv);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":816
 *     return v3_mul(uv, v3_dot(uv, b))
 * 
 * cdef bint v3_isclose(Vec3 a, Vec3 b, double rel_tol, double abs_tol):             # <<<<<<<<<<<<<<
 *     return isclose(a.x, b.x, rel_tol, abs_tol) and \
 *            isclose(a.y, b.y, rel_tol, abs_tol) and \
 */

static int __pyx_f_5ezdxf_3acc_6vector_v3_isclose(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_a, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_b, double __pyx_v_rel_tol, double __pyx_v_abs_tol) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("v3_isclose", 0);

  /* "ezdxf/acc/vector.pyx":817
 * 
 * cdef bint v3_isclose(Vec3 a, Vec3 b, double rel_tol, double abs_tol):
 *     return isclose(a.x, b.x, rel_tol, abs_tol) and \             # <<<<<<<<<<<<<<
 *            isclose(a.y, b.y, rel_tol, abs_tol) and \
 *            isclose(a.z, b.z, rel_tol, abs_tol)
 */
  __pyx_t_2 = (__pyx_f_5ezdxf_3acc_6vector_isclose(__pyx_v_a->x, __pyx_v_b->x, __pyx_v_rel_tol, __pyx_v_abs_tol) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }

  /* "ezdxf/acc/vector.pyx":818
 * cdef bint v3_isclose(Vec3 a, Vec3 b, double rel_tol, double abs_tol):
 *     return isclose(a.x, b.x, rel_tol, abs_tol) and \
 *            isclose(a.y, b.y, rel_tol, abs_tol) and \             # <<<<<<<<<<<<<<
 *            isclose(a.z, b.z, rel_tol, abs_tol)
 * 
 */
  __pyx_t_2 = (__pyx_f_5ezdxf_3acc_6vector_isclose(__pyx_v_a->y, __pyx_v_b->y, __pyx_v_rel_tol, __pyx_v_abs_tol) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }

  /* "ezdxf/acc/vector.pyx":819
 *     return isclose(a.x, b.x, rel_tol, abs_tol) and \
 *            isclose(a.y, b.y, rel_tol, abs_tol) and \
 *            isclose(a.z, b.z, rel_tol, abs_tol)             # <<<<<<<<<<<<<<
 * 
 * cdef Vec3 v3_from_cpp_vec3(CppVec3 c):
 */
  __pyx_t_2 = (__pyx_f_5ezdxf_3acc_6vector_isclose(__pyx_v_a->z, __pyx_v_b->z, __pyx_v_rel_tol, __pyx_v_abs_tol) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":816
 *     return v3_mul(uv, v3_dot(uv, b))
 * 
 * cdef bint v3_isclose(Vec3 a, Vec3 b, double rel_tol, double abs_tol):             # <<<<<<<<<<<<<<
 *     return isclose(a.x, b.x, rel_tol, abs_tol) and \
 *            isclose(a.y, b.y, rel_tol, abs_tol) and \
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":821
 *            isclose(a.z, b.z, rel_tol, abs_tol)
 * 
 * cdef Vec3 v3_from_cpp_vec3(CppVec3 c):             # <<<<<<<<<<<<<<
 *     cdef Vec3 v = Vec3()
 *     v.x = c.x
 */

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_f_5ezdxf_3acc_6vector_v3_from_cpp_vec3(CppVec3 __pyx_v_c) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_v = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("v3_from_cpp_vec3", 0);

  /* "ezdxf/acc/vector.pyx":822
 * 
 * cdef Vec3 v3_from_cpp_vec3(CppVec3 c):
 *     cdef Vec3 v = Vec3()             # <<<<<<<<<<<<<<
 *     v.x = c.x
 *     v.y = c.y
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_v = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":823
 * cdef Vec3 v3_from_cpp_vec3(CppVec3 c):
 *     cdef Vec3 v = Vec3()
 *     v.x = c.x             # <<<<<<<<<<<<<<
 *     v.y = c.y
 *     v.z = c.z
 */
  __pyx_t_2 = __pyx_v_c.x;
  __pyx_v_v->x = __pyx_t_2;

  /* "ezdxf/acc/vector.pyx":824
 *     cdef Vec3 v = Vec3()
 *     v.x = c.x
 *     v.y = c.y             # <<<<<<<<<<<<<<
 *     v.z = c.z
 *     return v
 */
  __pyx_t_2 = __pyx_v_c.y;
  __pyx_v_v->y = __pyx_t_2;

  /* "ezdxf/acc/vector.pyx":825
 *     v.x = c.x
 *     v.y = c.y
 *     v.z = c.z             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
  __pyx_t_2 = __pyx_v_c.z;
  __pyx_v_v->z = __pyx_t_2;

  /* "ezdxf/acc/vector.pyx":826
 *     v.y = c.y
 *     v.z = c.z
 *     return v             # <<<<<<<<<<<<<<
 * 
 * def distance(p1: 'Vertex', p2: 'Vertex') -> float:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_v));
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":821
 *            isclose(a.z, b.z, rel_tol, abs_tol)
 * 
 * cdef Vec3 v3_from_cpp_vec3(CppVec3 c):             # <<<<<<<<<<<<<<
 *     cdef Vec3 v = Vec3()
 *     v.x = c.x
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.v3_from_cpp_vec3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_v);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":828
 *     return v
 * 
 * def distance(p1: 'Vertex', p2: 'Vertex') -> float:             # <<<<<<<<<<<<<<
 *     cdef Vec3 a = Vec3(p1)
 *     cdef Vec3 b = Vec3(p2)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_5distance(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5ezdxf_3acc_6vector_5distance = {"distance", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_5distance, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5ezdxf_3acc_6vector_5distance(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_p1 = 0;
  PyObject *__pyx_v_p2 = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distance (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p1,&__pyx_n_s_p2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("distance", 1, 2, 2, 1); __PYX_ERR(0, 828, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "distance") < 0)) __PYX_ERR(0, 828, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_p1 = values[0];
    __pyx_v_p2 = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("distance", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 828, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_4distance(__pyx_self, __pyx_v_p1, __pyx_v_p2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_6vector_4distance(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_p1, PyObject *__pyx_v_p2) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_a = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_b = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance", 0);

  /* "ezdxf/acc/vector.pyx":829
 * 
 * def distance(p1: 'Vertex', p2: 'Vertex') -> float:
 *     cdef Vec3 a = Vec3(p1)             # <<<<<<<<<<<<<<
 *     cdef Vec3 b = Vec3(p2)
 *     return v3_dist(a, b)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_v_p1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_a = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":830
 * def distance(p1: 'Vertex', p2: 'Vertex') -> float:
 *     cdef Vec3 a = Vec3(p1)
 *     cdef Vec3 b = Vec3(p2)             # <<<<<<<<<<<<<<
 *     return v3_dist(a, b)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_v_p2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 830, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_b = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":831
 *     cdef Vec3 a = Vec3(p1)
 *     cdef Vec3 b = Vec3(p2)
 *     return v3_dist(a, b)             # <<<<<<<<<<<<<<
 * 
 * def lerp(p1: 'Vertex', p2: 'Vertex', double factor = 0.5) -> 'Vec3':
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_5ezdxf_3acc_6vector_v3_dist(__pyx_v_a, __pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":828
 *     return v
 * 
 * def distance(p1: 'Vertex', p2: 'Vertex') -> float:             # <<<<<<<<<<<<<<
 *     cdef Vec3 a = Vec3(p1)
 *     cdef Vec3 b = Vec3(p2)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_a);
  __Pyx_XDECREF((PyObject *)__pyx_v_b);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/vector.pyx":833
 *     return v3_dist(a, b)
 * 
 * def lerp(p1: 'Vertex', p2: 'Vertex', double factor = 0.5) -> 'Vec3':             # <<<<<<<<<<<<<<
 *     cdef Vec3 a = Vec3(p1)
 *     cdef Vec3 b = Vec3(p2)
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_7lerp(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5ezdxf_3acc_6vector_7lerp = {"lerp", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_7lerp, METH_VARARGS|METH_KEYWORDS, 0};
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_6vector_7lerp(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_p1 = 0;
  PyObject *__pyx_v_p2 = 0;
  double __pyx_v_factor;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lerp (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p1,&__pyx_n_s_p2,&__pyx_n_s_factor,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("lerp", 0, 2, 3, 1); __PYX_ERR(0, 833, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_factor);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "lerp") < 0)) __PYX_ERR(0, 833, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_p1 = values[0];
    __pyx_v_p2 = values[1];
    if (values[2]) {
      __pyx_v_factor = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_factor == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 833, __pyx_L3_error)
    } else {
      __pyx_v_factor = ((double)0.5);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lerp", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 833, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.vector.lerp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_6vector_6lerp(__pyx_self, __pyx_v_p1, __pyx_v_p2, __pyx_v_factor);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_6vector_6lerp(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_p1, PyObject *__pyx_v_p2, double __pyx_v_factor) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_a = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_b = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lerp", 0);

  /* "ezdxf/acc/vector.pyx":834
 * 
 * def lerp(p1: 'Vertex', p2: 'Vertex', double factor = 0.5) -> 'Vec3':
 *     cdef Vec3 a = Vec3(p1)             # <<<<<<<<<<<<<<
 *     cdef Vec3 b = Vec3(p2)
 *     return v3_lerp(a, b, factor)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_v_p1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_a = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":835
 * def lerp(p1: 'Vertex', p2: 'Vertex', double factor = 0.5) -> 'Vec3':
 *     cdef Vec3 a = Vec3(p1)
 *     cdef Vec3 b = Vec3(p2)             # <<<<<<<<<<<<<<
 *     return v3_lerp(a, b, factor)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_v_p2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_b = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":836
 *     cdef Vec3 a = Vec3(p1)
 *     cdef Vec3 b = Vec3(p2)
 *     return v3_lerp(a, b, factor)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_lerp(__pyx_v_a, __pyx_v_b, __pyx_v_factor)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/vector.pyx":833
 *     return v3_dist(a, b)
 * 
 * def lerp(p1: 'Vertex', p2: 'Vertex', double factor = 0.5) -> 'Vec3':             # <<<<<<<<<<<<<<
 *     cdef Vec3 a = Vec3(p1)
 *     cdef Vec3 b = Vec3(p2)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.vector.lerp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_a);
  __Pyx_XDECREF((PyObject *)__pyx_v_b);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_5ezdxf_3acc_6vector_Vec2 __pyx_vtable_5ezdxf_3acc_6vector_Vec2;

static PyObject *__pyx_tp_new_5ezdxf_3acc_6vector_Vec2(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)o);
  p->__pyx_vtab = __pyx_vtabptr_5ezdxf_3acc_6vector_Vec2;
  if (unlikely(__pyx_pw_5ezdxf_3acc_6vector_4Vec2_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5ezdxf_3acc_6vector_Vec2(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_5ezdxf_3acc_6vector_Vec2(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_tp_richcompare_5ezdxf_3acc_6vector_Vec2(PyObject *o1, PyObject *o2, int op) {
  switch (op) {
    case Py_EQ: {
      return __pyx_pw_5ezdxf_3acc_6vector_4Vec2_52__eq__(o1, o2);
    }
    case Py_LT: {
      return __pyx_pw_5ezdxf_3acc_6vector_4Vec2_54__lt__(o1, o2);
    }
    case Py_NE: {
      PyObject *ret;
      ret = __pyx_pw_5ezdxf_3acc_6vector_4Vec2_52__eq__(o1, o2);
      if (likely(ret && ret != Py_NotImplemented)) {
        int b = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);
        if (unlikely(b < 0)) return NULL;
        ret = (b) ? Py_False : Py_True;
        Py_INCREF(ret);
      }
      return ret;
    }
    default: {
      return __Pyx_NewRef(Py_NotImplemented);
    }
  }
}

static PyObject *__pyx_getprop_5ezdxf_3acc_6vector_4Vec2_vec3(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5ezdxf_3acc_6vector_4Vec2_4vec3_1__get__(o);
}

static PyObject *__pyx_getprop_5ezdxf_3acc_6vector_4Vec2_magnitude(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5ezdxf_3acc_6vector_4Vec2_9magnitude_1__get__(o);
}

static PyObject *__pyx_getprop_5ezdxf_3acc_6vector_4Vec2_is_null(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5ezdxf_3acc_6vector_4Vec2_7is_null_1__get__(o);
}

static PyObject *__pyx_getprop_5ezdxf_3acc_6vector_4Vec2_angle(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5ezdxf_3acc_6vector_4Vec2_5angle_1__get__(o);
}

static PyObject *__pyx_getprop_5ezdxf_3acc_6vector_4Vec2_angle_deg(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5ezdxf_3acc_6vector_4Vec2_9angle_deg_1__get__(o);
}

static PyObject *__pyx_getprop_5ezdxf_3acc_6vector_4Vec2_x(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5ezdxf_3acc_6vector_4Vec2_1x_1__get__(o);
}

static PyObject *__pyx_getprop_5ezdxf_3acc_6vector_4Vec2_y(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5ezdxf_3acc_6vector_4Vec2_1y_1__get__(o);
}

static PyMethodDef __pyx_methods_5ezdxf_3acc_6vector_Vec2[] = {
  {"__reduce__", (PyCFunction)__pyx_pw_5ezdxf_3acc_6vector_4Vec2_3__reduce__, METH_NOARGS, 0},
  {"round", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec2_5round, METH_VARARGS|METH_KEYWORDS, 0},
  {"list", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec2_7list, METH_VARARGS|METH_KEYWORDS, 0},
  {"tuple", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec2_9tuple, METH_VARARGS|METH_KEYWORDS, 0},
  {"generate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec2_11generate, METH_VARARGS|METH_KEYWORDS, 0},
  {"from_angle", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec2_13from_angle, METH_VARARGS|METH_KEYWORDS, 0},
  {"from_deg_angle", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec2_15from_deg_angle, METH_VARARGS|METH_KEYWORDS, 0},
  {"copy", (PyCFunction)__pyx_pw_5ezdxf_3acc_6vector_4Vec2_25copy, METH_NOARGS, 0},
  {"__copy__", (PyCFunction)__pyx_pw_5ezdxf_3acc_6vector_4Vec2_27__copy__, METH_NOARGS, 0},
  {"__deepcopy__", (PyCFunction)__pyx_pw_5ezdxf_3acc_6vector_4Vec2_29__deepcopy__, METH_O, 0},
  {"orthogonal", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec2_38orthogonal, METH_VARARGS|METH_KEYWORDS, 0},
  {"lerp", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec2_40lerp, METH_VARARGS|METH_KEYWORDS, 0},
  {"normalize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec2_42normalize, METH_VARARGS|METH_KEYWORDS, 0},
  {"project", (PyCFunction)__pyx_pw_5ezdxf_3acc_6vector_4Vec2_44project, METH_O, 0},
  {"isclose", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec2_50isclose, METH_VARARGS|METH_KEYWORDS, 0},
  {"__rmul__", (PyCFunction)__pyx_pw_5ezdxf_3acc_6vector_4Vec2_62__rmul__, METH_O, 0},
  {"dot", (PyCFunction)__pyx_pw_5ezdxf_3acc_6vector_4Vec2_66dot, METH_O, 0},
  {"det", (PyCFunction)__pyx_pw_5ezdxf_3acc_6vector_4Vec2_68det, METH_O, 0},
  {"distance", (PyCFunction)__pyx_pw_5ezdxf_3acc_6vector_4Vec2_70distance, METH_O, 0},
  {"angle_between", (PyCFunction)__pyx_pw_5ezdxf_3acc_6vector_4Vec2_72angle_between, METH_O, 0},
  {"rotate", (PyCFunction)__pyx_pw_5ezdxf_3acc_6vector_4Vec2_74rotate, METH_O, 0},
  {"rotate_deg", (PyCFunction)__pyx_pw_5ezdxf_3acc_6vector_4Vec2_76rotate_deg, METH_O, 0},
  {"sum", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec2_78sum, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5ezdxf_3acc_6vector_Vec2[] = {
  {(char *)"vec3", __pyx_getprop_5ezdxf_3acc_6vector_4Vec2_vec3, 0, (char *)0, 0},
  {(char *)"magnitude", __pyx_getprop_5ezdxf_3acc_6vector_4Vec2_magnitude, 0, (char *)0, 0},
  {(char *)"is_null", __pyx_getprop_5ezdxf_3acc_6vector_4Vec2_is_null, 0, (char *)0, 0},
  {(char *)"angle", __pyx_getprop_5ezdxf_3acc_6vector_4Vec2_angle, 0, (char *)0, 0},
  {(char *)"angle_deg", __pyx_getprop_5ezdxf_3acc_6vector_4Vec2_angle_deg, 0, (char *)0, 0},
  {(char *)"x", __pyx_getprop_5ezdxf_3acc_6vector_4Vec2_x, 0, (char *)0, 0},
  {(char *)"y", __pyx_getprop_5ezdxf_3acc_6vector_4Vec2_y, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Vec2 = {
  __pyx_pw_5ezdxf_3acc_6vector_4Vec2_56__add__, /*nb_add*/
  __pyx_pw_5ezdxf_3acc_6vector_4Vec2_58__sub__, /*nb_subtract*/
  __pyx_pw_5ezdxf_3acc_6vector_4Vec2_60__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  __pyx_pw_5ezdxf_3acc_6vector_4Vec2_46__neg__, /*nb_negative*/
  0, /*nb_positive*/
  __pyx_pw_5ezdxf_3acc_6vector_4Vec2_36__abs__, /*nb_absolute*/
  __pyx_pw_5ezdxf_3acc_6vector_4Vec2_48__bool__, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  __pyx_pw_5ezdxf_3acc_6vector_4Vec2_64__truediv__, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Vec2 = {
  __pyx_pw_5ezdxf_3acc_6vector_4Vec2_21__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_5ezdxf_3acc_6vector_Vec2, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Vec2 = {
  __pyx_pw_5ezdxf_3acc_6vector_4Vec2_21__len__, /*mp_length*/
  __pyx_pw_5ezdxf_3acc_6vector_4Vec2_31__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_5ezdxf_3acc_6vector_Vec2 = {
  PyVarObject_HEAD_INIT(0, 0)
  "ezdxf.acc.vector.Vec2", /*tp_name*/
  sizeof(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5ezdxf_3acc_6vector_Vec2, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_5ezdxf_3acc_6vector_4Vec2_19__repr__, /*tp_repr*/
  &__pyx_tp_as_number_Vec2, /*tp_as_number*/
  &__pyx_tp_as_sequence_Vec2, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Vec2, /*tp_as_mapping*/
  __pyx_pw_5ezdxf_3acc_6vector_4Vec2_23__hash__, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_5ezdxf_3acc_6vector_4Vec2_17__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  " Immutable 2D vector.\n\n    Init:\n\n    - Vec2(vec2)\n    - Vec2(vec3)\n    - Vec2((x, y))\n    - Vec2((x, y, z)), ignore z-axis\n    - Vec2(x, y)\n    - Vec2(x, y, z), ignore z-axis\n\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_tp_richcompare_5ezdxf_3acc_6vector_Vec2, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_5ezdxf_3acc_6vector_4Vec2_33__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5ezdxf_3acc_6vector_Vec2, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5ezdxf_3acc_6vector_Vec2, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5ezdxf_3acc_6vector_Vec2, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_5ezdxf_3acc_6vector_Vec3 __pyx_vtable_5ezdxf_3acc_6vector_Vec3;

static PyObject *__pyx_tp_new_5ezdxf_3acc_6vector_Vec3(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)o);
  p->__pyx_vtab = __pyx_vtabptr_5ezdxf_3acc_6vector_Vec3;
  if (unlikely(__pyx_pw_5ezdxf_3acc_6vector_4Vec3_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5ezdxf_3acc_6vector_Vec3(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_5ezdxf_3acc_6vector_Vec3(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_tp_richcompare_5ezdxf_3acc_6vector_Vec3(PyObject *o1, PyObject *o2, int op) {
  switch (op) {
    case Py_EQ: {
      return __pyx_pw_5ezdxf_3acc_6vector_4Vec3_58__eq__(o1, o2);
    }
    case Py_LT: {
      return __pyx_pw_5ezdxf_3acc_6vector_4Vec3_60__lt__(o1, o2);
    }
    case Py_NE: {
      PyObject *ret;
      ret = __pyx_pw_5ezdxf_3acc_6vector_4Vec3_58__eq__(o1, o2);
      if (likely(ret && ret != Py_NotImplemented)) {
        int b = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);
        if (unlikely(b < 0)) return NULL;
        ret = (b) ? Py_False : Py_True;
        Py_INCREF(ret);
      }
      return ret;
    }
    default: {
      return __Pyx_NewRef(Py_NotImplemented);
    }
  }
}

static PyObject *__pyx_getprop_5ezdxf_3acc_6vector_4Vec3_xy(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5ezdxf_3acc_6vector_4Vec3_2xy_1__get__(o);
}

static PyObject *__pyx_getprop_5ezdxf_3acc_6vector_4Vec3_xyz(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5ezdxf_3acc_6vector_4Vec3_3xyz_1__get__(o);
}

static PyObject *__pyx_getprop_5ezdxf_3acc_6vector_4Vec3_vec2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5ezdxf_3acc_6vector_4Vec3_4vec2_1__get__(o);
}

static PyObject *__pyx_getprop_5ezdxf_3acc_6vector_4Vec3_magnitude(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5ezdxf_3acc_6vector_4Vec3_9magnitude_1__get__(o);
}

static PyObject *__pyx_getprop_5ezdxf_3acc_6vector_4Vec3_magnitude_xy(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5ezdxf_3acc_6vector_4Vec3_12magnitude_xy_1__get__(o);
}

static PyObject *__pyx_getprop_5ezdxf_3acc_6vector_4Vec3_magnitude_square(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5ezdxf_3acc_6vector_4Vec3_16magnitude_square_1__get__(o);
}

static PyObject *__pyx_getprop_5ezdxf_3acc_6vector_4Vec3_is_null(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5ezdxf_3acc_6vector_4Vec3_7is_null_1__get__(o);
}

static PyObject *__pyx_getprop_5ezdxf_3acc_6vector_4Vec3_spatial_angle(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5ezdxf_3acc_6vector_4Vec3_13spatial_angle_1__get__(o);
}

static PyObject *__pyx_getprop_5ezdxf_3acc_6vector_4Vec3_spatial_angle_deg(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5ezdxf_3acc_6vector_4Vec3_17spatial_angle_deg_1__get__(o);
}

static PyObject *__pyx_getprop_5ezdxf_3acc_6vector_4Vec3_angle(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5ezdxf_3acc_6vector_4Vec3_5angle_1__get__(o);
}

static PyObject *__pyx_getprop_5ezdxf_3acc_6vector_4Vec3_angle_deg(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5ezdxf_3acc_6vector_4Vec3_9angle_deg_1__get__(o);
}

static PyObject *__pyx_getprop_5ezdxf_3acc_6vector_4Vec3_x(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5ezdxf_3acc_6vector_4Vec3_1x_1__get__(o);
}

static PyObject *__pyx_getprop_5ezdxf_3acc_6vector_4Vec3_y(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5ezdxf_3acc_6vector_4Vec3_1y_1__get__(o);
}

static PyObject *__pyx_getprop_5ezdxf_3acc_6vector_4Vec3_z(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5ezdxf_3acc_6vector_4Vec3_1z_1__get__(o);
}

static PyMethodDef __pyx_methods_5ezdxf_3acc_6vector_Vec3[] = {
  {"__reduce__", (PyCFunction)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_3__reduce__, METH_NOARGS, 0},
  {"replace", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_5replace, METH_VARARGS|METH_KEYWORDS, 0},
  {"round", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_7round, METH_VARARGS|METH_KEYWORDS, 0},
  {"list", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_9list, METH_VARARGS|METH_KEYWORDS, 0},
  {"tuple", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_11tuple, METH_VARARGS|METH_KEYWORDS, 0},
  {"generate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_13generate, METH_VARARGS|METH_KEYWORDS, 0},
  {"from_angle", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_15from_angle, METH_VARARGS|METH_KEYWORDS, 0},
  {"from_deg_angle", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_17from_deg_angle, METH_VARARGS|METH_KEYWORDS, 0},
  {"random", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_19random, METH_VARARGS|METH_KEYWORDS, 0},
  {"copy", (PyCFunction)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_29copy, METH_NOARGS, 0},
  {"__deepcopy__", (PyCFunction)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_31__deepcopy__, METH_O, 0},
  {"is_parallel", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_40is_parallel, METH_VARARGS|METH_KEYWORDS, 0},
  {"orthogonal", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_42orthogonal, METH_VARARGS|METH_KEYWORDS, 0},
  {"lerp", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_44lerp, METH_VARARGS|METH_KEYWORDS, 0},
  {"project", (PyCFunction)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_46project, METH_O, 0},
  {"normalize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_48normalize, METH_VARARGS|METH_KEYWORDS, 0},
  {"reversed", (PyCFunction)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_50reversed, METH_NOARGS, 0},
  {"isclose", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_56isclose, METH_VARARGS|METH_KEYWORDS, 0},
  {"__rsub__", (PyCFunction)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_66__rsub__, METH_O, 0},
  {"__rmul__", (PyCFunction)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_70__rmul__, METH_O, 0},
  {"sum", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_74sum, METH_VARARGS|METH_KEYWORDS, 0},
  {"dot", (PyCFunction)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_76dot, METH_O, 0},
  {"cross", (PyCFunction)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_78cross, METH_O, 0},
  {"distance", (PyCFunction)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_80distance, METH_O, 0},
  {"angle_between", (PyCFunction)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_82angle_between, METH_O, 0},
  {"angle_about", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_84angle_about, METH_VARARGS|METH_KEYWORDS, 0},
  {"rotate", (PyCFunction)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_86rotate, METH_O, 0},
  {"rotate_deg", (PyCFunction)__pyx_pw_5ezdxf_3acc_6vector_4Vec3_88rotate_deg, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5ezdxf_3acc_6vector_Vec3[] = {
  {(char *)"xy", __pyx_getprop_5ezdxf_3acc_6vector_4Vec3_xy, 0, (char *)0, 0},
  {(char *)"xyz", __pyx_getprop_5ezdxf_3acc_6vector_4Vec3_xyz, 0, (char *)0, 0},
  {(char *)"vec2", __pyx_getprop_5ezdxf_3acc_6vector_4Vec3_vec2, 0, (char *)0, 0},
  {(char *)"magnitude", __pyx_getprop_5ezdxf_3acc_6vector_4Vec3_magnitude, 0, (char *)0, 0},
  {(char *)"magnitude_xy", __pyx_getprop_5ezdxf_3acc_6vector_4Vec3_magnitude_xy, 0, (char *)0, 0},
  {(char *)"magnitude_square", __pyx_getprop_5ezdxf_3acc_6vector_4Vec3_magnitude_square, 0, (char *)0, 0},
  {(char *)"is_null", __pyx_getprop_5ezdxf_3acc_6vector_4Vec3_is_null, 0, (char *)0, 0},
  {(char *)"spatial_angle", __pyx_getprop_5ezdxf_3acc_6vector_4Vec3_spatial_angle, 0, (char *)0, 0},
  {(char *)"spatial_angle_deg", __pyx_getprop_5ezdxf_3acc_6vector_4Vec3_spatial_angle_deg, 0, (char *)0, 0},
  {(char *)"angle", __pyx_getprop_5ezdxf_3acc_6vector_4Vec3_angle, 0, (char *)0, 0},
  {(char *)"angle_deg", __pyx_getprop_5ezdxf_3acc_6vector_4Vec3_angle_deg, 0, (char *)0, 0},
  {(char *)"x", __pyx_getprop_5ezdxf_3acc_6vector_4Vec3_x, 0, (char *)0, 0},
  {(char *)"y", __pyx_getprop_5ezdxf_3acc_6vector_4Vec3_y, 0, (char *)0, 0},
  {(char *)"z", __pyx_getprop_5ezdxf_3acc_6vector_4Vec3_z, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Vec3 = {
  __pyx_pw_5ezdxf_3acc_6vector_4Vec3_62__add__, /*nb_add*/
  __pyx_pw_5ezdxf_3acc_6vector_4Vec3_64__sub__, /*nb_subtract*/
  __pyx_pw_5ezdxf_3acc_6vector_4Vec3_68__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  __pyx_pw_5ezdxf_3acc_6vector_4Vec3_52__neg__, /*nb_negative*/
  0, /*nb_positive*/
  __pyx_pw_5ezdxf_3acc_6vector_4Vec3_38__abs__, /*nb_absolute*/
  __pyx_pw_5ezdxf_3acc_6vector_4Vec3_54__bool__, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  __pyx_pw_5ezdxf_3acc_6vector_4Vec3_72__truediv__, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Vec3 = {
  __pyx_pw_5ezdxf_3acc_6vector_4Vec3_25__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_5ezdxf_3acc_6vector_Vec3, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Vec3 = {
  __pyx_pw_5ezdxf_3acc_6vector_4Vec3_25__len__, /*mp_length*/
  __pyx_pw_5ezdxf_3acc_6vector_4Vec3_33__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_5ezdxf_3acc_6vector_Vec3 = {
  PyVarObject_HEAD_INIT(0, 0)
  "ezdxf.acc.vector.Vec3", /*tp_name*/
  sizeof(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5ezdxf_3acc_6vector_Vec3, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_5ezdxf_3acc_6vector_4Vec3_23__repr__, /*tp_repr*/
  &__pyx_tp_as_number_Vec3, /*tp_as_number*/
  &__pyx_tp_as_sequence_Vec3, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Vec3, /*tp_as_mapping*/
  __pyx_pw_5ezdxf_3acc_6vector_4Vec3_27__hash__, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_5ezdxf_3acc_6vector_4Vec3_21__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  " Immutable 3D vector.\n\n    Init:\n\n    - Vec3()\n    - Vec3(vec3)\n    - Vec3(vec2)\n    - Vec3((x, y))\n    - Vec3((x, y, z))\n    - Vec3(x, y)\n    - Vec3(x, y, z)\n\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_tp_richcompare_5ezdxf_3acc_6vector_Vec3, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_5ezdxf_3acc_6vector_4Vec3_35__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5ezdxf_3acc_6vector_Vec3, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5ezdxf_3acc_6vector_Vec3, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5ezdxf_3acc_6vector_Vec3, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct__generate *__pyx_freelist_5ezdxf_3acc_6vector___pyx_scope_struct__generate[8];
static int __pyx_freecount_5ezdxf_3acc_6vector___pyx_scope_struct__generate = 0;

static PyObject *__pyx_tp_new_5ezdxf_3acc_6vector___pyx_scope_struct__generate(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5ezdxf_3acc_6vector___pyx_scope_struct__generate > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct__generate)))) {
    o = (PyObject*)__pyx_freelist_5ezdxf_3acc_6vector___pyx_scope_struct__generate[--__pyx_freecount_5ezdxf_3acc_6vector___pyx_scope_struct__generate];
    memset(o, 0, sizeof(struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct__generate));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5ezdxf_3acc_6vector___pyx_scope_struct__generate(PyObject *o) {
  struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct__generate *p = (struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct__generate *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_items);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5ezdxf_3acc_6vector___pyx_scope_struct__generate < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct__generate)))) {
    __pyx_freelist_5ezdxf_3acc_6vector___pyx_scope_struct__generate[__pyx_freecount_5ezdxf_3acc_6vector___pyx_scope_struct__generate++] = ((struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct__generate *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5ezdxf_3acc_6vector___pyx_scope_struct__generate(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct__generate *p = (struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct__generate *)o;
  if (p->__pyx_v_items) {
    e = (*v)(p->__pyx_v_items, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5ezdxf_3acc_6vector___pyx_scope_struct__generate(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct__generate *p = (struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct__generate *)o;
  tmp = ((PyObject*)p->__pyx_v_items);
  p->__pyx_v_items = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct__generate = {
  PyVarObject_HEAD_INIT(0, 0)
  "ezdxf.acc.vector.__pyx_scope_struct__generate", /*tp_name*/
  sizeof(struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct__generate), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5ezdxf_3acc_6vector___pyx_scope_struct__generate, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5ezdxf_3acc_6vector___pyx_scope_struct__generate, /*tp_traverse*/
  __pyx_tp_clear_5ezdxf_3acc_6vector___pyx_scope_struct__generate, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5ezdxf_3acc_6vector___pyx_scope_struct__generate, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr *__pyx_freelist_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr[--__pyx_freecount_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_item);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr[__pyx_freecount_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_item) {
    e = (*v)(p->__pyx_v_item, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "ezdxf.acc.vector.__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__ *__pyx_freelist_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__[8];
static int __pyx_freecount_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__ = 0;

static PyObject *__pyx_tp_new_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__)))) {
    o = (PyObject*)__pyx_freelist_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__[--__pyx_freecount_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__];
    memset(o, 0, sizeof(struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__(PyObject *o) {
  struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__ *p = (struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__)))) {
    __pyx_freelist_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__[__pyx_freecount_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__++] = ((struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__ *p = (struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "ezdxf.acc.vector.__pyx_scope_struct_2___iter__", /*tp_name*/
  sizeof(struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate *__pyx_freelist_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate[8];
static int __pyx_freecount_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate = 0;

static PyObject *__pyx_tp_new_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate)))) {
    o = (PyObject*)__pyx_freelist_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate[--__pyx_freecount_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate];
    memset(o, 0, sizeof(struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate(PyObject *o) {
  struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate *p = (struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_items);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate)))) {
    __pyx_freelist_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate[__pyx_freecount_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate++] = ((struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate *p = (struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate *)o;
  if (p->__pyx_v_items) {
    e = (*v)(p->__pyx_v_items, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate *p = (struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate *)o;
  tmp = ((PyObject*)p->__pyx_v_items);
  p->__pyx_v_items = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate = {
  PyVarObject_HEAD_INIT(0, 0)
  "ezdxf.acc.vector.__pyx_scope_struct_3_generate", /*tp_name*/
  sizeof(struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate, /*tp_traverse*/
  __pyx_tp_clear_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr *__pyx_freelist_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr[8];
static int __pyx_freecount_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr = 0;

static PyObject *__pyx_tp_new_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr[--__pyx_freecount_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr(PyObject *o) {
  struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr *p = (struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_item);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr)))) {
    __pyx_freelist_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr[__pyx_freecount_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr++] = ((struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr *p = (struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_item) {
    e = (*v)(p->__pyx_v_item, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "ezdxf.acc.vector.__pyx_scope_struct_4_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__ *__pyx_freelist_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__[8];
static int __pyx_freecount_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__ = 0;

static PyObject *__pyx_tp_new_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__)))) {
    o = (PyObject*)__pyx_freelist_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__[--__pyx_freecount_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__];
    memset(o, 0, sizeof(struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__(PyObject *o) {
  struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__ *p = (struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__)))) {
    __pyx_freelist_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__[__pyx_freecount_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__++] = ((struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__ *p = (struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "ezdxf.acc.vector.__pyx_scope_struct_5___iter__", /*tp_name*/
  sizeof(struct __pyx_obj_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_vector(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_vector},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "vector",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_n_s_Iterable, __pyx_k_Iterable, sizeof(__pyx_k_Iterable), 0, 0, 1, 1},
  {&__pyx_n_s_List, __pyx_k_List, sizeof(__pyx_k_List), 0, 0, 1, 1},
  {&__pyx_n_s_NULLVEC, __pyx_k_NULLVEC, sizeof(__pyx_k_NULLVEC), 0, 0, 1, 1},
  {&__pyx_n_s_NotImplemented, __pyx_k_NotImplemented, sizeof(__pyx_k_NotImplemented), 0, 0, 1, 1},
  {&__pyx_n_s_Sequence, __pyx_k_Sequence, sizeof(__pyx_k_Sequence), 0, 0, 1, 1},
  {&__pyx_n_s_TYPE_CHECKING, __pyx_k_TYPE_CHECKING, sizeof(__pyx_k_TYPE_CHECKING), 0, 0, 1, 1},
  {&__pyx_n_s_Tuple, __pyx_k_Tuple, sizeof(__pyx_k_Tuple), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_Vec2, __pyx_k_Vec2, sizeof(__pyx_k_Vec2), 0, 0, 1, 1},
  {&__pyx_n_u_Vec2, __pyx_k_Vec2, sizeof(__pyx_k_Vec2), 0, 1, 0, 1},
  {&__pyx_n_s_Vec2___iter, __pyx_k_Vec2___iter, sizeof(__pyx_k_Vec2___iter), 0, 0, 1, 1},
  {&__pyx_n_s_Vec3, __pyx_k_Vec3, sizeof(__pyx_k_Vec3), 0, 0, 1, 1},
  {&__pyx_n_u_Vec3, __pyx_k_Vec3, sizeof(__pyx_k_Vec3), 0, 1, 0, 1},
  {&__pyx_n_s_Vec3___iter, __pyx_k_Vec3___iter, sizeof(__pyx_k_Vec3___iter), 0, 0, 1, 1},
  {&__pyx_n_s_VecXY, __pyx_k_VecXY, sizeof(__pyx_k_VecXY), 0, 0, 1, 1},
  {&__pyx_n_s_Vector, __pyx_k_Vector, sizeof(__pyx_k_Vector), 0, 0, 1, 1},
  {&__pyx_n_s_Vertex, __pyx_k_Vertex, sizeof(__pyx_k_Vertex), 0, 0, 1, 1},
  {&__pyx_n_s_X_AXIS, __pyx_k_X_AXIS, sizeof(__pyx_k_X_AXIS), 0, 0, 1, 1},
  {&__pyx_n_s_Y_AXIS, __pyx_k_Y_AXIS, sizeof(__pyx_k_Y_AXIS), 0, 0, 1, 1},
  {&__pyx_n_s_Z_AXIS, __pyx_k_Z_AXIS, sizeof(__pyx_k_Z_AXIS), 0, 0, 1, 1},
  {&__pyx_kp_u__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0, 0},
  {&__pyx_kp_u__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 1, 0, 0},
  {&__pyx_kp_u__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 1, 0, 0},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_abs_tol, __pyx_k_abs_tol, sizeof(__pyx_k_abs_tol), 0, 0, 1, 1},
  {&__pyx_n_s_add, __pyx_k_add, sizeof(__pyx_k_add), 0, 0, 1, 1},
  {&__pyx_n_s_angle, __pyx_k_angle, sizeof(__pyx_k_angle), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_n_s_ccw, __pyx_k_ccw, sizeof(__pyx_k_ccw), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_copy_2, __pyx_k_copy_2, sizeof(__pyx_k_copy_2), 0, 0, 1, 1},
  {&__pyx_n_s_distance, __pyx_k_distance, sizeof(__pyx_k_distance), 0, 0, 1, 1},
  {&__pyx_n_s_ezdxf_acc_vector, __pyx_k_ezdxf_acc_vector, sizeof(__pyx_k_ezdxf_acc_vector), 0, 0, 1, 1},
  {&__pyx_n_s_ezdxf_eztypes, __pyx_k_ezdxf_eztypes, sizeof(__pyx_k_ezdxf_eztypes), 0, 0, 1, 1},
  {&__pyx_n_s_factor, __pyx_k_factor, sizeof(__pyx_k_factor), 0, 0, 1, 1},
  {&__pyx_n_s_from_angle, __pyx_k_from_angle, sizeof(__pyx_k_from_angle), 0, 0, 1, 1},
  {&__pyx_n_s_from_deg_angle, __pyx_k_from_deg_angle, sizeof(__pyx_k_from_deg_angle), 0, 0, 1, 1},
  {&__pyx_n_s_generate, __pyx_k_generate, sizeof(__pyx_k_generate), 0, 0, 1, 1},
  {&__pyx_n_s_generate_locals_genexpr, __pyx_k_generate_locals_genexpr, sizeof(__pyx_k_generate_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_iadd, __pyx_k_iadd, sizeof(__pyx_k_iadd), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_imul, __pyx_k_imul, sizeof(__pyx_k_imul), 0, 0, 1, 1},
  {&__pyx_kp_u_invalid_argument_count, __pyx_k_invalid_argument_count, sizeof(__pyx_k_invalid_argument_count), 0, 1, 0, 0},
  {&__pyx_kp_u_invalid_index, __pyx_k_invalid_index, sizeof(__pyx_k_invalid_index), 0, 1, 0, 0},
  {&__pyx_n_s_is_null, __pyx_k_is_null, sizeof(__pyx_k_is_null), 0, 0, 1, 1},
  {&__pyx_n_s_isub, __pyx_k_isub, sizeof(__pyx_k_isub), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_iter, __pyx_k_iter, sizeof(__pyx_k_iter), 0, 0, 1, 1},
  {&__pyx_n_s_length, __pyx_k_length, sizeof(__pyx_k_length), 0, 0, 1, 1},
  {&__pyx_n_s_lerp, __pyx_k_lerp, sizeof(__pyx_k_lerp), 0, 0, 1, 1},
  {&__pyx_n_s_list, __pyx_k_list, sizeof(__pyx_k_list), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_mul, __pyx_k_mul, sizeof(__pyx_k_mul), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_ndigits, __pyx_k_ndigits, sizeof(__pyx_k_ndigits), 0, 0, 1, 1},
  {&__pyx_n_s_neg, __pyx_k_neg, sizeof(__pyx_k_neg), 0, 0, 1, 1},
  {&__pyx_n_s_normalize_deg_angle, __pyx_k_normalize_deg_angle, sizeof(__pyx_k_normalize_deg_angle), 0, 0, 1, 1},
  {&__pyx_n_s_normalize_rad_angle, __pyx_k_normalize_rad_angle, sizeof(__pyx_k_normalize_rad_angle), 0, 0, 1, 1},
  {&__pyx_n_s_other, __pyx_k_other, sizeof(__pyx_k_other), 0, 0, 1, 1},
  {&__pyx_n_s_p1, __pyx_k_p1, sizeof(__pyx_k_p1), 0, 0, 1, 1},
  {&__pyx_n_s_p2, __pyx_k_p2, sizeof(__pyx_k_p2), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_radd, __pyx_k_radd, sizeof(__pyx_k_radd), 0, 0, 1, 1},
  {&__pyx_n_s_random, __pyx_k_random, sizeof(__pyx_k_random), 0, 0, 1, 1},
  {&__pyx_n_s_rel_tol, __pyx_k_rel_tol, sizeof(__pyx_k_rel_tol), 0, 0, 1, 1},
  {&__pyx_n_s_res, __pyx_k_res, sizeof(__pyx_k_res), 0, 0, 1, 1},
  {&__pyx_n_s_reversed, __pyx_k_reversed, sizeof(__pyx_k_reversed), 0, 0, 1, 1},
  {&__pyx_n_s_rotate, __pyx_k_rotate, sizeof(__pyx_k_rotate), 0, 0, 1, 1},
  {&__pyx_n_s_round, __pyx_k_round, sizeof(__pyx_k_round), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_spatial_angle, __pyx_k_spatial_angle, sizeof(__pyx_k_spatial_angle), 0, 0, 1, 1},
  {&__pyx_kp_s_src_ezdxf_acc_vector_pyx, __pyx_k_src_ezdxf_acc_vector_pyx, sizeof(__pyx_k_src_ezdxf_acc_vector_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s_str, __pyx_k_str, sizeof(__pyx_k_str), 0, 0, 1, 1},
  {&__pyx_n_s_sub, __pyx_k_sub, sizeof(__pyx_k_sub), 0, 0, 1, 1},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_target, __pyx_k_target, sizeof(__pyx_k_target), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_tmp, __pyx_k_tmp, sizeof(__pyx_k_tmp), 0, 0, 1, 1},
  {&__pyx_n_s_tuple, __pyx_k_tuple, sizeof(__pyx_k_tuple), 0, 0, 1, 1},
  {&__pyx_n_s_typing, __pyx_k_typing, sizeof(__pyx_k_typing), 0, 0, 1, 1},
  {&__pyx_n_s_uniform, __pyx_k_uniform, sizeof(__pyx_k_uniform), 0, 0, 1, 1},
  {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_xyz, __pyx_k_xyz, sizeof(__pyx_k_xyz), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 104, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 87, __pyx_L1_error)
  __pyx_builtin_round = __Pyx_GetBuiltinName(__pyx_n_s_round); if (!__pyx_builtin_round) __PYX_ERR(0, 102, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(0, 151, __pyx_L1_error)
  __pyx_builtin_NotImplemented = __Pyx_GetBuiltinName(__pyx_n_s_NotImplemented); if (!__pyx_builtin_NotImplemented) __PYX_ERR(0, 243, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "ezdxf/acc/vector.pyx":87
 *         # ignore z-axis but raise error for 4 or more arguments
 *         if count > 3:
 *             raise TypeError('invalid argument count')             # <<<<<<<<<<<<<<
 * 
 *         # slow init by sequence
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_invalid_argument_count); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "ezdxf/acc/vector.pyx":487
 *         cdef Vec3 res = Vec3()
 *         uniform = random.uniform
 *         res.x = uniform(-1, 1)             # <<<<<<<<<<<<<<
 *         res.y = uniform(-1, 1)
 *         res.z = uniform(-1, 1)
 */
  __pyx_tuple__5 = PyTuple_Pack(2, __pyx_int_neg_1, __pyx_int_1); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "ezdxf/acc/vector.pyx":33
 *     return res
 * 
 * def _normalize_rad_angle(double angle):             # <<<<<<<<<<<<<<
 *     # just for testing
 *     return normalize_rad_angle(angle)
 */
  __pyx_tuple__6 = PyTuple_Pack(2, __pyx_n_s_angle, __pyx_n_s_angle); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__6, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_ezdxf_acc_vector_pyx, __pyx_n_s_normalize_rad_angle, 33, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) __PYX_ERR(0, 33, __pyx_L1_error)

  /* "ezdxf/acc/vector.pyx":44
 *     return res
 * 
 * def _normalize_deg_angle(double angle):             # <<<<<<<<<<<<<<
 *     # just for testing
 *     return normalize_deg_angle(angle)
 */
  __pyx_tuple__8 = PyTuple_Pack(2, __pyx_n_s_angle, __pyx_n_s_angle); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__8, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_ezdxf_acc_vector_pyx, __pyx_n_s_normalize_deg_angle, 44, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) __PYX_ERR(0, 44, __pyx_L1_error)

  /* "ezdxf/acc/vector.pyx":105
 * 
 *     @staticmethod
 *     def list(items: Iterable['Vertex']) -> List['Vec2']:             # <<<<<<<<<<<<<<
 *         return list(Vec2.generate(items))
 * 
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_n_s_items); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);
  __pyx_codeobj__11 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__10, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_ezdxf_acc_vector_pyx, __pyx_n_s_list, 105, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__11)) __PYX_ERR(0, 105, __pyx_L1_error)

  /* "ezdxf/acc/vector.pyx":109
 * 
 *     @staticmethod
 *     def tuple(items: Iterable['Vertex']) -> Sequence['Vec2']:             # <<<<<<<<<<<<<<
 *         return tuple(Vec2.generate(items))
 * 
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_n_s_items); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);
  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_ezdxf_acc_vector_pyx, __pyx_n_s_tuple, 109, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) __PYX_ERR(0, 109, __pyx_L1_error)

  /* "ezdxf/acc/vector.pyx":113
 * 
 *     @staticmethod
 *     def generate(items: Iterable['Vertex']) -> Iterable['Vec2']:             # <<<<<<<<<<<<<<
 *         return (Vec2(item) for item in items)
 * 
 */
  __pyx_tuple__14 = PyTuple_Pack(3, __pyx_n_s_items, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __pyx_codeobj__15 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_ezdxf_acc_vector_pyx, __pyx_n_s_generate, 113, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__15)) __PYX_ERR(0, 113, __pyx_L1_error)

  /* "ezdxf/acc/vector.pyx":117
 * 
 *     @staticmethod
 *     def from_angle(double angle, double length = 1.0) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         return v2_from_angle(angle, length)
 * 
 */
  __pyx_tuple__16 = PyTuple_Pack(2, __pyx_n_s_angle, __pyx_n_s_length); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);
  __pyx_codeobj__17 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__16, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_ezdxf_acc_vector_pyx, __pyx_n_s_from_angle, 117, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__17)) __PYX_ERR(0, 117, __pyx_L1_error)

  /* "ezdxf/acc/vector.pyx":121
 * 
 *     @staticmethod
 *     def from_deg_angle(double angle, double length = 1.0) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         return v2_from_angle(angle * DEG2RAD, length)
 * 
 */
  __pyx_tuple__18 = PyTuple_Pack(2, __pyx_n_s_angle, __pyx_n_s_length); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_ezdxf_acc_vector_pyx, __pyx_n_s_from_deg_angle, 121, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) __PYX_ERR(0, 121, __pyx_L1_error)

  /* "ezdxf/acc/vector.pyx":283
 * 
 *     @staticmethod
 *     def sum(items: Iterable['Vec2']) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         cdef Vec2 res = Vec2()
 *         cdef Vec2 tmp
 */
  __pyx_tuple__20 = PyTuple_Pack(4, __pyx_n_s_items, __pyx_n_s_res, __pyx_n_s_tmp, __pyx_n_s_v); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__20, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_ezdxf_acc_vector_pyx, __pyx_n_s_sum, 283, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) __PYX_ERR(0, 283, __pyx_L1_error)

  /* "ezdxf/acc/vector.pyx":464
 * 
 *     @staticmethod
 *     def list(items: Iterable['Vertex']) -> List['Vec3']:             # <<<<<<<<<<<<<<
 *         return list(Vec3.generate(items))
 * 
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_n_s_items); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_ezdxf_acc_vector_pyx, __pyx_n_s_list, 464, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(0, 464, __pyx_L1_error)

  /* "ezdxf/acc/vector.pyx":468
 * 
 *     @staticmethod
 *     def tuple(items: Iterable['Vertex']) -> Sequence['Vec3']:             # <<<<<<<<<<<<<<
 *         return tuple(Vec3.generate(items))
 * 
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_n_s_items); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_ezdxf_acc_vector_pyx, __pyx_n_s_tuple, 468, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 468, __pyx_L1_error)

  /* "ezdxf/acc/vector.pyx":472
 * 
 *     @staticmethod
 *     def generate(items: Iterable['Vertex']) -> Iterable['Vec3']:             # <<<<<<<<<<<<<<
 *         return (Vec3(item) for item in items)
 * 
 */
  __pyx_tuple__26 = PyTuple_Pack(3, __pyx_n_s_items, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_ezdxf_acc_vector_pyx, __pyx_n_s_generate, 472, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(0, 472, __pyx_L1_error)

  /* "ezdxf/acc/vector.pyx":476
 * 
 *     @staticmethod
 *     def from_angle(double angle, double length = 1.0) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         return v3_from_angle(angle, length)
 * 
 */
  __pyx_tuple__28 = PyTuple_Pack(2, __pyx_n_s_angle, __pyx_n_s_length); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_ezdxf_acc_vector_pyx, __pyx_n_s_from_angle, 476, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(0, 476, __pyx_L1_error)

  /* "ezdxf/acc/vector.pyx":480
 * 
 *     @staticmethod
 *     def from_deg_angle(double angle, double length = 1.0) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         return v3_from_angle(angle * DEG2RAD, length)
 * 
 */
  __pyx_tuple__30 = PyTuple_Pack(2, __pyx_n_s_angle, __pyx_n_s_length); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__30, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_ezdxf_acc_vector_pyx, __pyx_n_s_from_deg_angle, 480, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(0, 480, __pyx_L1_error)

  /* "ezdxf/acc/vector.pyx":484
 * 
 *     @staticmethod
 *     def random(double length = 1.0) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         cdef Vec3 res = Vec3()
 *         uniform = random.uniform
 */
  __pyx_tuple__32 = PyTuple_Pack(3, __pyx_n_s_length, __pyx_n_s_res, __pyx_n_s_uniform); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_ezdxf_acc_vector_pyx, __pyx_n_s_random, 484, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(0, 484, __pyx_L1_error)

  /* "ezdxf/acc/vector.pyx":664
 * 
 *     @staticmethod
 *     def sum(items: Iterable['Vertex']) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         cdef Vec3 res = Vec3()
 *         cdef Vec3 tmp
 */
  __pyx_tuple__34 = PyTuple_Pack(4, __pyx_n_s_items, __pyx_n_s_res, __pyx_n_s_tmp, __pyx_n_s_v); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_ezdxf_acc_vector_pyx, __pyx_n_s_sum, 664, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(0, 664, __pyx_L1_error)

  /* "ezdxf/acc/vector.pyx":708
 *         return CppVec3(self.x, self.y, self.z)
 * 
 * X_AXIS = Vec3(1, 0, 0)             # <<<<<<<<<<<<<<
 * Y_AXIS = Vec3(0, 1, 0)
 * Z_AXIS = Vec3(0, 0, 1)
 */
  __pyx_tuple__36 = PyTuple_Pack(3, __pyx_int_1, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "ezdxf/acc/vector.pyx":709
 * 
 * X_AXIS = Vec3(1, 0, 0)
 * Y_AXIS = Vec3(0, 1, 0)             # <<<<<<<<<<<<<<
 * Z_AXIS = Vec3(0, 0, 1)
 * NULLVEC = Vec3(0, 0, 0)
 */
  __pyx_tuple__37 = PyTuple_Pack(3, __pyx_int_0, __pyx_int_1, __pyx_int_0); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "ezdxf/acc/vector.pyx":710
 * X_AXIS = Vec3(1, 0, 0)
 * Y_AXIS = Vec3(0, 1, 0)
 * Z_AXIS = Vec3(0, 0, 1)             # <<<<<<<<<<<<<<
 * NULLVEC = Vec3(0, 0, 0)
 * Vector = Vec3
 */
  __pyx_tuple__38 = PyTuple_Pack(3, __pyx_int_0, __pyx_int_0, __pyx_int_1); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "ezdxf/acc/vector.pyx":711
 * Y_AXIS = Vec3(0, 1, 0)
 * Z_AXIS = Vec3(0, 0, 1)
 * NULLVEC = Vec3(0, 0, 0)             # <<<<<<<<<<<<<<
 * Vector = Vec3
 * 
 */
  __pyx_tuple__39 = PyTuple_Pack(3, __pyx_int_0, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "ezdxf/acc/vector.pyx":828
 *     return v
 * 
 * def distance(p1: 'Vertex', p2: 'Vertex') -> float:             # <<<<<<<<<<<<<<
 *     cdef Vec3 a = Vec3(p1)
 *     cdef Vec3 b = Vec3(p2)
 */
  __pyx_tuple__40 = PyTuple_Pack(4, __pyx_n_s_p1, __pyx_n_s_p2, __pyx_n_s_a, __pyx_n_s_b); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_ezdxf_acc_vector_pyx, __pyx_n_s_distance, 828, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 828, __pyx_L1_error)

  /* "ezdxf/acc/vector.pyx":833
 *     return v3_dist(a, b)
 * 
 * def lerp(p1: 'Vertex', p2: 'Vertex', double factor = 0.5) -> 'Vec3':             # <<<<<<<<<<<<<<
 *     cdef Vec3 a = Vec3(p1)
 *     cdef Vec3 b = Vec3(p2)
 */
  __pyx_tuple__42 = PyTuple_Pack(5, __pyx_n_s_p1, __pyx_n_s_p2, __pyx_n_s_factor, __pyx_n_s_a, __pyx_n_s_b); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 833, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_ezdxf_acc_vector_pyx, __pyx_n_s_lerp, 833, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(0, 833, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("isclose", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_isclose, "int (double, double, double, double)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("normalize_rad_angle", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_normalize_rad_angle, "double (double)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("normalize_deg_angle", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_normalize_deg_angle, "double (double)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v2_add", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v2_add, "struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v2_sub", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v2_sub, "struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v2_mul", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v2_mul, "struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *, double)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v2_normalize", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v2_normalize, "struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *, double)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v2_dot", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v2_dot, "double (struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v2_det", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v2_det, "double (struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v2_dist", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v2_dist, "double (struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v2_from_angle", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v2_from_angle, "struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *(double, double)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v2_angle_between", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v2_angle_between, "double (struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v2_lerp", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v2_lerp, "struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *, double)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v2_ortho", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v2_ortho, "struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v2_project", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v2_project, "struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v2_isclose", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v2_isclose, "int (struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *, double, double)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v2_from_cpp_vec3", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v2_from_cpp_vec3, "struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *(CppVec3)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v3_add", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v3_add, "struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v3_sub", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v3_sub, "struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v3_mul", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v3_mul, "struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, double)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v3_reverse", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v3_reverse, "struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v3_dot", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v3_dot, "double (struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v3_cross", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v3_cross, "struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v3_magnitude_sqr", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v3_magnitude_sqr, "double (struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v3_magnitude", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v3_magnitude, "double (struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v3_dist", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v3_dist, "double (struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v3_from_angle", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v3_from_angle, "struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *(double, double)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v3_angle_between", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v3_angle_between, "double (struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v3_angle_about", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v3_angle_about, "double (struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v3_normalize", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v3_normalize, "struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, double)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v3_lerp", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v3_lerp, "struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, double)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v3_ortho", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v3_ortho, "struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v3_project", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v3_project, "struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v3_isclose", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v3_isclose, "int (struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, double, double)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("v3_from_cpp_vec3", (void (*)(void))__pyx_f_5ezdxf_3acc_6vector_v3_from_cpp_vec3, "struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *(CppVec3)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_5ezdxf_3acc_6vector_Vec2 = &__pyx_vtable_5ezdxf_3acc_6vector_Vec2;
  __pyx_vtable_5ezdxf_3acc_6vector_Vec2.to_cpp_vec3 = (CppVec3 (*)(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *))__pyx_f_5ezdxf_3acc_6vector_4Vec2_to_cpp_vec3;
  if (PyType_Ready(&__pyx_type_5ezdxf_3acc_6vector_Vec2) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5ezdxf_3acc_6vector_Vec2.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5ezdxf_3acc_6vector_Vec2.tp_dictoffset && __pyx_type_5ezdxf_3acc_6vector_Vec2.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5ezdxf_3acc_6vector_Vec2.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5ezdxf_3acc_6vector_Vec2.tp_dict, __pyx_vtabptr_5ezdxf_3acc_6vector_Vec2) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Vec2, (PyObject *)&__pyx_type_5ezdxf_3acc_6vector_Vec2) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  __pyx_ptype_5ezdxf_3acc_6vector_Vec2 = &__pyx_type_5ezdxf_3acc_6vector_Vec2;
  __pyx_vtabptr_5ezdxf_3acc_6vector_Vec3 = &__pyx_vtable_5ezdxf_3acc_6vector_Vec3;
  __pyx_vtable_5ezdxf_3acc_6vector_Vec3.to_cpp_vec3 = (CppVec3 (*)(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *))__pyx_f_5ezdxf_3acc_6vector_4Vec3_to_cpp_vec3;
  if (PyType_Ready(&__pyx_type_5ezdxf_3acc_6vector_Vec3) < 0) __PYX_ERR(0, 376, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5ezdxf_3acc_6vector_Vec3.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5ezdxf_3acc_6vector_Vec3.tp_dictoffset && __pyx_type_5ezdxf_3acc_6vector_Vec3.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5ezdxf_3acc_6vector_Vec3.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5ezdxf_3acc_6vector_Vec3.tp_dict, __pyx_vtabptr_5ezdxf_3acc_6vector_Vec3) < 0) __PYX_ERR(0, 376, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Vec3, (PyObject *)&__pyx_type_5ezdxf_3acc_6vector_Vec3) < 0) __PYX_ERR(0, 376, __pyx_L1_error)
  __pyx_ptype_5ezdxf_3acc_6vector_Vec3 = &__pyx_type_5ezdxf_3acc_6vector_Vec3;
  if (PyType_Ready(&__pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct__generate) < 0) __PYX_ERR(0, 113, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct__generate.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct__generate.tp_dictoffset && __pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct__generate.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct__generate.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5ezdxf_3acc_6vector___pyx_scope_struct__generate = &__pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct__generate;
  if (PyType_Ready(&__pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(0, 114, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr.tp_dictoffset && __pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr = &__pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_1_genexpr;
  if (PyType_Ready(&__pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__) < 0) __PYX_ERR(0, 153, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__.tp_dictoffset && __pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__ = &__pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_2___iter__;
  if (PyType_Ready(&__pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate) < 0) __PYX_ERR(0, 472, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate.tp_dictoffset && __pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate = &__pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_3_generate;
  if (PyType_Ready(&__pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr) < 0) __PYX_ERR(0, 473, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr.tp_dictoffset && __pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr = &__pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_4_genexpr;
  if (PyType_Ready(&__pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__) < 0) __PYX_ERR(0, 522, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__.tp_dictoffset && __pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__ = &__pyx_type_5ezdxf_3acc_6vector___pyx_scope_struct_5___iter__;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initvector(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initvector(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_vector(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_vector(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_vector(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'vector' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_vector(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("vector", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_ezdxf__acc__vector) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "ezdxf.acc.vector")) {
      if (unlikely(PyDict_SetItemString(modules, "ezdxf.acc.vector", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  if (unlikely(__Pyx_modinit_function_export_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "ezdxf/acc/vector.pyx":5
 * # Copyright (c) 2020, Manfred Moitzi
 * # License: MIT License
 * from typing import Iterable, List, Sequence, TYPE_CHECKING, Tuple             # <<<<<<<<<<<<<<
 * from libc.math cimport fabs, sin, cos, M_PI, hypot, atan2, acos, sqrt, fmod
 * import random
 */
  __pyx_t_1 = PyList_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Iterable);
  __Pyx_GIVEREF(__pyx_n_s_Iterable);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Iterable);
  __Pyx_INCREF(__pyx_n_s_List);
  __Pyx_GIVEREF(__pyx_n_s_List);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_List);
  __Pyx_INCREF(__pyx_n_s_Sequence);
  __Pyx_GIVEREF(__pyx_n_s_Sequence);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_Sequence);
  __Pyx_INCREF(__pyx_n_s_TYPE_CHECKING);
  __Pyx_GIVEREF(__pyx_n_s_TYPE_CHECKING);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_TYPE_CHECKING);
  __Pyx_INCREF(__pyx_n_s_Tuple);
  __Pyx_GIVEREF(__pyx_n_s_Tuple);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_Tuple);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_typing, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Iterable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Iterable, __pyx_t_1) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_List); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_List, __pyx_t_1) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Sequence); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Sequence, __pyx_t_1) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_TYPE_CHECKING); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TYPE_CHECKING, __pyx_t_1) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Tuple, __pyx_t_1) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ezdxf/acc/vector.pyx":7
 * from typing import Iterable, List, Sequence, TYPE_CHECKING, Tuple
 * from libc.math cimport fabs, sin, cos, M_PI, hypot, atan2, acos, sqrt, fmod
 * import random             # <<<<<<<<<<<<<<
 * 
 * DEF ABS_TOL = 1e-12
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_random, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_random, __pyx_t_2) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ezdxf/acc/vector.pyx":12
 * DEF REL_TOL = 1e-9
 * 
 * if TYPE_CHECKING:             # <<<<<<<<<<<<<<
 *     from ezdxf.eztypes import VecXY, Vertex
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_TYPE_CHECKING); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "ezdxf/acc/vector.pyx":13
 * 
 * if TYPE_CHECKING:
 *     from ezdxf.eztypes import VecXY, Vertex             # <<<<<<<<<<<<<<
 * 
 * cdef bint isclose(double a, double b, double rel_tol, double abs_tol):
 */
    __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_VecXY);
    __Pyx_GIVEREF(__pyx_n_s_VecXY);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_VecXY);
    __Pyx_INCREF(__pyx_n_s_Vertex);
    __Pyx_GIVEREF(__pyx_n_s_Vertex);
    PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_Vertex);
    __pyx_t_1 = __Pyx_Import(__pyx_n_s_ezdxf_eztypes, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_VecXY); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_VecXY, __pyx_t_2) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Vertex); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_Vertex, __pyx_t_2) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ezdxf/acc/vector.pyx":12
 * DEF REL_TOL = 1e-9
 * 
 * if TYPE_CHECKING:             # <<<<<<<<<<<<<<
 *     from ezdxf.eztypes import VecXY, Vertex
 * 
 */
  }

  /* "ezdxf/acc/vector.pyx":22
 *            diff <= abs_tol
 * 
 * cdef double RAD2DEG = 180.0 / M_PI             # <<<<<<<<<<<<<<
 * cdef double DEG2RAD = M_PI / 180.0
 * cdef double M_TAU = M_PI * 2.0
 */
  if (unlikely(M_PI == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 22, __pyx_L1_error)
  }
  __pyx_v_5ezdxf_3acc_6vector_RAD2DEG = (180.0 / ((double)M_PI));

  /* "ezdxf/acc/vector.pyx":23
 * 
 * cdef double RAD2DEG = 180.0 / M_PI
 * cdef double DEG2RAD = M_PI / 180.0             # <<<<<<<<<<<<<<
 * cdef double M_TAU = M_PI * 2.0
 * 
 */
  __pyx_v_5ezdxf_3acc_6vector_DEG2RAD = (((double)M_PI) / 180.0);

  /* "ezdxf/acc/vector.pyx":24
 * cdef double RAD2DEG = 180.0 / M_PI
 * cdef double DEG2RAD = M_PI / 180.0
 * cdef double M_TAU = M_PI * 2.0             # <<<<<<<<<<<<<<
 * 
 * cdef double normalize_rad_angle(double a):
 */
  __pyx_v_5ezdxf_3acc_6vector_M_TAU = (M_PI * 2.0);

  /* "ezdxf/acc/vector.pyx":33
 *     return res
 * 
 * def _normalize_rad_angle(double angle):             # <<<<<<<<<<<<<<
 *     # just for testing
 *     return normalize_rad_angle(angle)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5ezdxf_3acc_6vector_1_normalize_rad_angle, NULL, __pyx_n_s_ezdxf_acc_vector); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_normalize_rad_angle, __pyx_t_1) < 0) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":44
 *     return res
 * 
 * def _normalize_deg_angle(double angle):             # <<<<<<<<<<<<<<
 *     # just for testing
 *     return normalize_deg_angle(angle)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5ezdxf_3acc_6vector_3_normalize_deg_angle, NULL, __pyx_n_s_ezdxf_acc_vector); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_normalize_deg_angle, __pyx_t_1) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ezdxf/acc/vector.pyx":105
 * 
 *     @staticmethod
 *     def list(items: Iterable['Vertex']) -> List['Vec2']:             # <<<<<<<<<<<<<<
 *         return list(Vec2.generate(items))
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5ezdxf_3acc_6vector_4Vec2_7list, NULL, __pyx_n_s_ezdxf_acc_vector); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2->tp_dict, __pyx_n_s_list, __pyx_t_1) < 0) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec2);

  /* "ezdxf/acc/vector.pyx":104
 *         return Vec2(round(self.x, ndigits), round(self.y, ndigits))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def list(items: Iterable['Vertex']) -> List['Vec2']:
 *         return list(Vec2.generate(items))
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2, __pyx_n_s_list); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2->tp_dict, __pyx_n_s_list, __pyx_t_2) < 0) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec2);

  /* "ezdxf/acc/vector.pyx":109
 * 
 *     @staticmethod
 *     def tuple(items: Iterable['Vertex']) -> Sequence['Vec2']:             # <<<<<<<<<<<<<<
 *         return tuple(Vec2.generate(items))
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5ezdxf_3acc_6vector_4Vec2_9tuple, NULL, __pyx_n_s_ezdxf_acc_vector); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2->tp_dict, __pyx_n_s_tuple, __pyx_t_2) < 0) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec2);

  /* "ezdxf/acc/vector.pyx":108
 *         return list(Vec2.generate(items))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def tuple(items: Iterable['Vertex']) -> Sequence['Vec2']:
 *         return tuple(Vec2.generate(items))
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2, __pyx_n_s_tuple); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2->tp_dict, __pyx_n_s_tuple, __pyx_t_1) < 0) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec2);

  /* "ezdxf/acc/vector.pyx":113
 * 
 *     @staticmethod
 *     def generate(items: Iterable['Vertex']) -> Iterable['Vec2']:             # <<<<<<<<<<<<<<
 *         return (Vec2(item) for item in items)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5ezdxf_3acc_6vector_4Vec2_11generate, NULL, __pyx_n_s_ezdxf_acc_vector); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2->tp_dict, __pyx_n_s_generate, __pyx_t_1) < 0) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec2);

  /* "ezdxf/acc/vector.pyx":112
 *         return tuple(Vec2.generate(items))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def generate(items: Iterable['Vertex']) -> Iterable['Vec2']:
 *         return (Vec2(item) for item in items)
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2, __pyx_n_s_generate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2->tp_dict, __pyx_n_s_generate, __pyx_t_2) < 0) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec2);

  /* "ezdxf/acc/vector.pyx":117
 * 
 *     @staticmethod
 *     def from_angle(double angle, double length = 1.0) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         return v2_from_angle(angle, length)
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5ezdxf_3acc_6vector_4Vec2_13from_angle, NULL, __pyx_n_s_ezdxf_acc_vector); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2->tp_dict, __pyx_n_s_from_angle, __pyx_t_2) < 0) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec2);

  /* "ezdxf/acc/vector.pyx":116
 *         return (Vec2(item) for item in items)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_angle(double angle, double length = 1.0) -> 'Vec2':
 *         return v2_from_angle(angle, length)
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2, __pyx_n_s_from_angle); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2->tp_dict, __pyx_n_s_from_angle, __pyx_t_1) < 0) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec2);

  /* "ezdxf/acc/vector.pyx":121
 * 
 *     @staticmethod
 *     def from_deg_angle(double angle, double length = 1.0) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         return v2_from_angle(angle * DEG2RAD, length)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5ezdxf_3acc_6vector_4Vec2_15from_deg_angle, NULL, __pyx_n_s_ezdxf_acc_vector); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2->tp_dict, __pyx_n_s_from_deg_angle, __pyx_t_1) < 0) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec2);

  /* "ezdxf/acc/vector.pyx":120
 *         return v2_from_angle(angle, length)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_deg_angle(double angle, double length = 1.0) -> 'Vec2':
 *         return v2_from_angle(angle * DEG2RAD, length)
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2, __pyx_n_s_from_deg_angle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2->tp_dict, __pyx_n_s_from_deg_angle, __pyx_t_2) < 0) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec2);

  /* "ezdxf/acc/vector.pyx":196
 *         return res
 * 
 *     reversed = __neg__             # <<<<<<<<<<<<<<
 * 
 *     def __bool__(self) -> bool:
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2, __pyx_n_s_neg); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2->tp_dict, __pyx_n_s_reversed, __pyx_t_2) < 0) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec2);

  /* "ezdxf/acc/vector.pyx":226
 *     # __radd__ not supported for Vec2
 * 
 *     __iadd__ = __add__  # immutable             # <<<<<<<<<<<<<<
 * 
 *     def __sub__(self, other: 'VecXY') -> 'Vec2':
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2, __pyx_n_s_add); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2->tp_dict, __pyx_n_s_iadd, __pyx_t_2) < 0) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec2);

  /* "ezdxf/acc/vector.pyx":235
 *     # __rsub__ not supported for Vec2
 * 
 *     __isub__ = __sub__  # immutable             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(self, factor) -> 'Vec2':
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2, __pyx_n_s_sub); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2->tp_dict, __pyx_n_s_isub, __pyx_t_2) < 0) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec2);

  /* "ezdxf/acc/vector.pyx":251
 *         return v2_mul(self, factor)
 * 
 *     __imul__ = __mul__  # immutable             # <<<<<<<<<<<<<<
 * 
 *     def __truediv__(self, double factor) -> 'Vec2':
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2, __pyx_n_s_mul); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2->tp_dict, __pyx_n_s_imul, __pyx_t_2) < 0) __PYX_ERR(0, 251, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec2);

  /* "ezdxf/acc/vector.pyx":283
 * 
 *     @staticmethod
 *     def sum(items: Iterable['Vec2']) -> 'Vec2':             # <<<<<<<<<<<<<<
 *         cdef Vec2 res = Vec2()
 *         cdef Vec2 tmp
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5ezdxf_3acc_6vector_4Vec2_78sum, NULL, __pyx_n_s_ezdxf_acc_vector); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2->tp_dict, __pyx_n_s_sum, __pyx_t_2) < 0) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec2);

  /* "ezdxf/acc/vector.pyx":282
 *         return self.rotate(angle * DEG2RAD)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def sum(items: Iterable['Vec2']) -> 'Vec2':
 *         cdef Vec2 res = Vec2()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2, __pyx_n_s_sum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec2->tp_dict, __pyx_n_s_sum, __pyx_t_1) < 0) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec2);

  /* "ezdxf/acc/vector.pyx":464
 * 
 *     @staticmethod
 *     def list(items: Iterable['Vertex']) -> List['Vec3']:             # <<<<<<<<<<<<<<
 *         return list(Vec3.generate(items))
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5ezdxf_3acc_6vector_4Vec3_9list, NULL, __pyx_n_s_ezdxf_acc_vector); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3->tp_dict, __pyx_n_s_list, __pyx_t_1) < 0) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec3);

  /* "ezdxf/acc/vector.pyx":463
 *         )
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def list(items: Iterable['Vertex']) -> List['Vec3']:
 *         return list(Vec3.generate(items))
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3, __pyx_n_s_list); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3->tp_dict, __pyx_n_s_list, __pyx_t_2) < 0) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec3);

  /* "ezdxf/acc/vector.pyx":468
 * 
 *     @staticmethod
 *     def tuple(items: Iterable['Vertex']) -> Sequence['Vec3']:             # <<<<<<<<<<<<<<
 *         return tuple(Vec3.generate(items))
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5ezdxf_3acc_6vector_4Vec3_11tuple, NULL, __pyx_n_s_ezdxf_acc_vector); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3->tp_dict, __pyx_n_s_tuple, __pyx_t_2) < 0) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec3);

  /* "ezdxf/acc/vector.pyx":467
 *         return list(Vec3.generate(items))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def tuple(items: Iterable['Vertex']) -> Sequence['Vec3']:
 *         return tuple(Vec3.generate(items))
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3, __pyx_n_s_tuple); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3->tp_dict, __pyx_n_s_tuple, __pyx_t_1) < 0) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec3);

  /* "ezdxf/acc/vector.pyx":472
 * 
 *     @staticmethod
 *     def generate(items: Iterable['Vertex']) -> Iterable['Vec3']:             # <<<<<<<<<<<<<<
 *         return (Vec3(item) for item in items)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5ezdxf_3acc_6vector_4Vec3_13generate, NULL, __pyx_n_s_ezdxf_acc_vector); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3->tp_dict, __pyx_n_s_generate, __pyx_t_1) < 0) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec3);

  /* "ezdxf/acc/vector.pyx":471
 *         return tuple(Vec3.generate(items))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def generate(items: Iterable['Vertex']) -> Iterable['Vec3']:
 *         return (Vec3(item) for item in items)
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3, __pyx_n_s_generate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3->tp_dict, __pyx_n_s_generate, __pyx_t_2) < 0) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec3);

  /* "ezdxf/acc/vector.pyx":476
 * 
 *     @staticmethod
 *     def from_angle(double angle, double length = 1.0) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         return v3_from_angle(angle, length)
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5ezdxf_3acc_6vector_4Vec3_15from_angle, NULL, __pyx_n_s_ezdxf_acc_vector); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3->tp_dict, __pyx_n_s_from_angle, __pyx_t_2) < 0) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec3);

  /* "ezdxf/acc/vector.pyx":475
 *         return (Vec3(item) for item in items)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_angle(double angle, double length = 1.0) -> 'Vec3':
 *         return v3_from_angle(angle, length)
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3, __pyx_n_s_from_angle); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3->tp_dict, __pyx_n_s_from_angle, __pyx_t_1) < 0) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec3);

  /* "ezdxf/acc/vector.pyx":480
 * 
 *     @staticmethod
 *     def from_deg_angle(double angle, double length = 1.0) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         return v3_from_angle(angle * DEG2RAD, length)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5ezdxf_3acc_6vector_4Vec3_17from_deg_angle, NULL, __pyx_n_s_ezdxf_acc_vector); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3->tp_dict, __pyx_n_s_from_deg_angle, __pyx_t_1) < 0) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec3);

  /* "ezdxf/acc/vector.pyx":479
 *         return v3_from_angle(angle, length)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_deg_angle(double angle, double length = 1.0) -> 'Vec3':
 *         return v3_from_angle(angle * DEG2RAD, length)
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3, __pyx_n_s_from_deg_angle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3->tp_dict, __pyx_n_s_from_deg_angle, __pyx_t_2) < 0) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec3);

  /* "ezdxf/acc/vector.pyx":484
 * 
 *     @staticmethod
 *     def random(double length = 1.0) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         cdef Vec3 res = Vec3()
 *         uniform = random.uniform
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5ezdxf_3acc_6vector_4Vec3_19random, NULL, __pyx_n_s_ezdxf_acc_vector); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3->tp_dict, __pyx_n_s_random, __pyx_t_2) < 0) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec3);

  /* "ezdxf/acc/vector.pyx":483
 *         return v3_from_angle(angle * DEG2RAD, length)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def random(double length = 1.0) -> 'Vec3':
 *         cdef Vec3 res = Vec3()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3, __pyx_n_s_random); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3->tp_dict, __pyx_n_s_random, __pyx_t_1) < 0) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec3);

  /* "ezdxf/acc/vector.pyx":507
 *         return self  # immutable
 * 
 *     __copy__ = copy             # <<<<<<<<<<<<<<
 * 
 *     def __deepcopy__(self, memodict: dict) -> 'Vec3':
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3, __pyx_n_s_copy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3->tp_dict, __pyx_n_s_copy_2, __pyx_t_1) < 0) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec3);

  /* "ezdxf/acc/vector.pyx":626
 *         return v3_add(<Vec3> self, <Vec3> other)
 * 
 *     __radd__ = __add__  # Cython >= 3.0             # <<<<<<<<<<<<<<
 * 
 *     __iadd__ = __add__  # immutable
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3, __pyx_n_s_add); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3->tp_dict, __pyx_n_s_radd, __pyx_t_1) < 0) __PYX_ERR(0, 626, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec3);

  /* "ezdxf/acc/vector.pyx":628
 *     __radd__ = __add__  # Cython >= 3.0
 * 
 *     __iadd__ = __add__  # immutable             # <<<<<<<<<<<<<<
 * 
 *     # Special Cython (<3.0) feature: __rsub__ == __sub__(other, self)
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3, __pyx_n_s_add); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3->tp_dict, __pyx_n_s_iadd, __pyx_t_1) < 0) __PYX_ERR(0, 628, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec3);

  /* "ezdxf/acc/vector.pyx":644
 *         return v3_sub(Vec3(other), <Vec3> self)
 * 
 *     __isub__ = __sub__  # immutable             # <<<<<<<<<<<<<<
 * 
 *     # Special Cython <(3.0) feature: __rmul__ == __mul__(factor, self)
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3, __pyx_n_s_sub); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3->tp_dict, __pyx_n_s_isub, __pyx_t_1) < 0) __PYX_ERR(0, 644, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec3);

  /* "ezdxf/acc/vector.pyx":656
 *         return v3_mul(self, factor)
 * 
 *     __imul__ = __mul__  # immutable             # <<<<<<<<<<<<<<
 * 
 *     def __truediv__(self, double factor) -> 'Vec3':
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3, __pyx_n_s_mul); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3->tp_dict, __pyx_n_s_imul, __pyx_t_1) < 0) __PYX_ERR(0, 656, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec3);

  /* "ezdxf/acc/vector.pyx":664
 * 
 *     @staticmethod
 *     def sum(items: Iterable['Vertex']) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         cdef Vec3 res = Vec3()
 *         cdef Vec3 tmp
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5ezdxf_3acc_6vector_4Vec3_74sum, NULL, __pyx_n_s_ezdxf_acc_vector); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3->tp_dict, __pyx_n_s_sum, __pyx_t_1) < 0) __PYX_ERR(0, 664, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec3);

  /* "ezdxf/acc/vector.pyx":663
 *     # __rtruediv__ not supported -> TypeError
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def sum(items: Iterable['Vertex']) -> 'Vec3':
 *         cdef Vec3 res = Vec3()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3, __pyx_n_s_sum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3->tp_dict, __pyx_n_s_sum, __pyx_t_2) < 0) __PYX_ERR(0, 664, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_6vector_Vec3);

  /* "ezdxf/acc/vector.pyx":708
 *         return CppVec3(self.x, self.y, self.z)
 * 
 * X_AXIS = Vec3(1, 0, 0)             # <<<<<<<<<<<<<<
 * Y_AXIS = Vec3(0, 1, 0)
 * Z_AXIS = Vec3(0, 0, 1)
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_X_AXIS, __pyx_t_2) < 0) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ezdxf/acc/vector.pyx":709
 * 
 * X_AXIS = Vec3(1, 0, 0)
 * Y_AXIS = Vec3(0, 1, 0)             # <<<<<<<<<<<<<<
 * Z_AXIS = Vec3(0, 0, 1)
 * NULLVEC = Vec3(0, 0, 0)
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Y_AXIS, __pyx_t_2) < 0) __PYX_ERR(0, 709, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ezdxf/acc/vector.pyx":710
 * X_AXIS = Vec3(1, 0, 0)
 * Y_AXIS = Vec3(0, 1, 0)
 * Z_AXIS = Vec3(0, 0, 1)             # <<<<<<<<<<<<<<
 * NULLVEC = Vec3(0, 0, 0)
 * Vector = Vec3
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Z_AXIS, __pyx_t_2) < 0) __PYX_ERR(0, 710, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ezdxf/acc/vector.pyx":711
 * Y_AXIS = Vec3(0, 1, 0)
 * Z_AXIS = Vec3(0, 0, 1)
 * NULLVEC = Vec3(0, 0, 0)             # <<<<<<<<<<<<<<
 * Vector = Vec3
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NULLVEC, __pyx_t_2) < 0) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ezdxf/acc/vector.pyx":712
 * Z_AXIS = Vec3(0, 0, 1)
 * NULLVEC = Vec3(0, 0, 0)
 * Vector = Vec3             # <<<<<<<<<<<<<<
 * 
 * cdef Vec3 v3_add(Vec3 a, Vec3 b):
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Vector, ((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3)) < 0) __PYX_ERR(0, 712, __pyx_L1_error)

  /* "ezdxf/acc/vector.pyx":828
 *     return v
 * 
 * def distance(p1: 'Vertex', p2: 'Vertex') -> float:             # <<<<<<<<<<<<<<
 *     cdef Vec3 a = Vec3(p1)
 *     cdef Vec3 b = Vec3(p2)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5ezdxf_3acc_6vector_5distance, NULL, __pyx_n_s_ezdxf_acc_vector); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_distance, __pyx_t_2) < 0) __PYX_ERR(0, 828, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ezdxf/acc/vector.pyx":833
 *     return v3_dist(a, b)
 * 
 * def lerp(p1: 'Vertex', p2: 'Vertex', double factor = 0.5) -> 'Vec3':             # <<<<<<<<<<<<<<
 *     cdef Vec3 a = Vec3(p1)
 *     cdef Vec3 b = Vec3(p2)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5ezdxf_3acc_6vector_7lerp, NULL, __pyx_n_s_ezdxf_acc_vector); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 833, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_lerp, __pyx_t_2) < 0) __PYX_ERR(0, 833, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ezdxf/acc/vector.pyx":1
 * # cython: language_level=3             # <<<<<<<<<<<<<<
 * # distutils: language = c++
 * # Copyright (c) 2020, Manfred Moitzi
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init ezdxf.acc.vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init ezdxf.acc.vector");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* None */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* CIntToDigits */
static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};

/* BuildPyUnicode */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
#if CYTHON_PEP393_ENABLED
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
#else
    Py_UNICODE *udata;
    uval = PyUnicode_FromUnicode(NULL, ulength);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_AS_UNICODE(uval);
#endif
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        PyObject *sign = NULL, *padding = NULL;
        uval = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp;
                    PyObject *repeat = PyInt_FromSize_t(uoffset - prepend_sign);
                    if (unlikely(!repeat)) goto done_or_error;
                    tmp = PyNumber_Multiply(padding, repeat);
                    Py_DECREF(repeat);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyNumber_Add(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyNumber_Add(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* CIntToPyUnicode */
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned short    uint16_t;
        #else
           typedef unsigned __int16  uint16_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(int)*3+2];
    char *dpos, *end = digits + sizeof(int)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    int remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (int) (remaining / (8*8));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_8)[digit_pos];
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (int) (remaining / (10*10));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_10)[digit_pos];
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (int) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    if (last_one_off) {
        assert(*dpos == '0');
        dpos++;
    }
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetNameInClass */
static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    PyObject *result;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* CoroutineBase */
#include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
            _PyGen_SetStopIterationValue(result);
        }
        Py_CLEAR(result);
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    __Pyx_SET_REFCNT(self, 1);
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        __Pyx_SET_REFCNT(self, refcnt);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionExport */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
