/* Generated by Cython 0.29.22 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_22"
#define CYTHON_HEX_VERSION 0x001D16F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__ezdxf__acc__matrix44
#define __PYX_HAVE_API__ezdxf__acc__matrix44
/* Early includes */
#include "_cpp_vec3.hpp"
#include <math.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "src\\ezdxf\\acc\\matrix44.pyx",
  "src\\ezdxf\\acc\\vector.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_5ezdxf_3acc_6vector_Vec2;
struct __pyx_obj_5ezdxf_3acc_6vector_Vec3;
struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44;
struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__;
struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__;
struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row;
struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr;
struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr;
struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows;
struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr;
struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns;
struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr;
struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices;
struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions;

/* "vector.pxd":14
 * from ._cpp_vec3 cimport CppVec3
 * 
 * cdef class Vec2:             # <<<<<<<<<<<<<<
 *     cdef readonly double x, y
 *     cdef CppVec3 to_cpp_vec3(self)
 */
struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 {
  PyObject_HEAD
  struct __pyx_vtabstruct_5ezdxf_3acc_6vector_Vec2 *__pyx_vtab;
  double x;
  double y;
};


/* "vector.pxd":36
 * # angle = atan2(vec2.y, vec2.x)
 * 
 * cdef class Vec3:             # <<<<<<<<<<<<<<
 *     cdef readonly double x, y, z
 *     cdef CppVec3 to_cpp_vec3(self)
 */
struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 {
  PyObject_HEAD
  struct __pyx_vtabstruct_5ezdxf_3acc_6vector_Vec3 *__pyx_vtab;
  double x;
  double y;
  double z;
};


/* "ezdxf/acc/matrix44.pxd":8
 * from .vector cimport Vec3
 * 
 * cdef class Matrix44:             # <<<<<<<<<<<<<<
 *     cdef double m[16]
 *     cdef Vec3 get_ux(self)
 */
struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 {
  PyObject_HEAD
  struct __pyx_vtabstruct_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_vtab;
  double m[16];
};


/* "ezdxf/acc/matrix44.pyx":73
 *             raise IndexError(f'index out of range: {index}')
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(16):
 */
struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__ {
  PyObject_HEAD
  int __pyx_v_i;
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self;
  int __pyx_t_0;
};


/* "ezdxf/acc/matrix44.pyx":78
 *             yield self.m[i]
 * 
 *     def __repr__(self) -> str:             # <<<<<<<<<<<<<<
 *         def format_row(row):
 *             return "(%s)" % ", ".join(str(value) for value in row)
 */
struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__ {
  PyObject_HEAD
  PyObject *__pyx_v_format_row;
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self;
};


/* "ezdxf/acc/matrix44.pyx":79
 * 
 *     def __repr__(self) -> str:
 *         def format_row(row):             # <<<<<<<<<<<<<<
 *             return "(%s)" % ", ".join(str(value) for value in row)
 * 
 */
struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row {
  PyObject_HEAD
  PyObject *__pyx_v_row;
};


/* "ezdxf/acc/matrix44.pyx":80
 *     def __repr__(self) -> str:
 *         def format_row(row):
 *             return "(%s)" % ", ".join(str(value) for value in row)             # <<<<<<<<<<<<<<
 * 
 *         return "Matrix44(%s)" % \
 */
struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row *__pyx_outer_scope;
  PyObject *__pyx_v_value;
};


/* "ezdxf/acc/matrix44.pyx":83
 * 
 *         return "Matrix44(%s)" % \
 *                ", ".join(format_row(row) for row in self.rows())             # <<<<<<<<<<<<<<
 * 
 *     def get_2d_transformation(self) -> Tuple[float, ...]:
 */
struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__ *__pyx_outer_scope;
  PyObject *__pyx_v_row;
};


/* "ezdxf/acc/matrix44.pyx":127
 *             raise IndexError(f'invalid col index: {col}')
 * 
 *     def rows(self) -> Iterable[Tuple[float, ...]]:             # <<<<<<<<<<<<<<
 *         return (self.get_row(index) for index in (0, 1, 2, 3))
 * 
 */
struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows {
  PyObject_HEAD
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self;
};


/* "ezdxf/acc/matrix44.pyx":128
 * 
 *     def rows(self) -> Iterable[Tuple[float, ...]]:
 *         return (self.get_row(index) for index in (0, 1, 2, 3))             # <<<<<<<<<<<<<<
 * 
 *     def columns(self) -> Iterable[Tuple[float, ...]]:
 */
struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows *__pyx_outer_scope;
  PyObject *__pyx_v_index;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
};


/* "ezdxf/acc/matrix44.pyx":130
 *         return (self.get_row(index) for index in (0, 1, 2, 3))
 * 
 *     def columns(self) -> Iterable[Tuple[float, ...]]:             # <<<<<<<<<<<<<<
 *         return (self.get_col(index) for index in (0, 1, 2, 3))
 * 
 */
struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns {
  PyObject_HEAD
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self;
};


/* "ezdxf/acc/matrix44.pyx":131
 * 
 *     def columns(self) -> Iterable[Tuple[float, ...]]:
 *         return (self.get_col(index) for index in (0, 1, 2, 3))             # <<<<<<<<<<<<<<
 * 
 *     def copy(self) -> 'Matrix44':
 */
struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns *__pyx_outer_scope;
  PyObject *__pyx_v_index;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
};


/* "ezdxf/acc/matrix44.pyx":537
 *     ocs_to_wcs = transform_direction
 * 
 *     def transform_vertices(self, vectors: Iterable['Vertex']) -> Iterable[Vec3]:             # <<<<<<<<<<<<<<
 *         cdef double *m = self.m
 *         cdef Vec3 res
 */
struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices {
  PyObject_HEAD
  double *__pyx_v_m;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_res;
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self;
  PyObject *__pyx_v_vector;
  PyObject *__pyx_v_vectors;
  double __pyx_v_x;
  double __pyx_v_y;
  double __pyx_v_z;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "ezdxf/acc/matrix44.pyx":553
 *             yield res
 * 
 *     def transform_directions(self, vectors: Iterable['Vertex'],             # <<<<<<<<<<<<<<
 *                              normalize=False) -> Iterable[Vec3]:
 *         cdef double *m = self.m
 */
struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions {
  PyObject_HEAD
  int __pyx_v__normalize;
  double *__pyx_v_m;
  PyObject *__pyx_v_normalize;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_res;
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self;
  PyObject *__pyx_v_vector;
  PyObject *__pyx_v_vectors;
  double __pyx_v_x;
  double __pyx_v_y;
  double __pyx_v_z;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};



/* "vector.pxd":14
 * from ._cpp_vec3 cimport CppVec3
 * 
 * cdef class Vec2:             # <<<<<<<<<<<<<<
 *     cdef readonly double x, y
 *     cdef CppVec3 to_cpp_vec3(self)
 */

struct __pyx_vtabstruct_5ezdxf_3acc_6vector_Vec2 {
  CppVec3 (*to_cpp_vec3)(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2 *);
};
static struct __pyx_vtabstruct_5ezdxf_3acc_6vector_Vec2 *__pyx_vtabptr_5ezdxf_3acc_6vector_Vec2;


/* "vector.pxd":36
 * # angle = atan2(vec2.y, vec2.x)
 * 
 * cdef class Vec3:             # <<<<<<<<<<<<<<
 *     cdef readonly double x, y, z
 *     cdef CppVec3 to_cpp_vec3(self)
 */

struct __pyx_vtabstruct_5ezdxf_3acc_6vector_Vec3 {
  CppVec3 (*to_cpp_vec3)(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *);
};
static struct __pyx_vtabstruct_5ezdxf_3acc_6vector_Vec3 *__pyx_vtabptr_5ezdxf_3acc_6vector_Vec3;


/* "ezdxf/acc/matrix44.pyx":37
 *         raise ValueError("invalid argument count")
 * 
 * cdef class Matrix44:             # <<<<<<<<<<<<<<
 *     def __cinit__(self, *args):
 *         cdef int nargs = len(args)
 */

struct __pyx_vtabstruct_5ezdxf_3acc_8matrix44_Matrix44 {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *(*get_ux)(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *);
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *(*get_uy)(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *);
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *(*get_uz)(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *);
};
static struct __pyx_vtabstruct_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_vtabptr_5ezdxf_3acc_8matrix44_Matrix44;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* IncludeStringH.proto */
#include <string.h>

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_str(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_str(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_f_5ezdxf_3acc_8matrix44_8Matrix44_get_ux(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self); /* proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_f_5ezdxf_3acc_8matrix44_8Matrix44_get_uy(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self); /* proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_f_5ezdxf_3acc_8matrix44_8Matrix44_get_uz(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self); /* proto*/

/* Module declarations from 'ezdxf.acc._cpp_vec3' */

/* Module declarations from 'ezdxf.acc.vector' */
static PyTypeObject *__pyx_ptype_5ezdxf_3acc_6vector_Vec2 = 0;
static PyTypeObject *__pyx_ptype_5ezdxf_3acc_6vector_Vec3 = 0;
static double (*__pyx_f_5ezdxf_3acc_6vector_v3_dot)(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *(*__pyx_f_5ezdxf_3acc_6vector_v3_cross)(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *(*__pyx_f_5ezdxf_3acc_6vector_v3_normalize)(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, double); /*proto*/
static int (*__pyx_f_5ezdxf_3acc_6vector_v3_isclose)(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, double, double); /*proto*/

/* Module declarations from 'libc.math' */

/* Module declarations from 'ezdxf.acc.matrix44' */
static PyTypeObject *__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44 = 0;
static PyTypeObject *__pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__ = 0;
static PyTypeObject *__pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__ = 0;
static PyTypeObject *__pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row = 0;
static PyTypeObject *__pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr = 0;
static PyTypeObject *__pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr = 0;
static PyTypeObject *__pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows = 0;
static PyTypeObject *__pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr = 0;
static PyTypeObject *__pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns = 0;
static PyTypeObject *__pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr = 0;
static PyTypeObject *__pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices = 0;
static PyTypeObject *__pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions = 0;
static double __pyx_v_5ezdxf_3acc_8matrix44_IDENTITY[16];
static CYTHON_INLINE PyObject *__pyx_f_5ezdxf_3acc_8matrix44_swap(double *, double *); /*proto*/
static void __pyx_f_5ezdxf_3acc_8matrix44_set_floats(double *, PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "ezdxf.acc.matrix44"
extern int __pyx_module_is_main_ezdxf__acc__matrix44;
int __pyx_module_is_main_ezdxf__acc__matrix44 = 0;

/* Implementation of 'ezdxf.acc.matrix44' */
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_range;
static const char __pyx_k_s[] = "(%s)";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_z[] = "z";
static const char __pyx_k__3[] = ", ";
static const char __pyx_k_cx[] = "cx";
static const char __pyx_k_cy[] = "cy";
static const char __pyx_k_cz[] = "cz";
static const char __pyx_k_dx[] = "dx";
static const char __pyx_k_dy[] = "dy";
static const char __pyx_k_dz[] = "dz";
static const char __pyx_k_sx[] = "sx";
static const char __pyx_k_sy[] = "sy";
static const char __pyx_k_sz[] = "sz";
static const char __pyx_k_tx[] = "tx";
static const char __pyx_k_ty[] = "ty";
static const char __pyx_k_ux[] = "ux";
static const char __pyx_k_uy[] = "uy";
static const char __pyx_k_uz[] = "uz";
static const char __pyx_k_col[] = "col";
static const char __pyx_k_far[] = "far";
static const char __pyx_k_fov[] = "fov";
static const char __pyx_k_mat[] = "mat";
static const char __pyx_k_row[] = "row";
static const char __pyx_k_tan[] = "tan";
static const char __pyx_k_top[] = "top";
static const char __pyx_k_ucs[] = "ucs";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_axis[] = "axis";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_cxsy[] = "cxsy";
static const char __pyx_k_imul[] = "__imul__";
static const char __pyx_k_iter[] = "__iter__";
static const char __pyx_k_left[] = "left";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_math[] = "math";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_near[] = "near";
static const char __pyx_k_rows[] = "rows";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_sxsy[] = "sxsy";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_ux_2[] = "_ux";
static const char __pyx_k_uy_2[] = "_uy";
static const char __pyx_k_uz_2[] = "_uz";
static const char __pyx_k_Tuple[] = "Tuple";
static const char __pyx_k_angle[] = "angle";
static const char __pyx_k_chain[] = "chain";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_cos_a[] = "cos_a";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_right[] = "right";
static const char __pyx_k_scale[] = "scale";
static const char __pyx_k_sin_a[] = "sin_a";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_Vertex[] = "Vertex";
static const char __pyx_k_X_AXIS[] = "X_AXIS";
static const char __pyx_k_Y_AXIS[] = "Y_AXIS";
static const char __pyx_k_Z_AXIS[] = "Z_AXIS";
static const char __pyx_k_aspect[] = "aspect";
static const char __pyx_k_axis_2[] = "_axis";
static const char __pyx_k_bottom[] = "bottom";
static const char __pyx_k_copy_2[] = "__copy__";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_matrix[] = "matrix";
static const char __pyx_k_origin[] = "origin";
static const char __pyx_k_typing[] = "typing";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_vector[] = "vector";
static const char __pyx_k_vrange[] = "vrange";
static const char __pyx_k_NULLVEC[] = "NULLVEC";
static const char __pyx_k_angle_x[] = "angle_x";
static const char __pyx_k_angle_y[] = "angle_y";
static const char __pyx_k_angle_z[] = "angle_z";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_get_col[] = "get_col";
static const char __pyx_k_get_row[] = "get_row";
static const char __pyx_k_vectors[] = "vectors";
static const char __pyx_k_Iterable[] = "Iterable";
static const char __pyx_k_Matrix44[] = "Matrix44";
static const char __pyx_k_Sequence[] = "Sequence";
static const char __pyx_k_matrices[] = "matrices";
static const char __pyx_k_origin_2[] = "_origin";
static const char __pyx_k_shear_xy[] = "shear_xy";
static const char __pyx_k_x_rotate[] = "x_rotate";
static const char __pyx_k_y_rotate[] = "y_rotate";
static const char __pyx_k_z_rotate[] = "z_rotate";
static const char __pyx_k_itertools[] = "itertools";
static const char __pyx_k_normalize[] = "normalize";
static const char __pyx_k_one_m_cos[] = "one_m_cos";
static const char __pyx_k_translate[] = "translate";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_Matrix44_s[] = "Matrix44(%s)";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_format_row[] = "format_row";
static const char __pyx_k_ocs_to_wcs[] = "ocs_to_wcs";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_xyz_rotate[] = "xyz_rotate";
static const char __pyx_k_axis_rotate[] = "axis_rotate";
static const char __pyx_k_determinant[] = "determinant";
static const char __pyx_k_ocs_from_wcs[] = "ocs_from_wcs";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_TYPE_CHECKING[] = "TYPE_CHECKING";
static const char __pyx_k_ezdxf_eztypes[] = "ezdxf.eztypes";
static const char __pyx_k_transformation[] = "transformation";
static const char __pyx_k_Matrix44___iter[] = "Matrix44.__iter__";
static const char __pyx_k_invalid_col_index[] = "invalid col index: ";
static const char __pyx_k_invalid_row_index[] = "invalid row index: ";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_ezdxf_acc_matrix44[] = "ezdxf.acc.matrix44";
static const char __pyx_k_index_out_of_range[] = "index out of range: ";
static const char __pyx_k_transform_vertices[] = "transform_vertices";
static const char __pyx_k_rows_locals_genexpr[] = "rows.<locals>.genexpr";
static const char __pyx_k_transform_direction[] = "transform_direction";
static const char __pyx_k_transform_directions[] = "transform_directions";
static const char __pyx_k_repr___locals_genexpr[] = "__repr__.<locals>.genexpr";
static const char __pyx_k_columns_locals_genexpr[] = "columns.<locals>.genexpr";
static const char __pyx_k_invalid_argument_count[] = "invalid argument count";
static const char __pyx_k_perspective_projection[] = "perspective_projection";
static const char __pyx_k_ucs_direction_from_wcs[] = "ucs_direction_from_wcs";
static const char __pyx_k_repr___locals_format_row[] = "__repr__.<locals>.format_row";
static const char __pyx_k_perspective_projection_fov[] = "perspective_projection_fov";
static const char __pyx_k_src_ezdxf_acc_matrix44_pyx[] = "src\\ezdxf\\acc\\matrix44.pyx";
static const char __pyx_k_Matrix44_transform_vertices[] = "Matrix44.transform_vertices";
static const char __pyx_k_Matrix44_transform_directions[] = "Matrix44.transform_directions";
static const char __pyx_k_repr___locals_format_row_local[] = "__repr__.<locals>.format_row.<locals>.genexpr";
static const char __pyx_k_invalid_argument_count_4_row_vec[] = "invalid argument count: 4 row vectors or iterable of 16 numbers";
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_n_s_Iterable;
static PyObject *__pyx_n_s_Matrix44;
static PyObject *__pyx_n_s_Matrix44___iter;
static PyObject *__pyx_kp_u_Matrix44_s;
static PyObject *__pyx_n_s_Matrix44_transform_directions;
static PyObject *__pyx_n_s_Matrix44_transform_vertices;
static PyObject *__pyx_n_s_NULLVEC;
static PyObject *__pyx_n_s_Sequence;
static PyObject *__pyx_n_s_TYPE_CHECKING;
static PyObject *__pyx_n_s_Tuple;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_Vertex;
static PyObject *__pyx_n_s_X_AXIS;
static PyObject *__pyx_n_s_Y_AXIS;
static PyObject *__pyx_n_s_Z_AXIS;
static PyObject *__pyx_kp_u__3;
static PyObject *__pyx_n_s_angle;
static PyObject *__pyx_n_s_angle_x;
static PyObject *__pyx_n_s_angle_y;
static PyObject *__pyx_n_s_angle_z;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_aspect;
static PyObject *__pyx_n_s_axis;
static PyObject *__pyx_n_s_axis_2;
static PyObject *__pyx_n_s_axis_rotate;
static PyObject *__pyx_n_s_bottom;
static PyObject *__pyx_n_s_chain;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_col;
static PyObject *__pyx_n_s_columns_locals_genexpr;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_copy_2;
static PyObject *__pyx_n_s_cos_a;
static PyObject *__pyx_n_s_cx;
static PyObject *__pyx_n_s_cxsy;
static PyObject *__pyx_n_s_cy;
static PyObject *__pyx_n_s_cz;
static PyObject *__pyx_n_s_determinant;
static PyObject *__pyx_n_s_dx;
static PyObject *__pyx_n_s_dy;
static PyObject *__pyx_n_s_dz;
static PyObject *__pyx_n_s_ezdxf_acc_matrix44;
static PyObject *__pyx_n_s_ezdxf_eztypes;
static PyObject *__pyx_n_s_far;
static PyObject *__pyx_n_s_format_row;
static PyObject *__pyx_n_s_fov;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_get_col;
static PyObject *__pyx_n_s_get_row;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_imul;
static PyObject *__pyx_kp_u_index_out_of_range;
static PyObject *__pyx_kp_u_invalid_argument_count;
static PyObject *__pyx_kp_u_invalid_argument_count_4_row_vec;
static PyObject *__pyx_kp_u_invalid_col_index;
static PyObject *__pyx_kp_u_invalid_row_index;
static PyObject *__pyx_n_s_iter;
static PyObject *__pyx_n_s_itertools;
static PyObject *__pyx_n_s_left;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mat;
static PyObject *__pyx_n_s_math;
static PyObject *__pyx_n_s_matrices;
static PyObject *__pyx_n_s_matrix;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_near;
static PyObject *__pyx_n_s_normalize;
static PyObject *__pyx_n_s_ocs_from_wcs;
static PyObject *__pyx_n_s_ocs_to_wcs;
static PyObject *__pyx_n_s_one_m_cos;
static PyObject *__pyx_n_s_origin;
static PyObject *__pyx_n_s_origin_2;
static PyObject *__pyx_n_s_perspective_projection;
static PyObject *__pyx_n_s_perspective_projection_fov;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_repr___locals_format_row;
static PyObject *__pyx_n_s_repr___locals_format_row_local;
static PyObject *__pyx_n_s_repr___locals_genexpr;
static PyObject *__pyx_n_s_right;
static PyObject *__pyx_n_s_row;
static PyObject *__pyx_n_s_rows;
static PyObject *__pyx_n_s_rows_locals_genexpr;
static PyObject *__pyx_kp_u_s;
static PyObject *__pyx_n_s_scale;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_shear_xy;
static PyObject *__pyx_n_s_sin_a;
static PyObject *__pyx_kp_s_src_ezdxf_acc_matrix44_pyx;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_sx;
static PyObject *__pyx_n_s_sxsy;
static PyObject *__pyx_n_s_sy;
static PyObject *__pyx_n_s_sz;
static PyObject *__pyx_n_s_tan;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_top;
static PyObject *__pyx_n_s_transform_direction;
static PyObject *__pyx_n_s_transform_directions;
static PyObject *__pyx_n_s_transform_vertices;
static PyObject *__pyx_n_s_transformation;
static PyObject *__pyx_n_s_translate;
static PyObject *__pyx_n_s_tx;
static PyObject *__pyx_n_s_ty;
static PyObject *__pyx_n_s_typing;
static PyObject *__pyx_n_s_ucs;
static PyObject *__pyx_n_s_ucs_direction_from_wcs;
static PyObject *__pyx_n_s_ux;
static PyObject *__pyx_n_s_ux_2;
static PyObject *__pyx_n_s_uy;
static PyObject *__pyx_n_s_uy_2;
static PyObject *__pyx_n_s_uz;
static PyObject *__pyx_n_s_uz_2;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_n_s_vector;
static PyObject *__pyx_n_s_vectors;
static PyObject *__pyx_n_s_vrange;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_x_rotate;
static PyObject *__pyx_n_s_xyz_rotate;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_y_rotate;
static PyObject *__pyx_n_s_z;
static PyObject *__pyx_n_s_z_rotate;
static int __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44___cinit__(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_2__reduce__(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_4__getitem__(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_6__setitem__(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self, PyObject *__pyx_v_index, double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_8__iter__(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_8__repr___10format_row_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_8__repr___format_row(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_row); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_8__repr___2genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_11__repr__(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_13get_2d_transformation(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_15get_row(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self, int __pyx_v_row); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_17set_row(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self, int __pyx_v_row, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_19get_col(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self, int __pyx_v_col); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_21set_col(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self, int __pyx_v_col, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_4rows_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_23rows(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_7columns_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_25columns(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self); /* proto */
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_27copy(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_6origin___get__(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self); /* proto */
static int __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_6origin_2__set__(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_2ux___get__(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_2uy___get__(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_2uz___get__(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_12is_cartesian___get__(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_13is_orthogonal___get__(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self); /* proto */
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_29scale(double __pyx_v_sx, PyObject *__pyx_v_sy, PyObject *__pyx_v_sz); /* proto */
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_31translate(double __pyx_v_dx, double __pyx_v_dy, double __pyx_v_dz); /* proto */
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_33x_rotate(double __pyx_v_angle); /* proto */
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_35y_rotate(double __pyx_v_angle); /* proto */
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_37z_rotate(double __pyx_v_angle); /* proto */
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_39axis_rotate(PyObject *__pyx_v_axis, double __pyx_v_angle); /* proto */
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_41xyz_rotate(double __pyx_v_angle_x, double __pyx_v_angle_y, double __pyx_v_angle_z); /* proto */
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_43shear_xy(double __pyx_v_angle_x, double __pyx_v_angle_y); /* proto */
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_45perspective_projection(double __pyx_v_left, double __pyx_v_right, double __pyx_v_top, double __pyx_v_bottom, double __pyx_v_near, double __pyx_v_far); /* proto */
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_47perspective_projection_fov(double __pyx_v_fov, double __pyx_v_aspect, double __pyx_v_near, double __pyx_v_far); /* proto */
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_49chain(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_matrices); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_51__imul__(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self, struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_53__mul__(PyObject *__pyx_v_self, struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_other); /* proto */
#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_55__matmul__(PyObject *__pyx_v_self, struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_other); /* proto */
#endif
static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_57transpose(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_59determinant(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_61inverse(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self); /* proto */
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_63ucs(PyObject *__pyx_v_ux, PyObject *__pyx_v_uy, PyObject *__pyx_v_uz, PyObject *__pyx_v_origin); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_65transform(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self, PyObject *__pyx_v_vector); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_67transform_direction(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self, PyObject *__pyx_v_vector, PyObject *__pyx_v_normalize); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_69transform_vertices(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self, PyObject *__pyx_v_vectors); /* proto */
static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_72transform_directions(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self, PyObject *__pyx_v_vectors, PyObject *__pyx_v_normalize); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_75ucs_vertex_from_wcs(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_wcs); /* proto */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_77ucs_direction_from_wcs(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self, PyObject *__pyx_v_wcs); /* proto */
static PyObject *__pyx_tp_new_5ezdxf_3acc_8matrix44_Matrix44(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_float_1_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_13;
static PyObject *__pyx_k__7;
static PyObject *__pyx_k__8;
static PyObject *__pyx_k__9;
static PyObject *__pyx_k__10;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_codeobj__5;
static PyObject *__pyx_codeobj__12;
static PyObject *__pyx_codeobj__14;
static PyObject *__pyx_codeobj__16;
static PyObject *__pyx_codeobj__18;
static PyObject *__pyx_codeobj__20;
static PyObject *__pyx_codeobj__22;
static PyObject *__pyx_codeobj__24;
static PyObject *__pyx_codeobj__26;
static PyObject *__pyx_codeobj__28;
static PyObject *__pyx_codeobj__30;
static PyObject *__pyx_codeobj__32;
static PyObject *__pyx_codeobj__34;
/* Late includes */

/* "ezdxf/acc/matrix44.pyx":28
 * ]
 * 
 * cdef void set_floats(double *m, object values: Iterable[float]) except *:             # <<<<<<<<<<<<<<
 *     cdef int i = 0
 *     for v in values:
 */

static void __pyx_f_5ezdxf_3acc_8matrix44_set_floats(double *__pyx_v_m, PyObject *__pyx_v_values) {
  int __pyx_v_i;
  PyObject *__pyx_v_v = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_floats", 0);

  /* "ezdxf/acc/matrix44.pyx":29
 * 
 * cdef void set_floats(double *m, object values: Iterable[float]) except *:
 *     cdef int i = 0             # <<<<<<<<<<<<<<
 *     for v in values:
 *         if i < 16:  # Do not write beyond array bounds
 */
  __pyx_v_i = 0;

  /* "ezdxf/acc/matrix44.pyx":30
 * cdef void set_floats(double *m, object values: Iterable[float]) except *:
 *     cdef int i = 0
 *     for v in values:             # <<<<<<<<<<<<<<
 *         if i < 16:  # Do not write beyond array bounds
 *             m[i] = v
 */
  if (likely(PyList_CheckExact(__pyx_v_values)) || PyTuple_CheckExact(__pyx_v_values)) {
    __pyx_t_1 = __pyx_v_values; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_values); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 30, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 30, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 30, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 30, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 30, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 30, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "ezdxf/acc/matrix44.pyx":31
 *     cdef int i = 0
 *     for v in values:
 *         if i < 16:  # Do not write beyond array bounds             # <<<<<<<<<<<<<<
 *             m[i] = v
 *         i += 1
 */
    __pyx_t_5 = ((__pyx_v_i < 16) != 0);
    if (__pyx_t_5) {

      /* "ezdxf/acc/matrix44.pyx":32
 *     for v in values:
 *         if i < 16:  # Do not write beyond array bounds
 *             m[i] = v             # <<<<<<<<<<<<<<
 *         i += 1
 *     if i != 16:
 */
      __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_v); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 32, __pyx_L1_error)
      (__pyx_v_m[__pyx_v_i]) = __pyx_t_6;

      /* "ezdxf/acc/matrix44.pyx":31
 *     cdef int i = 0
 *     for v in values:
 *         if i < 16:  # Do not write beyond array bounds             # <<<<<<<<<<<<<<
 *             m[i] = v
 *         i += 1
 */
    }

    /* "ezdxf/acc/matrix44.pyx":33
 *         if i < 16:  # Do not write beyond array bounds
 *             m[i] = v
 *         i += 1             # <<<<<<<<<<<<<<
 *     if i != 16:
 *         raise ValueError("invalid argument count")
 */
    __pyx_v_i = (__pyx_v_i + 1);

    /* "ezdxf/acc/matrix44.pyx":30
 * cdef void set_floats(double *m, object values: Iterable[float]) except *:
 *     cdef int i = 0
 *     for v in values:             # <<<<<<<<<<<<<<
 *         if i < 16:  # Do not write beyond array bounds
 *             m[i] = v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":34
 *             m[i] = v
 *         i += 1
 *     if i != 16:             # <<<<<<<<<<<<<<
 *         raise ValueError("invalid argument count")
 * 
 */
  __pyx_t_5 = ((__pyx_v_i != 16) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "ezdxf/acc/matrix44.pyx":35
 *         i += 1
 *     if i != 16:
 *         raise ValueError("invalid argument count")             # <<<<<<<<<<<<<<
 * 
 * cdef class Matrix44:
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 35, __pyx_L1_error)

    /* "ezdxf/acc/matrix44.pyx":34
 *             m[i] = v
 *         i += 1
 *     if i != 16:             # <<<<<<<<<<<<<<
 *         raise ValueError("invalid argument count")
 * 
 */
  }

  /* "ezdxf/acc/matrix44.pyx":28
 * ]
 * 
 * cdef void set_floats(double *m, object values: Iterable[float]) except *:             # <<<<<<<<<<<<<<
 *     cdef int i = 0
 *     for v in values:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.set_floats", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_RefNannyFinishContext();
}

/* "ezdxf/acc/matrix44.pyx":38
 * 
 * cdef class Matrix44:
 *     def __cinit__(self, *args):             # <<<<<<<<<<<<<<
 *         cdef int nargs = len(args)
 *         if nargs == 0:  # default constructor Matrix44(): fastest setup
 */

/* Python wrapper */
static int __pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44___cinit__(((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44___cinit__(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self, PyObject *__pyx_v_args) {
  int __pyx_v_nargs;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "ezdxf/acc/matrix44.pyx":39
 * cdef class Matrix44:
 *     def __cinit__(self, *args):
 *         cdef int nargs = len(args)             # <<<<<<<<<<<<<<
 *         if nargs == 0:  # default constructor Matrix44(): fastest setup
 *             self.m = IDENTITY  # memcopy!
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 39, __pyx_L1_error)
  __pyx_v_nargs = __pyx_t_1;

  /* "ezdxf/acc/matrix44.pyx":40
 *     def __cinit__(self, *args):
 *         cdef int nargs = len(args)
 *         if nargs == 0:  # default constructor Matrix44(): fastest setup             # <<<<<<<<<<<<<<
 *             self.m = IDENTITY  # memcopy!
 *         elif nargs == 1:  # 16 numbers: slow setup
 */
  switch (__pyx_v_nargs) {
    case 0:

    /* "ezdxf/acc/matrix44.pyx":41
 *         cdef int nargs = len(args)
 *         if nargs == 0:  # default constructor Matrix44(): fastest setup
 *             self.m = IDENTITY  # memcopy!             # <<<<<<<<<<<<<<
 *         elif nargs == 1:  # 16 numbers: slow setup
 *             set_floats(self.m, args[0])
 */
    memcpy(&(__pyx_v_self->m[0]), __pyx_v_5ezdxf_3acc_8matrix44_IDENTITY, sizeof(__pyx_v_self->m[0]) * (16));

    /* "ezdxf/acc/matrix44.pyx":40
 *     def __cinit__(self, *args):
 *         cdef int nargs = len(args)
 *         if nargs == 0:  # default constructor Matrix44(): fastest setup             # <<<<<<<<<<<<<<
 *             self.m = IDENTITY  # memcopy!
 *         elif nargs == 1:  # 16 numbers: slow setup
 */
    break;
    case 1:

    /* "ezdxf/acc/matrix44.pyx":43
 *             self.m = IDENTITY  # memcopy!
 *         elif nargs == 1:  # 16 numbers: slow setup
 *             set_floats(self.m, args[0])             # <<<<<<<<<<<<<<
 *         elif nargs == 4:  # 4 rows of 4 numbers: slowest setup
 *             set_floats(self.m, chain(*args))
 */
    __pyx_t_2 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_f_5ezdxf_3acc_8matrix44_set_floats(__pyx_v_self->m, __pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 43, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ezdxf/acc/matrix44.pyx":42
 *         if nargs == 0:  # default constructor Matrix44(): fastest setup
 *             self.m = IDENTITY  # memcopy!
 *         elif nargs == 1:  # 16 numbers: slow setup             # <<<<<<<<<<<<<<
 *             set_floats(self.m, args[0])
 *         elif nargs == 4:  # 4 rows of 4 numbers: slowest setup
 */
    break;
    case 4:

    /* "ezdxf/acc/matrix44.pyx":45
 *             set_floats(self.m, args[0])
 *         elif nargs == 4:  # 4 rows of 4 numbers: slowest setup
 *             set_floats(self.m, chain(*args))             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("invalid argument count: 4 row vectors or "
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_chain); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_f_5ezdxf_3acc_8matrix44_set_floats(__pyx_v_self->m, __pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 45, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ezdxf/acc/matrix44.pyx":44
 *         elif nargs == 1:  # 16 numbers: slow setup
 *             set_floats(self.m, args[0])
 *         elif nargs == 4:  # 4 rows of 4 numbers: slowest setup             # <<<<<<<<<<<<<<
 *             set_floats(self.m, chain(*args))
 *         else:
 */
    break;
    default:

    /* "ezdxf/acc/matrix44.pyx":47
 *             set_floats(self.m, chain(*args))
 *         else:
 *             raise ValueError("invalid argument count: 4 row vectors or "             # <<<<<<<<<<<<<<
 *                              "iterable of 16 numbers")
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 47, __pyx_L1_error)
    break;
  }

  /* "ezdxf/acc/matrix44.pyx":38
 * 
 * cdef class Matrix44:
 *     def __cinit__(self, *args):             # <<<<<<<<<<<<<<
 *         cdef int nargs = len(args)
 *         if nargs == 0:  # default constructor Matrix44(): fastest setup
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":50
 *                              "iterable of 16 numbers")
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return Matrix44, (tuple(self),)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_3__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_3__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_2__reduce__(((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_2__reduce__(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "ezdxf/acc/matrix44.pyx":51
 * 
 *     def __reduce__(self):
 *         return Matrix44, (tuple(self),)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, tuple index: Tuple[int, int]) -> float:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PySequence_Tuple(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44));
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":50
 *                              "iterable of 16 numbers")
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return Matrix44, (tuple(self),)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":53
 *         return Matrix44, (tuple(self),)
 * 
 *     def __getitem__(self, tuple index: Tuple[int, int]) -> float:             # <<<<<<<<<<<<<<
 *         cdef int row = index[0]
 *         cdef int col = index[1]
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_index), (&PyTuple_Type), 1, "index", 1))) __PYX_ERR(0, 53, __pyx_L1_error)
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_4__getitem__(((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self), ((PyObject*)__pyx_v_index));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_4__getitem__(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self, PyObject *__pyx_v_index) {
  int __pyx_v_row;
  int __pyx_v_col;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "ezdxf/acc/matrix44.pyx":54
 * 
 *     def __getitem__(self, tuple index: Tuple[int, int]) -> float:
 *         cdef int row = index[0]             # <<<<<<<<<<<<<<
 *         cdef int col = index[1]
 *         cdef int i = row * 4 + col
 */
  if (unlikely(__pyx_v_index == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 54, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_index, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_row = __pyx_t_2;

  /* "ezdxf/acc/matrix44.pyx":55
 *     def __getitem__(self, tuple index: Tuple[int, int]) -> float:
 *         cdef int row = index[0]
 *         cdef int col = index[1]             # <<<<<<<<<<<<<<
 *         cdef int i = row * 4 + col
 * 
 */
  if (unlikely(__pyx_v_index == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 55, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_index, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_col = __pyx_t_2;

  /* "ezdxf/acc/matrix44.pyx":56
 *         cdef int row = index[0]
 *         cdef int col = index[1]
 *         cdef int i = row * 4 + col             # <<<<<<<<<<<<<<
 * 
 *         if 0 <= i < 16 and 0 <= col < 4:
 */
  __pyx_v_i = ((__pyx_v_row * 4) + __pyx_v_col);

  /* "ezdxf/acc/matrix44.pyx":58
 *         cdef int i = row * 4 + col
 * 
 *         if 0 <= i < 16 and 0 <= col < 4:             # <<<<<<<<<<<<<<
 *             return self.m[i]
 *         else:
 */
  __pyx_t_4 = (0 <= __pyx_v_i);
  if (__pyx_t_4) {
    __pyx_t_4 = (__pyx_v_i < 16);
  }
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = (0 <= __pyx_v_col);
  if (__pyx_t_5) {
    __pyx_t_5 = (__pyx_v_col < 4);
  }
  __pyx_t_4 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (likely(__pyx_t_3)) {

    /* "ezdxf/acc/matrix44.pyx":59
 * 
 *         if 0 <= i < 16 and 0 <= col < 4:
 *             return self.m[i]             # <<<<<<<<<<<<<<
 *         else:
 *             raise IndexError(f'index out of range: {index}')
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->m[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "ezdxf/acc/matrix44.pyx":58
 *         cdef int i = row * 4 + col
 * 
 *         if 0 <= i < 16 and 0 <= col < 4:             # <<<<<<<<<<<<<<
 *             return self.m[i]
 *         else:
 */
  }

  /* "ezdxf/acc/matrix44.pyx":61
 *             return self.m[i]
 *         else:
 *             raise IndexError(f'index out of range: {index}')             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, tuple index: Tuple[int, int], double value: float):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_index, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyUnicode_Concat(__pyx_kp_u_index_out_of_range, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 61, __pyx_L1_error)
  }

  /* "ezdxf/acc/matrix44.pyx":53
 *         return Matrix44, (tuple(self),)
 * 
 *     def __getitem__(self, tuple index: Tuple[int, int]) -> float:             # <<<<<<<<<<<<<<
 *         cdef int row = index[0]
 *         cdef int col = index[1]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":63
 *             raise IndexError(f'index out of range: {index}')
 * 
 *     def __setitem__(self, tuple index: Tuple[int, int], double value: float):             # <<<<<<<<<<<<<<
 *         cdef int row = index[0]
 *         cdef int col = index[1]
 */

/* Python wrapper */
static int __pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_7__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_7__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 63, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_index), (&PyTuple_Type), 1, "index", 1))) __PYX_ERR(0, 63, __pyx_L1_error)
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_6__setitem__(((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self), ((PyObject*)__pyx_v_index), ((double)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_6__setitem__(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self, PyObject *__pyx_v_index, double __pyx_v_value) {
  int __pyx_v_row;
  int __pyx_v_col;
  int __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "ezdxf/acc/matrix44.pyx":64
 * 
 *     def __setitem__(self, tuple index: Tuple[int, int], double value: float):
 *         cdef int row = index[0]             # <<<<<<<<<<<<<<
 *         cdef int col = index[1]
 *         cdef int i = row * 4 + col
 */
  if (unlikely(__pyx_v_index == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 64, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_index, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_row = __pyx_t_2;

  /* "ezdxf/acc/matrix44.pyx":65
 *     def __setitem__(self, tuple index: Tuple[int, int], double value: float):
 *         cdef int row = index[0]
 *         cdef int col = index[1]             # <<<<<<<<<<<<<<
 *         cdef int i = row * 4 + col
 * 
 */
  if (unlikely(__pyx_v_index == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 65, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_index, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_col = __pyx_t_2;

  /* "ezdxf/acc/matrix44.pyx":66
 *         cdef int row = index[0]
 *         cdef int col = index[1]
 *         cdef int i = row * 4 + col             # <<<<<<<<<<<<<<
 * 
 *         if 0 <= i < 16 and 0 <= col < 4:
 */
  __pyx_v_i = ((__pyx_v_row * 4) + __pyx_v_col);

  /* "ezdxf/acc/matrix44.pyx":68
 *         cdef int i = row * 4 + col
 * 
 *         if 0 <= i < 16 and 0 <= col < 4:             # <<<<<<<<<<<<<<
 *             self.m[i] = value
 *         else:
 */
  __pyx_t_4 = (0 <= __pyx_v_i);
  if (__pyx_t_4) {
    __pyx_t_4 = (__pyx_v_i < 16);
  }
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = (0 <= __pyx_v_col);
  if (__pyx_t_5) {
    __pyx_t_5 = (__pyx_v_col < 4);
  }
  __pyx_t_4 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (likely(__pyx_t_3)) {

    /* "ezdxf/acc/matrix44.pyx":69
 * 
 *         if 0 <= i < 16 and 0 <= col < 4:
 *             self.m[i] = value             # <<<<<<<<<<<<<<
 *         else:
 *             raise IndexError(f'index out of range: {index}')
 */
    (__pyx_v_self->m[__pyx_v_i]) = __pyx_v_value;

    /* "ezdxf/acc/matrix44.pyx":68
 *         cdef int i = row * 4 + col
 * 
 *         if 0 <= i < 16 and 0 <= col < 4:             # <<<<<<<<<<<<<<
 *             self.m[i] = value
 *         else:
 */
    goto __pyx_L3;
  }

  /* "ezdxf/acc/matrix44.pyx":71
 *             self.m[i] = value
 *         else:
 *             raise IndexError(f'index out of range: {index}')             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_index, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyUnicode_Concat(__pyx_kp_u_index_out_of_range, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 71, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "ezdxf/acc/matrix44.pyx":63
 *             raise IndexError(f'index out of range: {index}')
 * 
 *     def __setitem__(self, tuple index: Tuple[int, int], double value: float):             # <<<<<<<<<<<<<<
 *         cdef int row = index[0]
 *         cdef int col = index[1]
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5ezdxf_3acc_8matrix44_8Matrix44_10generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ezdxf/acc/matrix44.pyx":73
 *             raise IndexError(f'index out of range: {index}')
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(16):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_9__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_9__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_8__iter__(((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_8__iter__(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__ *)__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__(__pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 73, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5ezdxf_3acc_8matrix44_8Matrix44_10generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter, __pyx_n_s_Matrix44___iter, __pyx_n_s_ezdxf_acc_matrix44); if (unlikely(!gen)) __PYX_ERR(0, 73, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5ezdxf_3acc_8matrix44_8Matrix44_10generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__ *__pyx_cur_scope = ((struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 73, __pyx_L1_error)

  /* "ezdxf/acc/matrix44.pyx":75
 *     def __iter__(self):
 *         cdef int i
 *         for i in range(16):             # <<<<<<<<<<<<<<
 *             yield self.m[i]
 * 
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 16; __pyx_t_1+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_1;

    /* "ezdxf/acc/matrix44.pyx":76
 *         cdef int i
 *         for i in range(16):
 *             yield self.m[i]             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self) -> str:
 */
    __pyx_t_2 = PyFloat_FromDouble((__pyx_cur_scope->__pyx_v_self->m[__pyx_cur_scope->__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 76, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "ezdxf/acc/matrix44.pyx":73
 *             raise IndexError(f'index out of range: {index}')
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(16):
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":78
 *             yield self.m[i]
 * 
 *     def __repr__(self) -> str:             # <<<<<<<<<<<<<<
 *         def format_row(row):
 *             return "(%s)" % ", ".join(str(value) for value in row)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_12__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_12__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_11__repr__(((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":79
 * 
 *     def __repr__(self) -> str:
 *         def format_row(row):             # <<<<<<<<<<<<<<
 *             return "(%s)" % ", ".join(str(value) for value in row)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_8__repr___1format_row(PyObject *__pyx_self, PyObject *__pyx_v_row); /*proto*/
static PyMethodDef __pyx_mdef_5ezdxf_3acc_8matrix44_8Matrix44_8__repr___1format_row = {"format_row", (PyCFunction)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_8__repr___1format_row, METH_O, 0};
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_8__repr___1format_row(PyObject *__pyx_self, PyObject *__pyx_v_row) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("format_row (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_8__repr___format_row(__pyx_self, ((PyObject *)__pyx_v_row));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5ezdxf_3acc_8matrix44_8Matrix44_8__repr___10format_row_2generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ezdxf/acc/matrix44.pyx":80
 *     def __repr__(self) -> str:
 *         def format_row(row):
 *             return "(%s)" % ", ".join(str(value) for value in row)             # <<<<<<<<<<<<<<
 * 
 *         return "Matrix44(%s)" % \
 */

static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_8__repr___10format_row_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr *)__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr(__pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 80, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5ezdxf_3acc_8matrix44_8Matrix44_8__repr___10format_row_2generator3, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_repr___locals_format_row_local, __pyx_n_s_ezdxf_acc_matrix44); if (unlikely(!gen)) __PYX_ERR(0, 80, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.__repr__.format_row.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5ezdxf_3acc_8matrix44_8Matrix44_8__repr___10format_row_2generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 80, __pyx_L1_error)
  __pyx_r = PyList_New(0); if (unlikely(!__pyx_r)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_row)) { __Pyx_RaiseClosureNameError("row"); __PYX_ERR(0, 80, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_row)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_row)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_row; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_row); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 80, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 80, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 80, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 80, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 80, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 80, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_value);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_value, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_cur_scope->__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_r, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 80, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":79
 * 
 *     def __repr__(self) -> str:
 *         def format_row(row):             # <<<<<<<<<<<<<<
 *             return "(%s)" % ", ".join(str(value) for value in row)
 * 
 */

static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_8__repr___format_row(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_row) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("format_row", 0);
  __pyx_cur_scope = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row *)__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row(__pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 79, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_row = __pyx_v_row;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_row);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_row);

  /* "ezdxf/acc/matrix44.pyx":80
 *     def __repr__(self) -> str:
 *         def format_row(row):
 *             return "(%s)" % ", ".join(str(value) for value in row)             # <<<<<<<<<<<<<<
 * 
 *         return "Matrix44(%s)" % \
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_8__repr___10format_row_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyUnicode_Join(__pyx_kp_u__3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyUnicode_Format(__pyx_kp_u_s, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":79
 * 
 *     def __repr__(self) -> str:
 *         def format_row(row):             # <<<<<<<<<<<<<<
 *             return "(%s)" % ", ".join(str(value) for value in row)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.__repr__.format_row", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5ezdxf_3acc_8matrix44_8Matrix44_8__repr___4generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ezdxf/acc/matrix44.pyx":83
 * 
 *         return "Matrix44(%s)" % \
 *                ", ".join(format_row(row) for row in self.rows())             # <<<<<<<<<<<<<<
 * 
 *     def get_2d_transformation(self) -> Tuple[float, ...]:
 */

static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_8__repr___2genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr *)__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr(__pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 83, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5ezdxf_3acc_8matrix44_8Matrix44_8__repr___4generator4, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_repr___locals_genexpr, __pyx_n_s_ezdxf_acc_matrix44); if (unlikely(!gen)) __PYX_ERR(0, 83, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.__repr__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5ezdxf_3acc_8matrix44_8Matrix44_8__repr___4generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 83, __pyx_L1_error)
  __pyx_r = PyList_New(0); if (unlikely(!__pyx_r)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 83, __pyx_L1_error) }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self), __pyx_n_s_rows); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 83, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 83, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 83, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 83, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_row);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_row, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_format_row)) { __Pyx_RaiseClosureNameError("format_row"); __PYX_ERR(0, 83, __pyx_L1_error) }
    __pyx_t_1 = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_8__repr___format_row(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_format_row, __pyx_cur_scope->__pyx_v_row); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__Pyx_ListComp_Append(__pyx_r, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 83, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":78
 *             yield self.m[i]
 * 
 *     def __repr__(self) -> str:             # <<<<<<<<<<<<<<
 *         def format_row(row):
 *             return "(%s)" % ", ".join(str(value) for value in row)
 */

static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_11__repr__(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);
  __pyx_cur_scope = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__ *)__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__(__pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 78, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "ezdxf/acc/matrix44.pyx":79
 * 
 *     def __repr__(self) -> str:
 *         def format_row(row):             # <<<<<<<<<<<<<<
 *             return "(%s)" % ", ".join(str(value) for value in row)
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_5ezdxf_3acc_8matrix44_8Matrix44_8__repr___1format_row, 0, __pyx_n_s_repr___locals_format_row, NULL, __pyx_n_s_ezdxf_acc_matrix44, __pyx_d, ((PyObject *)__pyx_codeobj__5)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_format_row = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":82
 *             return "(%s)" % ", ".join(str(value) for value in row)
 * 
 *         return "Matrix44(%s)" % \             # <<<<<<<<<<<<<<
 *                ", ".join(format_row(row) for row in self.rows())
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "ezdxf/acc/matrix44.pyx":83
 * 
 *         return "Matrix44(%s)" % \
 *                ", ".join(format_row(row) for row in self.rows())             # <<<<<<<<<<<<<<
 * 
 *     def get_2d_transformation(self) -> Tuple[float, ...]:
 */
  __pyx_t_1 = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_8__repr___2genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyUnicode_Join(__pyx_kp_u__3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ezdxf/acc/matrix44.pyx":82
 *             return "(%s)" % ", ".join(str(value) for value in row)
 * 
 *         return "Matrix44(%s)" % \             # <<<<<<<<<<<<<<
 *                ", ".join(format_row(row) for row in self.rows())
 * 
 */
  __pyx_t_2 = PyUnicode_Format(__pyx_kp_u_Matrix44_s, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":78
 *             yield self.m[i]
 * 
 *     def __repr__(self) -> str:             # <<<<<<<<<<<<<<
 *         def format_row(row):
 *             return "(%s)" % ", ".join(str(value) for value in row)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":85
 *                ", ".join(format_row(row) for row in self.rows())
 * 
 *     def get_2d_transformation(self) -> Tuple[float, ...]:             # <<<<<<<<<<<<<<
 *         cdef double *m = self.m
 *         return m[0], m[1], 0.0, m[4], m[5], 0.0, m[12], m[13], 1.0
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_14get_2d_transformation(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_14get_2d_transformation(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_2d_transformation (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_13get_2d_transformation(((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_13get_2d_transformation(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self) {
  double *__pyx_v_m;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_2d_transformation", 0);

  /* "ezdxf/acc/matrix44.pyx":86
 * 
 *     def get_2d_transformation(self) -> Tuple[float, ...]:
 *         cdef double *m = self.m             # <<<<<<<<<<<<<<
 *         return m[0], m[1], 0.0, m[4], m[5], 0.0, m[12], m[13], 1.0
 * 
 */
  __pyx_t_1 = __pyx_v_self->m;
  __pyx_v_m = __pyx_t_1;

  /* "ezdxf/acc/matrix44.pyx":87
 *     def get_2d_transformation(self) -> Tuple[float, ...]:
 *         cdef double *m = self.m
 *         return m[0], m[1], 0.0, m[4], m[5], 0.0, m[12], m[13], 1.0             # <<<<<<<<<<<<<<
 * 
 *     def get_row(self, int row) -> Tuple[float, ...]:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_m[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_m[1])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble((__pyx_v_m[4])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_m[5])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble((__pyx_v_m[12])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_m[13])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_3);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_8, 4, __pyx_t_5);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  PyTuple_SET_ITEM(__pyx_t_8, 5, __pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_8, 6, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 7, __pyx_t_7);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  PyTuple_SET_ITEM(__pyx_t_8, 8, __pyx_float_1_0);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":85
 *                ", ".join(format_row(row) for row in self.rows())
 * 
 *     def get_2d_transformation(self) -> Tuple[float, ...]:             # <<<<<<<<<<<<<<
 *         cdef double *m = self.m
 *         return m[0], m[1], 0.0, m[4], m[5], 0.0, m[12], m[13], 1.0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.get_2d_transformation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":89
 *         return m[0], m[1], 0.0, m[4], m[5], 0.0, m[12], m[13], 1.0
 * 
 *     def get_row(self, int row) -> Tuple[float, ...]:             # <<<<<<<<<<<<<<
 *         cdef index = row * 4
 *         if 0 <= index < 13:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_16get_row(PyObject *__pyx_v_self, PyObject *__pyx_arg_row); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_16get_row(PyObject *__pyx_v_self, PyObject *__pyx_arg_row) {
  int __pyx_v_row;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_row (wrapper)", 0);
  assert(__pyx_arg_row); {
    __pyx_v_row = __Pyx_PyInt_As_int(__pyx_arg_row); if (unlikely((__pyx_v_row == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 89, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.get_row", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_15get_row(((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self), ((int)__pyx_v_row));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_15get_row(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self, int __pyx_v_row) {
  PyObject *__pyx_v_index = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_row", 0);

  /* "ezdxf/acc/matrix44.pyx":90
 * 
 *     def get_row(self, int row) -> Tuple[float, ...]:
 *         cdef index = row * 4             # <<<<<<<<<<<<<<
 *         if 0 <= index < 13:
 *             return self.m[index], self.m[index + 1], self.m[index + 2], self.m[
 */
  __pyx_t_1 = __Pyx_PyInt_From_long((__pyx_v_row * 4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_index = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":91
 *     def get_row(self, int row) -> Tuple[float, ...]:
 *         cdef index = row * 4
 *         if 0 <= index < 13:             # <<<<<<<<<<<<<<
 *             return self.m[index], self.m[index + 1], self.m[index + 2], self.m[
 *                 index + 3]
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_int_0, __pyx_v_index, Py_LE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 91, __pyx_L1_error)
  if (__Pyx_PyObject_IsTrue(__pyx_t_1)) {
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_index, __pyx_int_13, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 91, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_2)) {

    /* "ezdxf/acc/matrix44.pyx":92
 *         cdef index = row * 4
 *         if 0 <= index < 13:
 *             return self.m[index], self.m[index + 1], self.m[index + 2], self.m[             # <<<<<<<<<<<<<<
 *                 index + 3]
 *         else:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_v_index); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 92, __pyx_L1_error)
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->m[__pyx_t_3])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_index, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_t_4); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 92, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyFloat_FromDouble((__pyx_v_self->m[__pyx_t_3])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_v_index, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 92, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_self->m[__pyx_t_3])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "ezdxf/acc/matrix44.pyx":93
 *         if 0 <= index < 13:
 *             return self.m[index], self.m[index + 1], self.m[index + 2], self.m[
 *                 index + 3]             # <<<<<<<<<<<<<<
 *         else:
 *             raise IndexError(f'invalid row index: {row}')
 */
    __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_v_index, __pyx_int_3, 3, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_t_6); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "ezdxf/acc/matrix44.pyx":92
 *         cdef index = row * 4
 *         if 0 <= index < 13:
 *             return self.m[index], self.m[index + 1], self.m[index + 2], self.m[             # <<<<<<<<<<<<<<
 *                 index + 3]
 *         else:
 */
    __pyx_t_6 = PyFloat_FromDouble((__pyx_v_self->m[__pyx_t_3])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_6);
    __pyx_t_1 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;

    /* "ezdxf/acc/matrix44.pyx":91
 *     def get_row(self, int row) -> Tuple[float, ...]:
 *         cdef index = row * 4
 *         if 0 <= index < 13:             # <<<<<<<<<<<<<<
 *             return self.m[index], self.m[index + 1], self.m[index + 2], self.m[
 *                 index + 3]
 */
  }

  /* "ezdxf/acc/matrix44.pyx":95
 *                 index + 3]
 *         else:
 *             raise IndexError(f'invalid row index: {row}')             # <<<<<<<<<<<<<<
 * 
 *     def set_row(self, int row, values: Sequence[float]) -> None:
 */
  /*else*/ {
    __pyx_t_7 = __Pyx_PyUnicode_From_int(__pyx_v_row, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyUnicode_Concat(__pyx_kp_u_invalid_row_index, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __PYX_ERR(0, 95, __pyx_L1_error)
  }

  /* "ezdxf/acc/matrix44.pyx":89
 *         return m[0], m[1], 0.0, m[4], m[5], 0.0, m[12], m[13], 1.0
 * 
 *     def get_row(self, int row) -> Tuple[float, ...]:             # <<<<<<<<<<<<<<
 *         cdef index = row * 4
 *         if 0 <= index < 13:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.get_row", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":97
 *             raise IndexError(f'invalid row index: {row}')
 * 
 *     def set_row(self, int row, values: Sequence[float]) -> None:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t count = len(values)
 *         cdef Py_ssize_t start = row * 4
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_18set_row(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_18set_row(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_row;
  PyObject *__pyx_v_values = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_row (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_row,&__pyx_n_s_values,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_row)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_values)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_row", 1, 2, 2, 1); __PYX_ERR(0, 97, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_row") < 0)) __PYX_ERR(0, 97, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_row = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_row == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 97, __pyx_L3_error)
    __pyx_v_values = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_row", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 97, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.set_row", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_17set_row(((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self), __pyx_v_row, __pyx_v_values);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_17set_row(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self, int __pyx_v_row, PyObject *__pyx_v_values) {
  Py_ssize_t __pyx_v_count;
  Py_ssize_t __pyx_v_start;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_row", 0);

  /* "ezdxf/acc/matrix44.pyx":98
 * 
 *     def set_row(self, int row, values: Sequence[float]) -> None:
 *         cdef Py_ssize_t count = len(values)             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t start = row * 4
 *         cdef Py_ssize_t i
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 98, __pyx_L1_error)
  __pyx_v_count = __pyx_t_1;

  /* "ezdxf/acc/matrix44.pyx":99
 *     def set_row(self, int row, values: Sequence[float]) -> None:
 *         cdef Py_ssize_t count = len(values)
 *         cdef Py_ssize_t start = row * 4             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t i
 *         if 0 <= row < 4:
 */
  __pyx_v_start = (__pyx_v_row * 4);

  /* "ezdxf/acc/matrix44.pyx":101
 *         cdef Py_ssize_t start = row * 4
 *         cdef Py_ssize_t i
 *         if 0 <= row < 4:             # <<<<<<<<<<<<<<
 *             if count > 4:
 *                 count = 4
 */
  __pyx_t_2 = (0 <= __pyx_v_row);
  if (__pyx_t_2) {
    __pyx_t_2 = (__pyx_v_row < 4);
  }
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_3)) {

    /* "ezdxf/acc/matrix44.pyx":102
 *         cdef Py_ssize_t i
 *         if 0 <= row < 4:
 *             if count > 4:             # <<<<<<<<<<<<<<
 *                 count = 4
 *             for i in range(count):
 */
    __pyx_t_3 = ((__pyx_v_count > 4) != 0);
    if (__pyx_t_3) {

      /* "ezdxf/acc/matrix44.pyx":103
 *         if 0 <= row < 4:
 *             if count > 4:
 *                 count = 4             # <<<<<<<<<<<<<<
 *             for i in range(count):
 *                 self.m[start + i] = values[i]
 */
      __pyx_v_count = 4;

      /* "ezdxf/acc/matrix44.pyx":102
 *         cdef Py_ssize_t i
 *         if 0 <= row < 4:
 *             if count > 4:             # <<<<<<<<<<<<<<
 *                 count = 4
 *             for i in range(count):
 */
    }

    /* "ezdxf/acc/matrix44.pyx":104
 *             if count > 4:
 *                 count = 4
 *             for i in range(count):             # <<<<<<<<<<<<<<
 *                 self.m[start + i] = values[i]
 *         else:
 */
    __pyx_t_1 = __pyx_v_count;
    __pyx_t_4 = __pyx_t_1;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "ezdxf/acc/matrix44.pyx":105
 *                 count = 4
 *             for i in range(count):
 *                 self.m[start + i] = values[i]             # <<<<<<<<<<<<<<
 *         else:
 *             raise IndexError(f'invalid row index: {row}')
 */
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_values, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 105, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 105, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      (__pyx_v_self->m[(__pyx_v_start + __pyx_v_i)]) = __pyx_t_7;
    }

    /* "ezdxf/acc/matrix44.pyx":101
 *         cdef Py_ssize_t start = row * 4
 *         cdef Py_ssize_t i
 *         if 0 <= row < 4:             # <<<<<<<<<<<<<<
 *             if count > 4:
 *                 count = 4
 */
    goto __pyx_L3;
  }

  /* "ezdxf/acc/matrix44.pyx":107
 *                 self.m[start + i] = values[i]
 *         else:
 *             raise IndexError(f'invalid row index: {row}')             # <<<<<<<<<<<<<<
 * 
 *     def get_col(self, int col) -> Tuple[float, ...]:
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyUnicode_From_int(__pyx_v_row, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_PyUnicode_Concat(__pyx_kp_u_invalid_row_index, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 107, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "ezdxf/acc/matrix44.pyx":97
 *             raise IndexError(f'invalid row index: {row}')
 * 
 *     def set_row(self, int row, values: Sequence[float]) -> None:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t count = len(values)
 *         cdef Py_ssize_t start = row * 4
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.set_row", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":109
 *             raise IndexError(f'invalid row index: {row}')
 * 
 *     def get_col(self, int col) -> Tuple[float, ...]:             # <<<<<<<<<<<<<<
 *         if 0 <= col < 4:
 *             return self.m[col], self.m[col + 4], \
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_20get_col(PyObject *__pyx_v_self, PyObject *__pyx_arg_col); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_20get_col(PyObject *__pyx_v_self, PyObject *__pyx_arg_col) {
  int __pyx_v_col;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_col (wrapper)", 0);
  assert(__pyx_arg_col); {
    __pyx_v_col = __Pyx_PyInt_As_int(__pyx_arg_col); if (unlikely((__pyx_v_col == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 109, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.get_col", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_19get_col(((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self), ((int)__pyx_v_col));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_19get_col(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self, int __pyx_v_col) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_col", 0);

  /* "ezdxf/acc/matrix44.pyx":110
 * 
 *     def get_col(self, int col) -> Tuple[float, ...]:
 *         if 0 <= col < 4:             # <<<<<<<<<<<<<<
 *             return self.m[col], self.m[col + 4], \
 *                    self.m[col + 8], self.m[col + 12]
 */
  __pyx_t_1 = (0 <= __pyx_v_col);
  if (__pyx_t_1) {
    __pyx_t_1 = (__pyx_v_col < 4);
  }
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "ezdxf/acc/matrix44.pyx":111
 *     def get_col(self, int col) -> Tuple[float, ...]:
 *         if 0 <= col < 4:
 *             return self.m[col], self.m[col + 4], \             # <<<<<<<<<<<<<<
 *                    self.m[col + 8], self.m[col + 12]
 *         else:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyFloat_FromDouble((__pyx_v_self->m[__pyx_v_col])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyFloat_FromDouble((__pyx_v_self->m[(__pyx_v_col + 4)])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);

    /* "ezdxf/acc/matrix44.pyx":112
 *         if 0 <= col < 4:
 *             return self.m[col], self.m[col + 4], \
 *                    self.m[col + 8], self.m[col + 12]             # <<<<<<<<<<<<<<
 *         else:
 *             raise IndexError(f'invalid col index: {col}')
 */
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_self->m[(__pyx_v_col + 8)])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyFloat_FromDouble((__pyx_v_self->m[(__pyx_v_col + 12)])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);

    /* "ezdxf/acc/matrix44.pyx":111
 *     def get_col(self, int col) -> Tuple[float, ...]:
 *         if 0 <= col < 4:
 *             return self.m[col], self.m[col + 4], \             # <<<<<<<<<<<<<<
 *                    self.m[col + 8], self.m[col + 12]
 *         else:
 */
    __pyx_t_7 = PyTuple_New(4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_6);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;

    /* "ezdxf/acc/matrix44.pyx":110
 * 
 *     def get_col(self, int col) -> Tuple[float, ...]:
 *         if 0 <= col < 4:             # <<<<<<<<<<<<<<
 *             return self.m[col], self.m[col + 4], \
 *                    self.m[col + 8], self.m[col + 12]
 */
  }

  /* "ezdxf/acc/matrix44.pyx":114
 *                    self.m[col + 8], self.m[col + 12]
 *         else:
 *             raise IndexError(f'invalid col index: {col}')             # <<<<<<<<<<<<<<
 * 
 *     def set_col(self, int col, values: Sequence[float]):
 */
  /*else*/ {
    __pyx_t_7 = __Pyx_PyUnicode_From_int(__pyx_v_col, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyUnicode_Concat(__pyx_kp_u_invalid_col_index, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __PYX_ERR(0, 114, __pyx_L1_error)
  }

  /* "ezdxf/acc/matrix44.pyx":109
 *             raise IndexError(f'invalid row index: {row}')
 * 
 *     def get_col(self, int col) -> Tuple[float, ...]:             # <<<<<<<<<<<<<<
 *         if 0 <= col < 4:
 *             return self.m[col], self.m[col + 4], \
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.get_col", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":116
 *             raise IndexError(f'invalid col index: {col}')
 * 
 *     def set_col(self, int col, values: Sequence[float]):             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t count = len(values)
 *         cdef Py_ssize_t i
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_22set_col(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_22set_col(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_col;
  PyObject *__pyx_v_values = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_col (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_col,&__pyx_n_s_values,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_col)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_values)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_col", 1, 2, 2, 1); __PYX_ERR(0, 116, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_col") < 0)) __PYX_ERR(0, 116, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_col = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_col == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 116, __pyx_L3_error)
    __pyx_v_values = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_col", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 116, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.set_col", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_21set_col(((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self), __pyx_v_col, __pyx_v_values);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_21set_col(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self, int __pyx_v_col, PyObject *__pyx_v_values) {
  Py_ssize_t __pyx_v_count;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_col", 0);

  /* "ezdxf/acc/matrix44.pyx":117
 * 
 *     def set_col(self, int col, values: Sequence[float]):
 *         cdef Py_ssize_t count = len(values)             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t i
 *         if 0 <= col < 4:
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 117, __pyx_L1_error)
  __pyx_v_count = __pyx_t_1;

  /* "ezdxf/acc/matrix44.pyx":119
 *         cdef Py_ssize_t count = len(values)
 *         cdef Py_ssize_t i
 *         if 0 <= col < 4:             # <<<<<<<<<<<<<<
 *             if count > 4:
 *                 count = 4
 */
  __pyx_t_2 = (0 <= __pyx_v_col);
  if (__pyx_t_2) {
    __pyx_t_2 = (__pyx_v_col < 4);
  }
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_3)) {

    /* "ezdxf/acc/matrix44.pyx":120
 *         cdef Py_ssize_t i
 *         if 0 <= col < 4:
 *             if count > 4:             # <<<<<<<<<<<<<<
 *                 count = 4
 *             for i in range(count):
 */
    __pyx_t_3 = ((__pyx_v_count > 4) != 0);
    if (__pyx_t_3) {

      /* "ezdxf/acc/matrix44.pyx":121
 *         if 0 <= col < 4:
 *             if count > 4:
 *                 count = 4             # <<<<<<<<<<<<<<
 *             for i in range(count):
 *                 self.m[col + i * 4] = values[i]
 */
      __pyx_v_count = 4;

      /* "ezdxf/acc/matrix44.pyx":120
 *         cdef Py_ssize_t i
 *         if 0 <= col < 4:
 *             if count > 4:             # <<<<<<<<<<<<<<
 *                 count = 4
 *             for i in range(count):
 */
    }

    /* "ezdxf/acc/matrix44.pyx":122
 *             if count > 4:
 *                 count = 4
 *             for i in range(count):             # <<<<<<<<<<<<<<
 *                 self.m[col + i * 4] = values[i]
 *         else:
 */
    __pyx_t_1 = __pyx_v_count;
    __pyx_t_4 = __pyx_t_1;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "ezdxf/acc/matrix44.pyx":123
 *                 count = 4
 *             for i in range(count):
 *                 self.m[col + i * 4] = values[i]             # <<<<<<<<<<<<<<
 *         else:
 *             raise IndexError(f'invalid col index: {col}')
 */
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_values, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 123, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 123, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      (__pyx_v_self->m[(__pyx_v_col + (__pyx_v_i * 4))]) = __pyx_t_7;
    }

    /* "ezdxf/acc/matrix44.pyx":119
 *         cdef Py_ssize_t count = len(values)
 *         cdef Py_ssize_t i
 *         if 0 <= col < 4:             # <<<<<<<<<<<<<<
 *             if count > 4:
 *                 count = 4
 */
    goto __pyx_L3;
  }

  /* "ezdxf/acc/matrix44.pyx":125
 *                 self.m[col + i * 4] = values[i]
 *         else:
 *             raise IndexError(f'invalid col index: {col}')             # <<<<<<<<<<<<<<
 * 
 *     def rows(self) -> Iterable[Tuple[float, ...]]:
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyUnicode_From_int(__pyx_v_col, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_PyUnicode_Concat(__pyx_kp_u_invalid_col_index, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 125, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "ezdxf/acc/matrix44.pyx":116
 *             raise IndexError(f'invalid col index: {col}')
 * 
 *     def set_col(self, int col, values: Sequence[float]):             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t count = len(values)
 *         cdef Py_ssize_t i
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.set_col", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":127
 *             raise IndexError(f'invalid col index: {col}')
 * 
 *     def rows(self) -> Iterable[Tuple[float, ...]]:             # <<<<<<<<<<<<<<
 *         return (self.get_row(index) for index in (0, 1, 2, 3))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_24rows(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_24rows(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rows (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_23rows(((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5ezdxf_3acc_8matrix44_8Matrix44_4rows_2generator5(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ezdxf/acc/matrix44.pyx":128
 * 
 *     def rows(self) -> Iterable[Tuple[float, ...]]:
 *         return (self.get_row(index) for index in (0, 1, 2, 3))             # <<<<<<<<<<<<<<
 * 
 *     def columns(self) -> Iterable[Tuple[float, ...]]:
 */

static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_4rows_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr *)__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr(__pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 128, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5ezdxf_3acc_8matrix44_8Matrix44_4rows_2generator5, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_rows_locals_genexpr, __pyx_n_s_ezdxf_acc_matrix44); if (unlikely(!gen)) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.rows.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5ezdxf_3acc_8matrix44_8Matrix44_4rows_2generator5(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 128, __pyx_L1_error)
  __pyx_t_1 = __pyx_tuple__6; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= 4) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 128, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_index);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_index, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 128, __pyx_L1_error) }
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self), __pyx_n_s_get_row); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_cur_scope->__pyx_v_index) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_cur_scope->__pyx_v_index);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 128, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":127
 *             raise IndexError(f'invalid col index: {col}')
 * 
 *     def rows(self) -> Iterable[Tuple[float, ...]]:             # <<<<<<<<<<<<<<
 *         return (self.get_row(index) for index in (0, 1, 2, 3))
 * 
 */

static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_23rows(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rows", 0);
  __pyx_cur_scope = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows *)__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows(__pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 127, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "ezdxf/acc/matrix44.pyx":128
 * 
 *     def rows(self) -> Iterable[Tuple[float, ...]]:
 *         return (self.get_row(index) for index in (0, 1, 2, 3))             # <<<<<<<<<<<<<<
 * 
 *     def columns(self) -> Iterable[Tuple[float, ...]]:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_4rows_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":127
 *             raise IndexError(f'invalid col index: {col}')
 * 
 *     def rows(self) -> Iterable[Tuple[float, ...]]:             # <<<<<<<<<<<<<<
 *         return (self.get_row(index) for index in (0, 1, 2, 3))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.rows", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":130
 *         return (self.get_row(index) for index in (0, 1, 2, 3))
 * 
 *     def columns(self) -> Iterable[Tuple[float, ...]]:             # <<<<<<<<<<<<<<
 *         return (self.get_col(index) for index in (0, 1, 2, 3))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_26columns(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_26columns(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("columns (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_25columns(((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5ezdxf_3acc_8matrix44_8Matrix44_7columns_2generator6(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ezdxf/acc/matrix44.pyx":131
 * 
 *     def columns(self) -> Iterable[Tuple[float, ...]]:
 *         return (self.get_col(index) for index in (0, 1, 2, 3))             # <<<<<<<<<<<<<<
 * 
 *     def copy(self) -> 'Matrix44':
 */

static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_7columns_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr *)__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr(__pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 131, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5ezdxf_3acc_8matrix44_8Matrix44_7columns_2generator6, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_columns_locals_genexpr, __pyx_n_s_ezdxf_acc_matrix44); if (unlikely(!gen)) __PYX_ERR(0, 131, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.columns.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5ezdxf_3acc_8matrix44_8Matrix44_7columns_2generator6(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 131, __pyx_L1_error)
  __pyx_t_1 = __pyx_tuple__6; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= 4) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 131, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_index);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_index, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 131, __pyx_L1_error) }
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self), __pyx_n_s_get_col); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_cur_scope->__pyx_v_index) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_cur_scope->__pyx_v_index);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 131, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":130
 *         return (self.get_row(index) for index in (0, 1, 2, 3))
 * 
 *     def columns(self) -> Iterable[Tuple[float, ...]]:             # <<<<<<<<<<<<<<
 *         return (self.get_col(index) for index in (0, 1, 2, 3))
 * 
 */

static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_25columns(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("columns", 0);
  __pyx_cur_scope = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns *)__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns(__pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 130, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "ezdxf/acc/matrix44.pyx":131
 * 
 *     def columns(self) -> Iterable[Tuple[float, ...]]:
 *         return (self.get_col(index) for index in (0, 1, 2, 3))             # <<<<<<<<<<<<<<
 * 
 *     def copy(self) -> 'Matrix44':
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_7columns_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":130
 *         return (self.get_row(index) for index in (0, 1, 2, 3))
 * 
 *     def columns(self) -> Iterable[Tuple[float, ...]]:             # <<<<<<<<<<<<<<
 *         return (self.get_col(index) for index in (0, 1, 2, 3))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.columns", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":133
 *         return (self.get_col(index) for index in (0, 1, 2, 3))
 * 
 *     def copy(self) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 _copy = Matrix44()
 *         _copy.m = self.m
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_28copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_28copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_27copy(((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_27copy(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v__copy = 0;
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "ezdxf/acc/matrix44.pyx":134
 * 
 *     def copy(self) -> 'Matrix44':
 *         cdef Matrix44 _copy = Matrix44()             # <<<<<<<<<<<<<<
 *         _copy.m = self.m
 *         return _copy
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__copy = ((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":135
 *     def copy(self) -> 'Matrix44':
 *         cdef Matrix44 _copy = Matrix44()
 *         _copy.m = self.m             # <<<<<<<<<<<<<<
 *         return _copy
 * 
 */
  __pyx_t_2 = __pyx_v_self->m;
  memcpy(&(__pyx_v__copy->m[0]), __pyx_t_2, sizeof(__pyx_v__copy->m[0]) * (16 - 0));

  /* "ezdxf/acc/matrix44.pyx":136
 *         cdef Matrix44 _copy = Matrix44()
 *         _copy.m = self.m
 *         return _copy             # <<<<<<<<<<<<<<
 * 
 *     __copy__ = copy
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v__copy));
  __pyx_r = __pyx_v__copy;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":133
 *         return (self.get_col(index) for index in (0, 1, 2, 3))
 * 
 *     def copy(self) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 _copy = Matrix44()
 *         _copy.m = self.m
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v__copy);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":141
 * 
 *     @property
 *     def origin(self) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         cdef Vec3 v = Vec3()
 *         v.x = self.m[12]
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_6origin_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_6origin_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_6origin___get__(((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_6origin___get__(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_v = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "ezdxf/acc/matrix44.pyx":142
 *     @property
 *     def origin(self) -> 'Vec3':
 *         cdef Vec3 v = Vec3()             # <<<<<<<<<<<<<<
 *         v.x = self.m[12]
 *         v.y = self.m[13]
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_v = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":143
 *     def origin(self) -> 'Vec3':
 *         cdef Vec3 v = Vec3()
 *         v.x = self.m[12]             # <<<<<<<<<<<<<<
 *         v.y = self.m[13]
 *         v.z = self.m[14]
 */
  __pyx_v_v->x = (__pyx_v_self->m[12]);

  /* "ezdxf/acc/matrix44.pyx":144
 *         cdef Vec3 v = Vec3()
 *         v.x = self.m[12]
 *         v.y = self.m[13]             # <<<<<<<<<<<<<<
 *         v.z = self.m[14]
 *         return v
 */
  __pyx_v_v->y = (__pyx_v_self->m[13]);

  /* "ezdxf/acc/matrix44.pyx":145
 *         v.x = self.m[12]
 *         v.y = self.m[13]
 *         v.z = self.m[14]             # <<<<<<<<<<<<<<
 *         return v
 * 
 */
  __pyx_v_v->z = (__pyx_v_self->m[14]);

  /* "ezdxf/acc/matrix44.pyx":146
 *         v.y = self.m[13]
 *         v.z = self.m[14]
 *         return v             # <<<<<<<<<<<<<<
 * 
 *     @origin.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_v));
  __pyx_r = ((PyObject *)__pyx_v_v);
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":141
 * 
 *     @property
 *     def origin(self) -> 'Vec3':             # <<<<<<<<<<<<<<
 *         cdef Vec3 v = Vec3()
 *         v.x = self.m[12]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.origin.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":149
 * 
 *     @origin.setter
 *     def origin(self, v: 'Vertex') -> None:             # <<<<<<<<<<<<<<
 *         cdef Vec3 origin = Vec3(v)
 *         self.m[12] = origin.x
 */

/* Python wrapper */
static int __pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_6origin_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static int __pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_6origin_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_6origin_2__set__(((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_6origin_2__set__(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self, PyObject *__pyx_v_v) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_origin = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "ezdxf/acc/matrix44.pyx":150
 *     @origin.setter
 *     def origin(self, v: 'Vertex') -> None:
 *         cdef Vec3 origin = Vec3(v)             # <<<<<<<<<<<<<<
 *         self.m[12] = origin.x
 *         self.m[13] = origin.y
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_v_v); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_origin = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":151
 *     def origin(self, v: 'Vertex') -> None:
 *         cdef Vec3 origin = Vec3(v)
 *         self.m[12] = origin.x             # <<<<<<<<<<<<<<
 *         self.m[13] = origin.y
 *         self.m[14] = origin.z
 */
  __pyx_t_2 = __pyx_v_origin->x;
  (__pyx_v_self->m[12]) = __pyx_t_2;

  /* "ezdxf/acc/matrix44.pyx":152
 *         cdef Vec3 origin = Vec3(v)
 *         self.m[12] = origin.x
 *         self.m[13] = origin.y             # <<<<<<<<<<<<<<
 *         self.m[14] = origin.z
 * 
 */
  __pyx_t_2 = __pyx_v_origin->y;
  (__pyx_v_self->m[13]) = __pyx_t_2;

  /* "ezdxf/acc/matrix44.pyx":153
 *         self.m[12] = origin.x
 *         self.m[13] = origin.y
 *         self.m[14] = origin.z             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_2 = __pyx_v_origin->z;
  (__pyx_v_self->m[14]) = __pyx_t_2;

  /* "ezdxf/acc/matrix44.pyx":149
 * 
 *     @origin.setter
 *     def origin(self, v: 'Vertex') -> None:             # <<<<<<<<<<<<<<
 *         cdef Vec3 origin = Vec3(v)
 *         self.m[12] = origin.x
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.origin.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_origin);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":156
 * 
 *     @property
 *     def ux(self) -> Vec3:             # <<<<<<<<<<<<<<
 *         return self.get_ux()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_2ux_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_2ux_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_2ux___get__(((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_2ux___get__(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "ezdxf/acc/matrix44.pyx":157
 *     @property
 *     def ux(self) -> Vec3:
 *         return self.get_ux()             # <<<<<<<<<<<<<<
 * 
 *     cdef Vec3 get_ux(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self->__pyx_vtab)->get_ux(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":156
 * 
 *     @property
 *     def ux(self) -> Vec3:             # <<<<<<<<<<<<<<
 *         return self.get_ux()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.ux.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":159
 *         return self.get_ux()
 * 
 *     cdef Vec3 get_ux(self):             # <<<<<<<<<<<<<<
 *         cdef Vec3 v = Vec3()
 *         v.x = self.m[0]
 */

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_f_5ezdxf_3acc_8matrix44_8Matrix44_get_ux(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_v = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_ux", 0);

  /* "ezdxf/acc/matrix44.pyx":160
 * 
 *     cdef Vec3 get_ux(self):
 *         cdef Vec3 v = Vec3()             # <<<<<<<<<<<<<<
 *         v.x = self.m[0]
 *         v.y = self.m[1]
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_v = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":161
 *     cdef Vec3 get_ux(self):
 *         cdef Vec3 v = Vec3()
 *         v.x = self.m[0]             # <<<<<<<<<<<<<<
 *         v.y = self.m[1]
 *         v.z = self.m[2]
 */
  __pyx_v_v->x = (__pyx_v_self->m[0]);

  /* "ezdxf/acc/matrix44.pyx":162
 *         cdef Vec3 v = Vec3()
 *         v.x = self.m[0]
 *         v.y = self.m[1]             # <<<<<<<<<<<<<<
 *         v.z = self.m[2]
 *         return v
 */
  __pyx_v_v->y = (__pyx_v_self->m[1]);

  /* "ezdxf/acc/matrix44.pyx":163
 *         v.x = self.m[0]
 *         v.y = self.m[1]
 *         v.z = self.m[2]             # <<<<<<<<<<<<<<
 *         return v
 * 
 */
  __pyx_v_v->z = (__pyx_v_self->m[2]);

  /* "ezdxf/acc/matrix44.pyx":164
 *         v.y = self.m[1]
 *         v.z = self.m[2]
 *         return v             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_v));
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":159
 *         return self.get_ux()
 * 
 *     cdef Vec3 get_ux(self):             # <<<<<<<<<<<<<<
 *         cdef Vec3 v = Vec3()
 *         v.x = self.m[0]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.get_ux", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_v);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":167
 * 
 *     @property
 *     def uy(self) -> Vec3:             # <<<<<<<<<<<<<<
 *         return self.get_uy()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_2uy_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_2uy_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_2uy___get__(((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_2uy___get__(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "ezdxf/acc/matrix44.pyx":168
 *     @property
 *     def uy(self) -> Vec3:
 *         return self.get_uy()             # <<<<<<<<<<<<<<
 * 
 *     cdef Vec3 get_uy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self->__pyx_vtab)->get_uy(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":167
 * 
 *     @property
 *     def uy(self) -> Vec3:             # <<<<<<<<<<<<<<
 *         return self.get_uy()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.uy.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":170
 *         return self.get_uy()
 * 
 *     cdef Vec3 get_uy(self):             # <<<<<<<<<<<<<<
 *         cdef Vec3 v = Vec3()
 *         v.x = self.m[4]
 */

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_f_5ezdxf_3acc_8matrix44_8Matrix44_get_uy(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_v = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_uy", 0);

  /* "ezdxf/acc/matrix44.pyx":171
 * 
 *     cdef Vec3 get_uy(self):
 *         cdef Vec3 v = Vec3()             # <<<<<<<<<<<<<<
 *         v.x = self.m[4]
 *         v.y = self.m[5]
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_v = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":172
 *     cdef Vec3 get_uy(self):
 *         cdef Vec3 v = Vec3()
 *         v.x = self.m[4]             # <<<<<<<<<<<<<<
 *         v.y = self.m[5]
 *         v.z = self.m[6]
 */
  __pyx_v_v->x = (__pyx_v_self->m[4]);

  /* "ezdxf/acc/matrix44.pyx":173
 *         cdef Vec3 v = Vec3()
 *         v.x = self.m[4]
 *         v.y = self.m[5]             # <<<<<<<<<<<<<<
 *         v.z = self.m[6]
 *         return v
 */
  __pyx_v_v->y = (__pyx_v_self->m[5]);

  /* "ezdxf/acc/matrix44.pyx":174
 *         v.x = self.m[4]
 *         v.y = self.m[5]
 *         v.z = self.m[6]             # <<<<<<<<<<<<<<
 *         return v
 * 
 */
  __pyx_v_v->z = (__pyx_v_self->m[6]);

  /* "ezdxf/acc/matrix44.pyx":175
 *         v.y = self.m[5]
 *         v.z = self.m[6]
 *         return v             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_v));
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":170
 *         return self.get_uy()
 * 
 *     cdef Vec3 get_uy(self):             # <<<<<<<<<<<<<<
 *         cdef Vec3 v = Vec3()
 *         v.x = self.m[4]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.get_uy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_v);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":178
 * 
 *     @property
 *     def uz(self) -> Vec3:             # <<<<<<<<<<<<<<
 *         return self.get_uz()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_2uz_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_2uz_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_2uz___get__(((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_2uz___get__(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "ezdxf/acc/matrix44.pyx":179
 *     @property
 *     def uz(self) -> Vec3:
 *         return self.get_uz()             # <<<<<<<<<<<<<<
 * 
 *     cdef Vec3 get_uz(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self->__pyx_vtab)->get_uz(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":178
 * 
 *     @property
 *     def uz(self) -> Vec3:             # <<<<<<<<<<<<<<
 *         return self.get_uz()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.uz.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":181
 *         return self.get_uz()
 * 
 *     cdef Vec3 get_uz(self):             # <<<<<<<<<<<<<<
 *         cdef Vec3 v = Vec3()
 *         v.x = self.m[8]
 */

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_f_5ezdxf_3acc_8matrix44_8Matrix44_get_uz(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_v = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_uz", 0);

  /* "ezdxf/acc/matrix44.pyx":182
 * 
 *     cdef Vec3 get_uz(self):
 *         cdef Vec3 v = Vec3()             # <<<<<<<<<<<<<<
 *         v.x = self.m[8]
 *         v.y = self.m[9]
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_v = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":183
 *     cdef Vec3 get_uz(self):
 *         cdef Vec3 v = Vec3()
 *         v.x = self.m[8]             # <<<<<<<<<<<<<<
 *         v.y = self.m[9]
 *         v.z = self.m[10]
 */
  __pyx_v_v->x = (__pyx_v_self->m[8]);

  /* "ezdxf/acc/matrix44.pyx":184
 *         cdef Vec3 v = Vec3()
 *         v.x = self.m[8]
 *         v.y = self.m[9]             # <<<<<<<<<<<<<<
 *         v.z = self.m[10]
 *         return v
 */
  __pyx_v_v->y = (__pyx_v_self->m[9]);

  /* "ezdxf/acc/matrix44.pyx":185
 *         v.x = self.m[8]
 *         v.y = self.m[9]
 *         v.z = self.m[10]             # <<<<<<<<<<<<<<
 *         return v
 * 
 */
  __pyx_v_v->z = (__pyx_v_self->m[10]);

  /* "ezdxf/acc/matrix44.pyx":186
 *         v.y = self.m[9]
 *         v.z = self.m[10]
 *         return v             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_v));
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":181
 *         return self.get_uz()
 * 
 *     cdef Vec3 get_uz(self):             # <<<<<<<<<<<<<<
 *         cdef Vec3 v = Vec3()
 *         v.x = self.m[8]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.get_uz", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_v);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":189
 * 
 *     @property
 *     def is_cartesian(self) -> bool:             # <<<<<<<<<<<<<<
 *         cdef Vec3 x_axis = v3_cross(self.get_uy(), self.get_uz())
 *         return v3_isclose(x_axis, self.get_ux(), REL_TOL, ABS_TOL)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_12is_cartesian_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_12is_cartesian_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_12is_cartesian___get__(((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_12is_cartesian___get__(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_x_axis = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "ezdxf/acc/matrix44.pyx":190
 *     @property
 *     def is_cartesian(self) -> bool:
 *         cdef Vec3 x_axis = v3_cross(self.get_uy(), self.get_uz())             # <<<<<<<<<<<<<<
 *         return v3_isclose(x_axis, self.get_ux(), REL_TOL, ABS_TOL)
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self->__pyx_vtab)->get_uy(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self->__pyx_vtab)->get_uz(__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_cross(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1), ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_2))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_x_axis = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "ezdxf/acc/matrix44.pyx":191
 *     def is_cartesian(self) -> bool:
 *         cdef Vec3 x_axis = v3_cross(self.get_uy(), self.get_uz())
 *         return v3_isclose(x_axis, self.get_ux(), REL_TOL, ABS_TOL)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self->__pyx_vtab)->get_ux(__pyx_v_self)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_f_5ezdxf_3acc_6vector_v3_isclose(__pyx_v_x_axis, ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_3), 1e-09, 1e-12)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":189
 * 
 *     @property
 *     def is_cartesian(self) -> bool:             # <<<<<<<<<<<<<<
 *         cdef Vec3 x_axis = v3_cross(self.get_uy(), self.get_uz())
 *         return v3_isclose(x_axis, self.get_ux(), REL_TOL, ABS_TOL)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.is_cartesian.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_x_axis);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":194
 * 
 *     @property
 *     def is_orthogonal(self) -> bool:             # <<<<<<<<<<<<<<
 *         cdef Vec3 ux = v3_normalize(self.get_ux(), 1.0)
 *         cdef Vec3 uy = v3_normalize(self.get_uy(), 1.0)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_13is_orthogonal_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_13is_orthogonal_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_13is_orthogonal___get__(((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_13is_orthogonal___get__(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_ux = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_uy = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_uz = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "ezdxf/acc/matrix44.pyx":195
 *     @property
 *     def is_orthogonal(self) -> bool:
 *         cdef Vec3 ux = v3_normalize(self.get_ux(), 1.0)             # <<<<<<<<<<<<<<
 *         cdef Vec3 uy = v3_normalize(self.get_uy(), 1.0)
 *         cdef Vec3 uz = v3_normalize(self.get_uz(), 1.0)
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self->__pyx_vtab)->get_ux(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_normalize(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1), 1.0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_ux = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ezdxf/acc/matrix44.pyx":196
 *     def is_orthogonal(self) -> bool:
 *         cdef Vec3 ux = v3_normalize(self.get_ux(), 1.0)
 *         cdef Vec3 uy = v3_normalize(self.get_uy(), 1.0)             # <<<<<<<<<<<<<<
 *         cdef Vec3 uz = v3_normalize(self.get_uz(), 1.0)
 *         return fabs(v3_dot(ux, uy)) < 1e-9 and \
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self->__pyx_vtab)->get_uy(__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_normalize(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_2), 1.0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_uy = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":197
 *         cdef Vec3 ux = v3_normalize(self.get_ux(), 1.0)
 *         cdef Vec3 uy = v3_normalize(self.get_uy(), 1.0)
 *         cdef Vec3 uz = v3_normalize(self.get_uz(), 1.0)             # <<<<<<<<<<<<<<
 *         return fabs(v3_dot(ux, uy)) < 1e-9 and \
 *                fabs(v3_dot(ux, uz)) < 1e-9 and \
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self->__pyx_vtab)->get_uz(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_normalize(((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1), 1.0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_uz = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ezdxf/acc/matrix44.pyx":198
 *         cdef Vec3 uy = v3_normalize(self.get_uy(), 1.0)
 *         cdef Vec3 uz = v3_normalize(self.get_uz(), 1.0)
 *         return fabs(v3_dot(ux, uy)) < 1e-9 and \             # <<<<<<<<<<<<<<
 *                fabs(v3_dot(ux, uz)) < 1e-9 and \
 *                fabs(v3_dot(uy, uz)) < 1e-9
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = (fabs(__pyx_f_5ezdxf_3acc_6vector_v3_dot(__pyx_v_ux, __pyx_v_uy)) < 1e-9);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L3_bool_binop_done;
  }

  /* "ezdxf/acc/matrix44.pyx":199
 *         cdef Vec3 uz = v3_normalize(self.get_uz(), 1.0)
 *         return fabs(v3_dot(ux, uy)) < 1e-9 and \
 *                fabs(v3_dot(ux, uz)) < 1e-9 and \             # <<<<<<<<<<<<<<
 *                fabs(v3_dot(uy, uz)) < 1e-9
 * 
 */
  __pyx_t_3 = (fabs(__pyx_f_5ezdxf_3acc_6vector_v3_dot(__pyx_v_ux, __pyx_v_uz)) < 1e-9);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L3_bool_binop_done;
  }

  /* "ezdxf/acc/matrix44.pyx":200
 *         return fabs(v3_dot(ux, uy)) < 1e-9 and \
 *                fabs(v3_dot(ux, uz)) < 1e-9 and \
 *                fabs(v3_dot(uy, uz)) < 1e-9             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_3 = (fabs(__pyx_f_5ezdxf_3acc_6vector_v3_dot(__pyx_v_uy, __pyx_v_uz)) < 1e-9);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":194
 * 
 *     @property
 *     def is_orthogonal(self) -> bool:             # <<<<<<<<<<<<<<
 *         cdef Vec3 ux = v3_normalize(self.get_ux(), 1.0)
 *         cdef Vec3 uy = v3_normalize(self.get_uy(), 1.0)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.is_orthogonal.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ux);
  __Pyx_XDECREF((PyObject *)__pyx_v_uy);
  __Pyx_XDECREF((PyObject *)__pyx_v_uz);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":203
 * 
 *     @staticmethod
 *     def scale(double sx, sy = None, sz = None) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         mat.m[0] = sx
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_30scale(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5ezdxf_3acc_8matrix44_8Matrix44_30scale = {"scale", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_30scale, METH_VARARGS|METH_KEYWORDS, 0};
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_30scale(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_sx;
  PyObject *__pyx_v_sy = 0;
  PyObject *__pyx_v_sz = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scale (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sx,&__pyx_n_s_sy,&__pyx_n_s_sz,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sx)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sy);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sz);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scale") < 0)) __PYX_ERR(0, 203, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_sx = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_sx == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 203, __pyx_L3_error)
    __pyx_v_sy = values[1];
    __pyx_v_sz = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scale", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 203, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.scale", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_29scale(__pyx_v_sx, __pyx_v_sy, __pyx_v_sz);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_29scale(double __pyx_v_sx, PyObject *__pyx_v_sy, PyObject *__pyx_v_sz) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_mat = 0;
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_t_3;
  double __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scale", 0);

  /* "ezdxf/acc/matrix44.pyx":204
 *     @staticmethod
 *     def scale(double sx, sy = None, sz = None) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()             # <<<<<<<<<<<<<<
 *         mat.m[0] = sx
 *         mat.m[5] = sx if sy is None else sy
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_mat = ((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":205
 *     def scale(double sx, sy = None, sz = None) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()
 *         mat.m[0] = sx             # <<<<<<<<<<<<<<
 *         mat.m[5] = sx if sy is None else sy
 *         mat.m[10] = sx if sz is None else sz
 */
  (__pyx_v_mat->m[0]) = __pyx_v_sx;

  /* "ezdxf/acc/matrix44.pyx":206
 *         cdef Matrix44 mat = Matrix44()
 *         mat.m[0] = sx
 *         mat.m[5] = sx if sy is None else sy             # <<<<<<<<<<<<<<
 *         mat.m[10] = sx if sz is None else sz
 *         return mat
 */
  __pyx_t_3 = (__pyx_v_sy == Py_None);
  if ((__pyx_t_3 != 0)) {
    __pyx_t_2 = __pyx_v_sx;
  } else {
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_sy); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 206, __pyx_L1_error)
    __pyx_t_2 = __pyx_t_4;
  }
  (__pyx_v_mat->m[5]) = __pyx_t_2;

  /* "ezdxf/acc/matrix44.pyx":207
 *         mat.m[0] = sx
 *         mat.m[5] = sx if sy is None else sy
 *         mat.m[10] = sx if sz is None else sz             # <<<<<<<<<<<<<<
 *         return mat
 * 
 */
  __pyx_t_3 = (__pyx_v_sz == Py_None);
  if ((__pyx_t_3 != 0)) {
    __pyx_t_2 = __pyx_v_sx;
  } else {
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_sz); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 207, __pyx_L1_error)
    __pyx_t_2 = __pyx_t_4;
  }
  (__pyx_v_mat->m[10]) = __pyx_t_2;

  /* "ezdxf/acc/matrix44.pyx":208
 *         mat.m[5] = sx if sy is None else sy
 *         mat.m[10] = sx if sz is None else sz
 *         return mat             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_mat));
  __pyx_r = __pyx_v_mat;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":203
 * 
 *     @staticmethod
 *     def scale(double sx, sy = None, sz = None) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         mat.m[0] = sx
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.scale", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mat);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":211
 * 
 *     @staticmethod
 *     def translate(double dx, double dy, double dz) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         mat.m[12] = dx
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_32translate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5ezdxf_3acc_8matrix44_8Matrix44_32translate = {"translate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_32translate, METH_VARARGS|METH_KEYWORDS, 0};
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_32translate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_dx;
  double __pyx_v_dy;
  double __pyx_v_dz;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("translate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dx,&__pyx_n_s_dy,&__pyx_n_s_dz,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dx)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("translate", 1, 3, 3, 1); __PYX_ERR(0, 211, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("translate", 1, 3, 3, 2); __PYX_ERR(0, 211, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "translate") < 0)) __PYX_ERR(0, 211, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_dx = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_dx == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 211, __pyx_L3_error)
    __pyx_v_dy = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_dy == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 211, __pyx_L3_error)
    __pyx_v_dz = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_dz == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 211, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("translate", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 211, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.translate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_31translate(__pyx_v_dx, __pyx_v_dy, __pyx_v_dz);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_31translate(double __pyx_v_dx, double __pyx_v_dy, double __pyx_v_dz) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_mat = 0;
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("translate", 0);

  /* "ezdxf/acc/matrix44.pyx":212
 *     @staticmethod
 *     def translate(double dx, double dy, double dz) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()             # <<<<<<<<<<<<<<
 *         mat.m[12] = dx
 *         mat.m[13] = dy
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_mat = ((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":213
 *     def translate(double dx, double dy, double dz) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()
 *         mat.m[12] = dx             # <<<<<<<<<<<<<<
 *         mat.m[13] = dy
 *         mat.m[14] = dz
 */
  (__pyx_v_mat->m[12]) = __pyx_v_dx;

  /* "ezdxf/acc/matrix44.pyx":214
 *         cdef Matrix44 mat = Matrix44()
 *         mat.m[12] = dx
 *         mat.m[13] = dy             # <<<<<<<<<<<<<<
 *         mat.m[14] = dz
 *         return mat
 */
  (__pyx_v_mat->m[13]) = __pyx_v_dy;

  /* "ezdxf/acc/matrix44.pyx":215
 *         mat.m[12] = dx
 *         mat.m[13] = dy
 *         mat.m[14] = dz             # <<<<<<<<<<<<<<
 *         return mat
 * 
 */
  (__pyx_v_mat->m[14]) = __pyx_v_dz;

  /* "ezdxf/acc/matrix44.pyx":216
 *         mat.m[13] = dy
 *         mat.m[14] = dz
 *         return mat             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_mat));
  __pyx_r = __pyx_v_mat;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":211
 * 
 *     @staticmethod
 *     def translate(double dx, double dy, double dz) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         mat.m[12] = dx
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.translate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mat);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":219
 * 
 *     @staticmethod
 *     def x_rotate(double angle) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double cos_a = cos(angle)
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_34x_rotate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5ezdxf_3acc_8matrix44_8Matrix44_34x_rotate = {"x_rotate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_34x_rotate, METH_VARARGS|METH_KEYWORDS, 0};
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_34x_rotate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_angle;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("x_rotate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_angle,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_angle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "x_rotate") < 0)) __PYX_ERR(0, 219, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_angle = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_angle == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 219, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("x_rotate", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 219, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.x_rotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_33x_rotate(__pyx_v_angle);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_33x_rotate(double __pyx_v_angle) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_mat = 0;
  double __pyx_v_cos_a;
  double __pyx_v_sin_a;
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("x_rotate", 0);

  /* "ezdxf/acc/matrix44.pyx":220
 *     @staticmethod
 *     def x_rotate(double angle) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()             # <<<<<<<<<<<<<<
 *         cdef double cos_a = cos(angle)
 *         cdef double sin_a = sin(angle)
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_mat = ((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":221
 *     def x_rotate(double angle) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double cos_a = cos(angle)             # <<<<<<<<<<<<<<
 *         cdef double sin_a = sin(angle)
 *         mat.m[5] = cos_a
 */
  __pyx_v_cos_a = cos(__pyx_v_angle);

  /* "ezdxf/acc/matrix44.pyx":222
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double cos_a = cos(angle)
 *         cdef double sin_a = sin(angle)             # <<<<<<<<<<<<<<
 *         mat.m[5] = cos_a
 *         mat.m[6] = sin_a
 */
  __pyx_v_sin_a = sin(__pyx_v_angle);

  /* "ezdxf/acc/matrix44.pyx":223
 *         cdef double cos_a = cos(angle)
 *         cdef double sin_a = sin(angle)
 *         mat.m[5] = cos_a             # <<<<<<<<<<<<<<
 *         mat.m[6] = sin_a
 *         mat.m[9] = -sin_a
 */
  (__pyx_v_mat->m[5]) = __pyx_v_cos_a;

  /* "ezdxf/acc/matrix44.pyx":224
 *         cdef double sin_a = sin(angle)
 *         mat.m[5] = cos_a
 *         mat.m[6] = sin_a             # <<<<<<<<<<<<<<
 *         mat.m[9] = -sin_a
 *         mat.m[10] = cos_a
 */
  (__pyx_v_mat->m[6]) = __pyx_v_sin_a;

  /* "ezdxf/acc/matrix44.pyx":225
 *         mat.m[5] = cos_a
 *         mat.m[6] = sin_a
 *         mat.m[9] = -sin_a             # <<<<<<<<<<<<<<
 *         mat.m[10] = cos_a
 *         return mat
 */
  (__pyx_v_mat->m[9]) = (-__pyx_v_sin_a);

  /* "ezdxf/acc/matrix44.pyx":226
 *         mat.m[6] = sin_a
 *         mat.m[9] = -sin_a
 *         mat.m[10] = cos_a             # <<<<<<<<<<<<<<
 *         return mat
 * 
 */
  (__pyx_v_mat->m[10]) = __pyx_v_cos_a;

  /* "ezdxf/acc/matrix44.pyx":227
 *         mat.m[9] = -sin_a
 *         mat.m[10] = cos_a
 *         return mat             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_mat));
  __pyx_r = __pyx_v_mat;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":219
 * 
 *     @staticmethod
 *     def x_rotate(double angle) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double cos_a = cos(angle)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.x_rotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mat);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":230
 * 
 *     @staticmethod
 *     def y_rotate(double angle) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double cos_a = cos(angle)
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_36y_rotate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5ezdxf_3acc_8matrix44_8Matrix44_36y_rotate = {"y_rotate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_36y_rotate, METH_VARARGS|METH_KEYWORDS, 0};
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_36y_rotate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_angle;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("y_rotate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_angle,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_angle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "y_rotate") < 0)) __PYX_ERR(0, 230, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_angle = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_angle == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 230, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("y_rotate", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 230, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.y_rotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_35y_rotate(__pyx_v_angle);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_35y_rotate(double __pyx_v_angle) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_mat = 0;
  double __pyx_v_cos_a;
  double __pyx_v_sin_a;
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("y_rotate", 0);

  /* "ezdxf/acc/matrix44.pyx":231
 *     @staticmethod
 *     def y_rotate(double angle) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()             # <<<<<<<<<<<<<<
 *         cdef double cos_a = cos(angle)
 *         cdef double sin_a = sin(angle)
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_mat = ((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":232
 *     def y_rotate(double angle) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double cos_a = cos(angle)             # <<<<<<<<<<<<<<
 *         cdef double sin_a = sin(angle)
 *         mat.m[0] = cos_a
 */
  __pyx_v_cos_a = cos(__pyx_v_angle);

  /* "ezdxf/acc/matrix44.pyx":233
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double cos_a = cos(angle)
 *         cdef double sin_a = sin(angle)             # <<<<<<<<<<<<<<
 *         mat.m[0] = cos_a
 *         mat.m[2] = -sin_a
 */
  __pyx_v_sin_a = sin(__pyx_v_angle);

  /* "ezdxf/acc/matrix44.pyx":234
 *         cdef double cos_a = cos(angle)
 *         cdef double sin_a = sin(angle)
 *         mat.m[0] = cos_a             # <<<<<<<<<<<<<<
 *         mat.m[2] = -sin_a
 *         mat.m[8] = sin_a
 */
  (__pyx_v_mat->m[0]) = __pyx_v_cos_a;

  /* "ezdxf/acc/matrix44.pyx":235
 *         cdef double sin_a = sin(angle)
 *         mat.m[0] = cos_a
 *         mat.m[2] = -sin_a             # <<<<<<<<<<<<<<
 *         mat.m[8] = sin_a
 *         mat.m[10] = cos_a
 */
  (__pyx_v_mat->m[2]) = (-__pyx_v_sin_a);

  /* "ezdxf/acc/matrix44.pyx":236
 *         mat.m[0] = cos_a
 *         mat.m[2] = -sin_a
 *         mat.m[8] = sin_a             # <<<<<<<<<<<<<<
 *         mat.m[10] = cos_a
 *         return mat
 */
  (__pyx_v_mat->m[8]) = __pyx_v_sin_a;

  /* "ezdxf/acc/matrix44.pyx":237
 *         mat.m[2] = -sin_a
 *         mat.m[8] = sin_a
 *         mat.m[10] = cos_a             # <<<<<<<<<<<<<<
 *         return mat
 * 
 */
  (__pyx_v_mat->m[10]) = __pyx_v_cos_a;

  /* "ezdxf/acc/matrix44.pyx":238
 *         mat.m[8] = sin_a
 *         mat.m[10] = cos_a
 *         return mat             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_mat));
  __pyx_r = __pyx_v_mat;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":230
 * 
 *     @staticmethod
 *     def y_rotate(double angle) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double cos_a = cos(angle)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.y_rotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mat);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":241
 * 
 *     @staticmethod
 *     def z_rotate(double angle) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double cos_a = cos(angle)
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_38z_rotate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5ezdxf_3acc_8matrix44_8Matrix44_38z_rotate = {"z_rotate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_38z_rotate, METH_VARARGS|METH_KEYWORDS, 0};
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_38z_rotate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_angle;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("z_rotate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_angle,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_angle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "z_rotate") < 0)) __PYX_ERR(0, 241, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_angle = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_angle == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 241, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("z_rotate", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 241, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.z_rotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_37z_rotate(__pyx_v_angle);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_37z_rotate(double __pyx_v_angle) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_mat = 0;
  double __pyx_v_cos_a;
  double __pyx_v_sin_a;
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("z_rotate", 0);

  /* "ezdxf/acc/matrix44.pyx":242
 *     @staticmethod
 *     def z_rotate(double angle) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()             # <<<<<<<<<<<<<<
 *         cdef double cos_a = cos(angle)
 *         cdef double sin_a = sin(angle)
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_mat = ((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":243
 *     def z_rotate(double angle) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double cos_a = cos(angle)             # <<<<<<<<<<<<<<
 *         cdef double sin_a = sin(angle)
 *         mat.m[0] = cos_a
 */
  __pyx_v_cos_a = cos(__pyx_v_angle);

  /* "ezdxf/acc/matrix44.pyx":244
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double cos_a = cos(angle)
 *         cdef double sin_a = sin(angle)             # <<<<<<<<<<<<<<
 *         mat.m[0] = cos_a
 *         mat.m[1] = sin_a
 */
  __pyx_v_sin_a = sin(__pyx_v_angle);

  /* "ezdxf/acc/matrix44.pyx":245
 *         cdef double cos_a = cos(angle)
 *         cdef double sin_a = sin(angle)
 *         mat.m[0] = cos_a             # <<<<<<<<<<<<<<
 *         mat.m[1] = sin_a
 *         mat.m[4] = -sin_a
 */
  (__pyx_v_mat->m[0]) = __pyx_v_cos_a;

  /* "ezdxf/acc/matrix44.pyx":246
 *         cdef double sin_a = sin(angle)
 *         mat.m[0] = cos_a
 *         mat.m[1] = sin_a             # <<<<<<<<<<<<<<
 *         mat.m[4] = -sin_a
 *         mat.m[5] = cos_a
 */
  (__pyx_v_mat->m[1]) = __pyx_v_sin_a;

  /* "ezdxf/acc/matrix44.pyx":247
 *         mat.m[0] = cos_a
 *         mat.m[1] = sin_a
 *         mat.m[4] = -sin_a             # <<<<<<<<<<<<<<
 *         mat.m[5] = cos_a
 *         return mat
 */
  (__pyx_v_mat->m[4]) = (-__pyx_v_sin_a);

  /* "ezdxf/acc/matrix44.pyx":248
 *         mat.m[1] = sin_a
 *         mat.m[4] = -sin_a
 *         mat.m[5] = cos_a             # <<<<<<<<<<<<<<
 *         return mat
 * 
 */
  (__pyx_v_mat->m[5]) = __pyx_v_cos_a;

  /* "ezdxf/acc/matrix44.pyx":249
 *         mat.m[4] = -sin_a
 *         mat.m[5] = cos_a
 *         return mat             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_mat));
  __pyx_r = __pyx_v_mat;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":241
 * 
 *     @staticmethod
 *     def z_rotate(double angle) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double cos_a = cos(angle)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.z_rotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mat);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":252
 * 
 *     @staticmethod
 *     def axis_rotate(axis: 'Vertex', double angle) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double cos_a = cos(angle)
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_40axis_rotate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5ezdxf_3acc_8matrix44_8Matrix44_40axis_rotate = {"axis_rotate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_40axis_rotate, METH_VARARGS|METH_KEYWORDS, 0};
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_40axis_rotate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_axis = 0;
  double __pyx_v_angle;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("axis_rotate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_axis,&__pyx_n_s_angle,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_axis)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_angle)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("axis_rotate", 1, 2, 2, 1); __PYX_ERR(0, 252, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "axis_rotate") < 0)) __PYX_ERR(0, 252, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_axis = values[0];
    __pyx_v_angle = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_angle == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 252, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("axis_rotate", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 252, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.axis_rotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_39axis_rotate(__pyx_v_axis, __pyx_v_angle);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_39axis_rotate(PyObject *__pyx_v_axis, double __pyx_v_angle) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_mat = 0;
  double __pyx_v_cos_a;
  double __pyx_v_sin_a;
  double __pyx_v_one_m_cos;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v__axis = 0;
  double __pyx_v_x;
  double __pyx_v_y;
  double __pyx_v_z;
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("axis_rotate", 0);

  /* "ezdxf/acc/matrix44.pyx":253
 *     @staticmethod
 *     def axis_rotate(axis: 'Vertex', double angle) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()             # <<<<<<<<<<<<<<
 *         cdef double cos_a = cos(angle)
 *         cdef double sin_a = sin(angle)
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_mat = ((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":254
 *     def axis_rotate(axis: 'Vertex', double angle) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double cos_a = cos(angle)             # <<<<<<<<<<<<<<
 *         cdef double sin_a = sin(angle)
 *         cdef double one_m_cos = 1.0 - cos_a
 */
  __pyx_v_cos_a = cos(__pyx_v_angle);

  /* "ezdxf/acc/matrix44.pyx":255
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double cos_a = cos(angle)
 *         cdef double sin_a = sin(angle)             # <<<<<<<<<<<<<<
 *         cdef double one_m_cos = 1.0 - cos_a
 *         cdef Vec3 _axis = Vec3(axis).normalize()
 */
  __pyx_v_sin_a = sin(__pyx_v_angle);

  /* "ezdxf/acc/matrix44.pyx":256
 *         cdef double cos_a = cos(angle)
 *         cdef double sin_a = sin(angle)
 *         cdef double one_m_cos = 1.0 - cos_a             # <<<<<<<<<<<<<<
 *         cdef Vec3 _axis = Vec3(axis).normalize()
 *         cdef double x = _axis.x
 */
  __pyx_v_one_m_cos = (1.0 - __pyx_v_cos_a);

  /* "ezdxf/acc/matrix44.pyx":257
 *         cdef double sin_a = sin(angle)
 *         cdef double one_m_cos = 1.0 - cos_a
 *         cdef Vec3 _axis = Vec3(axis).normalize()             # <<<<<<<<<<<<<<
 *         cdef double x = _axis.x
 *         cdef double y = _axis.y
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_v_axis); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_normalize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5ezdxf_3acc_6vector_Vec3))))) __PYX_ERR(0, 257, __pyx_L1_error)
  __pyx_v__axis = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":258
 *         cdef double one_m_cos = 1.0 - cos_a
 *         cdef Vec3 _axis = Vec3(axis).normalize()
 *         cdef double x = _axis.x             # <<<<<<<<<<<<<<
 *         cdef double y = _axis.y
 *         cdef double z = _axis.z
 */
  __pyx_t_4 = __pyx_v__axis->x;
  __pyx_v_x = __pyx_t_4;

  /* "ezdxf/acc/matrix44.pyx":259
 *         cdef Vec3 _axis = Vec3(axis).normalize()
 *         cdef double x = _axis.x
 *         cdef double y = _axis.y             # <<<<<<<<<<<<<<
 *         cdef double z = _axis.z
 * 
 */
  __pyx_t_4 = __pyx_v__axis->y;
  __pyx_v_y = __pyx_t_4;

  /* "ezdxf/acc/matrix44.pyx":260
 *         cdef double x = _axis.x
 *         cdef double y = _axis.y
 *         cdef double z = _axis.z             # <<<<<<<<<<<<<<
 * 
 *         mat.m[0] = x * x * one_m_cos + cos_a
 */
  __pyx_t_4 = __pyx_v__axis->z;
  __pyx_v_z = __pyx_t_4;

  /* "ezdxf/acc/matrix44.pyx":262
 *         cdef double z = _axis.z
 * 
 *         mat.m[0] = x * x * one_m_cos + cos_a             # <<<<<<<<<<<<<<
 *         mat.m[1] = y * x * one_m_cos + z * sin_a
 *         mat.m[2] = x * z * one_m_cos - y * sin_a
 */
  (__pyx_v_mat->m[0]) = (((__pyx_v_x * __pyx_v_x) * __pyx_v_one_m_cos) + __pyx_v_cos_a);

  /* "ezdxf/acc/matrix44.pyx":263
 * 
 *         mat.m[0] = x * x * one_m_cos + cos_a
 *         mat.m[1] = y * x * one_m_cos + z * sin_a             # <<<<<<<<<<<<<<
 *         mat.m[2] = x * z * one_m_cos - y * sin_a
 * 
 */
  (__pyx_v_mat->m[1]) = (((__pyx_v_y * __pyx_v_x) * __pyx_v_one_m_cos) + (__pyx_v_z * __pyx_v_sin_a));

  /* "ezdxf/acc/matrix44.pyx":264
 *         mat.m[0] = x * x * one_m_cos + cos_a
 *         mat.m[1] = y * x * one_m_cos + z * sin_a
 *         mat.m[2] = x * z * one_m_cos - y * sin_a             # <<<<<<<<<<<<<<
 * 
 *         mat.m[4] = x * y * one_m_cos - z * sin_a
 */
  (__pyx_v_mat->m[2]) = (((__pyx_v_x * __pyx_v_z) * __pyx_v_one_m_cos) - (__pyx_v_y * __pyx_v_sin_a));

  /* "ezdxf/acc/matrix44.pyx":266
 *         mat.m[2] = x * z * one_m_cos - y * sin_a
 * 
 *         mat.m[4] = x * y * one_m_cos - z * sin_a             # <<<<<<<<<<<<<<
 *         mat.m[5] = y * y * one_m_cos + cos_a
 *         mat.m[6] = y * z * one_m_cos + x * sin_a
 */
  (__pyx_v_mat->m[4]) = (((__pyx_v_x * __pyx_v_y) * __pyx_v_one_m_cos) - (__pyx_v_z * __pyx_v_sin_a));

  /* "ezdxf/acc/matrix44.pyx":267
 * 
 *         mat.m[4] = x * y * one_m_cos - z * sin_a
 *         mat.m[5] = y * y * one_m_cos + cos_a             # <<<<<<<<<<<<<<
 *         mat.m[6] = y * z * one_m_cos + x * sin_a
 * 
 */
  (__pyx_v_mat->m[5]) = (((__pyx_v_y * __pyx_v_y) * __pyx_v_one_m_cos) + __pyx_v_cos_a);

  /* "ezdxf/acc/matrix44.pyx":268
 *         mat.m[4] = x * y * one_m_cos - z * sin_a
 *         mat.m[5] = y * y * one_m_cos + cos_a
 *         mat.m[6] = y * z * one_m_cos + x * sin_a             # <<<<<<<<<<<<<<
 * 
 *         mat.m[8] = x * z * one_m_cos + y * sin_a
 */
  (__pyx_v_mat->m[6]) = (((__pyx_v_y * __pyx_v_z) * __pyx_v_one_m_cos) + (__pyx_v_x * __pyx_v_sin_a));

  /* "ezdxf/acc/matrix44.pyx":270
 *         mat.m[6] = y * z * one_m_cos + x * sin_a
 * 
 *         mat.m[8] = x * z * one_m_cos + y * sin_a             # <<<<<<<<<<<<<<
 *         mat.m[9] = y * z * one_m_cos - x * sin_a
 *         mat.m[10] = z * z * one_m_cos + cos_a
 */
  (__pyx_v_mat->m[8]) = (((__pyx_v_x * __pyx_v_z) * __pyx_v_one_m_cos) + (__pyx_v_y * __pyx_v_sin_a));

  /* "ezdxf/acc/matrix44.pyx":271
 * 
 *         mat.m[8] = x * z * one_m_cos + y * sin_a
 *         mat.m[9] = y * z * one_m_cos - x * sin_a             # <<<<<<<<<<<<<<
 *         mat.m[10] = z * z * one_m_cos + cos_a
 * 
 */
  (__pyx_v_mat->m[9]) = (((__pyx_v_y * __pyx_v_z) * __pyx_v_one_m_cos) - (__pyx_v_x * __pyx_v_sin_a));

  /* "ezdxf/acc/matrix44.pyx":272
 *         mat.m[8] = x * z * one_m_cos + y * sin_a
 *         mat.m[9] = y * z * one_m_cos - x * sin_a
 *         mat.m[10] = z * z * one_m_cos + cos_a             # <<<<<<<<<<<<<<
 * 
 *         return mat
 */
  (__pyx_v_mat->m[10]) = (((__pyx_v_z * __pyx_v_z) * __pyx_v_one_m_cos) + __pyx_v_cos_a);

  /* "ezdxf/acc/matrix44.pyx":274
 *         mat.m[10] = z * z * one_m_cos + cos_a
 * 
 *         return mat             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_mat));
  __pyx_r = __pyx_v_mat;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":252
 * 
 *     @staticmethod
 *     def axis_rotate(axis: 'Vertex', double angle) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double cos_a = cos(angle)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.axis_rotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mat);
  __Pyx_XDECREF((PyObject *)__pyx_v__axis);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":277
 * 
 *     @staticmethod
 *     def xyz_rotate(double angle_x, double angle_y,             # <<<<<<<<<<<<<<
 *                    double angle_z) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_42xyz_rotate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5ezdxf_3acc_8matrix44_8Matrix44_42xyz_rotate = {"xyz_rotate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_42xyz_rotate, METH_VARARGS|METH_KEYWORDS, 0};
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_42xyz_rotate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_angle_x;
  double __pyx_v_angle_y;
  double __pyx_v_angle_z;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("xyz_rotate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_angle_x,&__pyx_n_s_angle_y,&__pyx_n_s_angle_z,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_angle_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_angle_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("xyz_rotate", 1, 3, 3, 1); __PYX_ERR(0, 277, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_angle_z)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("xyz_rotate", 1, 3, 3, 2); __PYX_ERR(0, 277, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "xyz_rotate") < 0)) __PYX_ERR(0, 277, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_angle_x = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_angle_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 277, __pyx_L3_error)
    __pyx_v_angle_y = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_angle_y == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 277, __pyx_L3_error)
    __pyx_v_angle_z = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_angle_z == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 278, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("xyz_rotate", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 277, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.xyz_rotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_41xyz_rotate(__pyx_v_angle_x, __pyx_v_angle_y, __pyx_v_angle_z);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_41xyz_rotate(double __pyx_v_angle_x, double __pyx_v_angle_y, double __pyx_v_angle_z) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_mat = 0;
  double __pyx_v_cx;
  double __pyx_v_sx;
  double __pyx_v_cy;
  double __pyx_v_sy;
  double __pyx_v_cz;
  double __pyx_v_sz;
  double __pyx_v_sxsy;
  double __pyx_v_cxsy;
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("xyz_rotate", 0);

  /* "ezdxf/acc/matrix44.pyx":279
 *     def xyz_rotate(double angle_x, double angle_y,
 *                    double angle_z) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()             # <<<<<<<<<<<<<<
 *         cdef double cx = cos(angle_x)
 *         cdef double sx = sin(angle_x)
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_mat = ((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":280
 *                    double angle_z) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double cx = cos(angle_x)             # <<<<<<<<<<<<<<
 *         cdef double sx = sin(angle_x)
 *         cdef double cy = cos(angle_y)
 */
  __pyx_v_cx = cos(__pyx_v_angle_x);

  /* "ezdxf/acc/matrix44.pyx":281
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double cx = cos(angle_x)
 *         cdef double sx = sin(angle_x)             # <<<<<<<<<<<<<<
 *         cdef double cy = cos(angle_y)
 *         cdef double sy = sin(angle_y)
 */
  __pyx_v_sx = sin(__pyx_v_angle_x);

  /* "ezdxf/acc/matrix44.pyx":282
 *         cdef double cx = cos(angle_x)
 *         cdef double sx = sin(angle_x)
 *         cdef double cy = cos(angle_y)             # <<<<<<<<<<<<<<
 *         cdef double sy = sin(angle_y)
 *         cdef double cz = cos(angle_z)
 */
  __pyx_v_cy = cos(__pyx_v_angle_y);

  /* "ezdxf/acc/matrix44.pyx":283
 *         cdef double sx = sin(angle_x)
 *         cdef double cy = cos(angle_y)
 *         cdef double sy = sin(angle_y)             # <<<<<<<<<<<<<<
 *         cdef double cz = cos(angle_z)
 *         cdef double sz = sin(angle_z)
 */
  __pyx_v_sy = sin(__pyx_v_angle_y);

  /* "ezdxf/acc/matrix44.pyx":284
 *         cdef double cy = cos(angle_y)
 *         cdef double sy = sin(angle_y)
 *         cdef double cz = cos(angle_z)             # <<<<<<<<<<<<<<
 *         cdef double sz = sin(angle_z)
 *         cdef double sxsy = sx * sy
 */
  __pyx_v_cz = cos(__pyx_v_angle_z);

  /* "ezdxf/acc/matrix44.pyx":285
 *         cdef double sy = sin(angle_y)
 *         cdef double cz = cos(angle_z)
 *         cdef double sz = sin(angle_z)             # <<<<<<<<<<<<<<
 *         cdef double sxsy = sx * sy
 *         cdef double cxsy = cx * sy
 */
  __pyx_v_sz = sin(__pyx_v_angle_z);

  /* "ezdxf/acc/matrix44.pyx":286
 *         cdef double cz = cos(angle_z)
 *         cdef double sz = sin(angle_z)
 *         cdef double sxsy = sx * sy             # <<<<<<<<<<<<<<
 *         cdef double cxsy = cx * sy
 * 
 */
  __pyx_v_sxsy = (__pyx_v_sx * __pyx_v_sy);

  /* "ezdxf/acc/matrix44.pyx":287
 *         cdef double sz = sin(angle_z)
 *         cdef double sxsy = sx * sy
 *         cdef double cxsy = cx * sy             # <<<<<<<<<<<<<<
 * 
 *         mat.m[0] = cy * cz
 */
  __pyx_v_cxsy = (__pyx_v_cx * __pyx_v_sy);

  /* "ezdxf/acc/matrix44.pyx":289
 *         cdef double cxsy = cx * sy
 * 
 *         mat.m[0] = cy * cz             # <<<<<<<<<<<<<<
 *         mat.m[1] = sxsy * cz + cx * sz
 *         mat.m[2] = -cxsy * cz + sx * sz
 */
  (__pyx_v_mat->m[0]) = (__pyx_v_cy * __pyx_v_cz);

  /* "ezdxf/acc/matrix44.pyx":290
 * 
 *         mat.m[0] = cy * cz
 *         mat.m[1] = sxsy * cz + cx * sz             # <<<<<<<<<<<<<<
 *         mat.m[2] = -cxsy * cz + sx * sz
 *         mat.m[4] = -cy * sz
 */
  (__pyx_v_mat->m[1]) = ((__pyx_v_sxsy * __pyx_v_cz) + (__pyx_v_cx * __pyx_v_sz));

  /* "ezdxf/acc/matrix44.pyx":291
 *         mat.m[0] = cy * cz
 *         mat.m[1] = sxsy * cz + cx * sz
 *         mat.m[2] = -cxsy * cz + sx * sz             # <<<<<<<<<<<<<<
 *         mat.m[4] = -cy * sz
 *         mat.m[5] = -sxsy * sz + cx * cz
 */
  (__pyx_v_mat->m[2]) = (((-__pyx_v_cxsy) * __pyx_v_cz) + (__pyx_v_sx * __pyx_v_sz));

  /* "ezdxf/acc/matrix44.pyx":292
 *         mat.m[1] = sxsy * cz + cx * sz
 *         mat.m[2] = -cxsy * cz + sx * sz
 *         mat.m[4] = -cy * sz             # <<<<<<<<<<<<<<
 *         mat.m[5] = -sxsy * sz + cx * cz
 *         mat.m[6] = cxsy * sz + sx * cz
 */
  (__pyx_v_mat->m[4]) = ((-__pyx_v_cy) * __pyx_v_sz);

  /* "ezdxf/acc/matrix44.pyx":293
 *         mat.m[2] = -cxsy * cz + sx * sz
 *         mat.m[4] = -cy * sz
 *         mat.m[5] = -sxsy * sz + cx * cz             # <<<<<<<<<<<<<<
 *         mat.m[6] = cxsy * sz + sx * cz
 *         mat.m[8] = sy
 */
  (__pyx_v_mat->m[5]) = (((-__pyx_v_sxsy) * __pyx_v_sz) + (__pyx_v_cx * __pyx_v_cz));

  /* "ezdxf/acc/matrix44.pyx":294
 *         mat.m[4] = -cy * sz
 *         mat.m[5] = -sxsy * sz + cx * cz
 *         mat.m[6] = cxsy * sz + sx * cz             # <<<<<<<<<<<<<<
 *         mat.m[8] = sy
 *         mat.m[9] = -sx * cy
 */
  (__pyx_v_mat->m[6]) = ((__pyx_v_cxsy * __pyx_v_sz) + (__pyx_v_sx * __pyx_v_cz));

  /* "ezdxf/acc/matrix44.pyx":295
 *         mat.m[5] = -sxsy * sz + cx * cz
 *         mat.m[6] = cxsy * sz + sx * cz
 *         mat.m[8] = sy             # <<<<<<<<<<<<<<
 *         mat.m[9] = -sx * cy
 *         mat.m[10] = cx * cy
 */
  (__pyx_v_mat->m[8]) = __pyx_v_sy;

  /* "ezdxf/acc/matrix44.pyx":296
 *         mat.m[6] = cxsy * sz + sx * cz
 *         mat.m[8] = sy
 *         mat.m[9] = -sx * cy             # <<<<<<<<<<<<<<
 *         mat.m[10] = cx * cy
 *         return mat
 */
  (__pyx_v_mat->m[9]) = ((-__pyx_v_sx) * __pyx_v_cy);

  /* "ezdxf/acc/matrix44.pyx":297
 *         mat.m[8] = sy
 *         mat.m[9] = -sx * cy
 *         mat.m[10] = cx * cy             # <<<<<<<<<<<<<<
 *         return mat
 * 
 */
  (__pyx_v_mat->m[10]) = (__pyx_v_cx * __pyx_v_cy);

  /* "ezdxf/acc/matrix44.pyx":298
 *         mat.m[9] = -sx * cy
 *         mat.m[10] = cx * cy
 *         return mat             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_mat));
  __pyx_r = __pyx_v_mat;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":277
 * 
 *     @staticmethod
 *     def xyz_rotate(double angle_x, double angle_y,             # <<<<<<<<<<<<<<
 *                    double angle_z) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.xyz_rotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mat);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":301
 * 
 *     @staticmethod
 *     def shear_xy(double angle_x = 0, double angle_y = 0) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double tx = tan(angle_x)
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_44shear_xy(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5ezdxf_3acc_8matrix44_8Matrix44_44shear_xy = {"shear_xy", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_44shear_xy, METH_VARARGS|METH_KEYWORDS, 0};
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_44shear_xy(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_angle_x;
  double __pyx_v_angle_y;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("shear_xy (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_angle_x,&__pyx_n_s_angle_y,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_angle_x);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_angle_y);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "shear_xy") < 0)) __PYX_ERR(0, 301, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_angle_x = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_angle_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 301, __pyx_L3_error)
    } else {
      __pyx_v_angle_x = ((double)0.0);
    }
    if (values[1]) {
      __pyx_v_angle_y = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_angle_y == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 301, __pyx_L3_error)
    } else {
      __pyx_v_angle_y = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("shear_xy", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 301, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.shear_xy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_43shear_xy(__pyx_v_angle_x, __pyx_v_angle_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_43shear_xy(double __pyx_v_angle_x, double __pyx_v_angle_y) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_mat = 0;
  double __pyx_v_tx;
  double __pyx_v_ty;
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("shear_xy", 0);

  /* "ezdxf/acc/matrix44.pyx":302
 *     @staticmethod
 *     def shear_xy(double angle_x = 0, double angle_y = 0) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()             # <<<<<<<<<<<<<<
 *         cdef double tx = tan(angle_x)
 *         cdef double ty = tan(angle_y)
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_mat = ((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":303
 *     def shear_xy(double angle_x = 0, double angle_y = 0) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double tx = tan(angle_x)             # <<<<<<<<<<<<<<
 *         cdef double ty = tan(angle_y)
 *         mat.m[1] = ty
 */
  __pyx_v_tx = tan(__pyx_v_angle_x);

  /* "ezdxf/acc/matrix44.pyx":304
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double tx = tan(angle_x)
 *         cdef double ty = tan(angle_y)             # <<<<<<<<<<<<<<
 *         mat.m[1] = ty
 *         mat.m[4] = tx
 */
  __pyx_v_ty = tan(__pyx_v_angle_y);

  /* "ezdxf/acc/matrix44.pyx":305
 *         cdef double tx = tan(angle_x)
 *         cdef double ty = tan(angle_y)
 *         mat.m[1] = ty             # <<<<<<<<<<<<<<
 *         mat.m[4] = tx
 *         return mat
 */
  (__pyx_v_mat->m[1]) = __pyx_v_ty;

  /* "ezdxf/acc/matrix44.pyx":306
 *         cdef double ty = tan(angle_y)
 *         mat.m[1] = ty
 *         mat.m[4] = tx             # <<<<<<<<<<<<<<
 *         return mat
 * 
 */
  (__pyx_v_mat->m[4]) = __pyx_v_tx;

  /* "ezdxf/acc/matrix44.pyx":307
 *         mat.m[1] = ty
 *         mat.m[4] = tx
 *         return mat             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_mat));
  __pyx_r = __pyx_v_mat;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":301
 * 
 *     @staticmethod
 *     def shear_xy(double angle_x = 0, double angle_y = 0) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double tx = tan(angle_x)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.shear_xy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mat);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":310
 * 
 *     @staticmethod
 *     def perspective_projection(double left, double right, double top,             # <<<<<<<<<<<<<<
 *                                double bottom, double near,
 *                                double far) -> 'Matrix44':
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_46perspective_projection(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5ezdxf_3acc_8matrix44_8Matrix44_46perspective_projection = {"perspective_projection", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_46perspective_projection, METH_VARARGS|METH_KEYWORDS, 0};
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_46perspective_projection(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_left;
  double __pyx_v_right;
  double __pyx_v_top;
  double __pyx_v_bottom;
  double __pyx_v_near;
  double __pyx_v_far;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("perspective_projection (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_left,&__pyx_n_s_right,&__pyx_n_s_top,&__pyx_n_s_bottom,&__pyx_n_s_near,&__pyx_n_s_far,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_left)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_right)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("perspective_projection", 1, 6, 6, 1); __PYX_ERR(0, 310, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_top)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("perspective_projection", 1, 6, 6, 2); __PYX_ERR(0, 310, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bottom)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("perspective_projection", 1, 6, 6, 3); __PYX_ERR(0, 310, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_near)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("perspective_projection", 1, 6, 6, 4); __PYX_ERR(0, 310, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_far)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("perspective_projection", 1, 6, 6, 5); __PYX_ERR(0, 310, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "perspective_projection") < 0)) __PYX_ERR(0, 310, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_left = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_left == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 310, __pyx_L3_error)
    __pyx_v_right = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_right == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 310, __pyx_L3_error)
    __pyx_v_top = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_top == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 310, __pyx_L3_error)
    __pyx_v_bottom = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_bottom == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 311, __pyx_L3_error)
    __pyx_v_near = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_near == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 311, __pyx_L3_error)
    __pyx_v_far = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_far == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 312, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("perspective_projection", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 310, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.perspective_projection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_45perspective_projection(__pyx_v_left, __pyx_v_right, __pyx_v_top, __pyx_v_bottom, __pyx_v_near, __pyx_v_far);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_45perspective_projection(double __pyx_v_left, double __pyx_v_right, double __pyx_v_top, double __pyx_v_bottom, double __pyx_v_near, double __pyx_v_far) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_mat = 0;
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("perspective_projection", 0);

  /* "ezdxf/acc/matrix44.pyx":313
 *                                double bottom, double near,
 *                                double far) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()             # <<<<<<<<<<<<<<
 *         mat.m[0] = (2. * near) / (right - left)
 *         mat.m[5] = (2. * near) / (top - bottom)
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_mat = ((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":314
 *                                double far) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()
 *         mat.m[0] = (2. * near) / (right - left)             # <<<<<<<<<<<<<<
 *         mat.m[5] = (2. * near) / (top - bottom)
 *         mat.m[8] = (right + left) / (right - left)
 */
  __pyx_t_2 = (2. * __pyx_v_near);
  __pyx_t_3 = (__pyx_v_right - __pyx_v_left);
  if (unlikely(__pyx_t_3 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 314, __pyx_L1_error)
  }
  (__pyx_v_mat->m[0]) = (__pyx_t_2 / __pyx_t_3);

  /* "ezdxf/acc/matrix44.pyx":315
 *         cdef Matrix44 mat = Matrix44()
 *         mat.m[0] = (2. * near) / (right - left)
 *         mat.m[5] = (2. * near) / (top - bottom)             # <<<<<<<<<<<<<<
 *         mat.m[8] = (right + left) / (right - left)
 *         mat.m[9] = (top + bottom) / (top - bottom)
 */
  __pyx_t_3 = (2. * __pyx_v_near);
  __pyx_t_2 = (__pyx_v_top - __pyx_v_bottom);
  if (unlikely(__pyx_t_2 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 315, __pyx_L1_error)
  }
  (__pyx_v_mat->m[5]) = (__pyx_t_3 / __pyx_t_2);

  /* "ezdxf/acc/matrix44.pyx":316
 *         mat.m[0] = (2. * near) / (right - left)
 *         mat.m[5] = (2. * near) / (top - bottom)
 *         mat.m[8] = (right + left) / (right - left)             # <<<<<<<<<<<<<<
 *         mat.m[9] = (top + bottom) / (top - bottom)
 *         mat.m[10] = -((far + near) / (far - near))
 */
  __pyx_t_2 = (__pyx_v_right + __pyx_v_left);
  __pyx_t_3 = (__pyx_v_right - __pyx_v_left);
  if (unlikely(__pyx_t_3 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 316, __pyx_L1_error)
  }
  (__pyx_v_mat->m[8]) = (__pyx_t_2 / __pyx_t_3);

  /* "ezdxf/acc/matrix44.pyx":317
 *         mat.m[5] = (2. * near) / (top - bottom)
 *         mat.m[8] = (right + left) / (right - left)
 *         mat.m[9] = (top + bottom) / (top - bottom)             # <<<<<<<<<<<<<<
 *         mat.m[10] = -((far + near) / (far - near))
 *         mat.m[11] = -1
 */
  __pyx_t_3 = (__pyx_v_top + __pyx_v_bottom);
  __pyx_t_2 = (__pyx_v_top - __pyx_v_bottom);
  if (unlikely(__pyx_t_2 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 317, __pyx_L1_error)
  }
  (__pyx_v_mat->m[9]) = (__pyx_t_3 / __pyx_t_2);

  /* "ezdxf/acc/matrix44.pyx":318
 *         mat.m[8] = (right + left) / (right - left)
 *         mat.m[9] = (top + bottom) / (top - bottom)
 *         mat.m[10] = -((far + near) / (far - near))             # <<<<<<<<<<<<<<
 *         mat.m[11] = -1
 *         mat.m[14] = -((2. * far * near) / (far - near))
 */
  __pyx_t_2 = (__pyx_v_far + __pyx_v_near);
  __pyx_t_3 = (__pyx_v_far - __pyx_v_near);
  if (unlikely(__pyx_t_3 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 318, __pyx_L1_error)
  }
  (__pyx_v_mat->m[10]) = (-(__pyx_t_2 / __pyx_t_3));

  /* "ezdxf/acc/matrix44.pyx":319
 *         mat.m[9] = (top + bottom) / (top - bottom)
 *         mat.m[10] = -((far + near) / (far - near))
 *         mat.m[11] = -1             # <<<<<<<<<<<<<<
 *         mat.m[14] = -((2. * far * near) / (far - near))
 *         return mat
 */
  (__pyx_v_mat->m[11]) = -1.0;

  /* "ezdxf/acc/matrix44.pyx":320
 *         mat.m[10] = -((far + near) / (far - near))
 *         mat.m[11] = -1
 *         mat.m[14] = -((2. * far * near) / (far - near))             # <<<<<<<<<<<<<<
 *         return mat
 * 
 */
  __pyx_t_3 = ((2. * __pyx_v_far) * __pyx_v_near);
  __pyx_t_2 = (__pyx_v_far - __pyx_v_near);
  if (unlikely(__pyx_t_2 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 320, __pyx_L1_error)
  }
  (__pyx_v_mat->m[14]) = (-(__pyx_t_3 / __pyx_t_2));

  /* "ezdxf/acc/matrix44.pyx":321
 *         mat.m[11] = -1
 *         mat.m[14] = -((2. * far * near) / (far - near))
 *         return mat             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_mat));
  __pyx_r = __pyx_v_mat;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":310
 * 
 *     @staticmethod
 *     def perspective_projection(double left, double right, double top,             # <<<<<<<<<<<<<<
 *                                double bottom, double near,
 *                                double far) -> 'Matrix44':
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.perspective_projection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mat);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":324
 * 
 *     @staticmethod
 *     def perspective_projection_fov(fov: float, aspect: float, near: float,             # <<<<<<<<<<<<<<
 *                                    far: float) -> 'Matrix44':
 *         vrange = near * math.tan(fov / 2.)
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_48perspective_projection_fov(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5ezdxf_3acc_8matrix44_8Matrix44_48perspective_projection_fov = {"perspective_projection_fov", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_48perspective_projection_fov, METH_VARARGS|METH_KEYWORDS, 0};
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_48perspective_projection_fov(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_fov;
  double __pyx_v_aspect;
  double __pyx_v_near;
  double __pyx_v_far;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("perspective_projection_fov (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fov,&__pyx_n_s_aspect,&__pyx_n_s_near,&__pyx_n_s_far,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fov)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_aspect)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("perspective_projection_fov", 1, 4, 4, 1); __PYX_ERR(0, 324, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_near)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("perspective_projection_fov", 1, 4, 4, 2); __PYX_ERR(0, 324, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_far)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("perspective_projection_fov", 1, 4, 4, 3); __PYX_ERR(0, 324, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "perspective_projection_fov") < 0)) __PYX_ERR(0, 324, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_fov = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_fov == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 324, __pyx_L3_error)
    __pyx_v_aspect = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_aspect == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 324, __pyx_L3_error)
    __pyx_v_near = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_near == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 324, __pyx_L3_error)
    __pyx_v_far = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_far == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 325, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("perspective_projection_fov", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 324, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.perspective_projection_fov", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_47perspective_projection_fov(__pyx_v_fov, __pyx_v_aspect, __pyx_v_near, __pyx_v_far);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_47perspective_projection_fov(double __pyx_v_fov, double __pyx_v_aspect, double __pyx_v_near, double __pyx_v_far) {
  PyObject *__pyx_v_vrange = NULL;
  PyObject *__pyx_v_left = NULL;
  PyObject *__pyx_v_right = NULL;
  PyObject *__pyx_v_bottom = NULL;
  PyObject *__pyx_v_top = NULL;
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("perspective_projection_fov", 0);

  /* "ezdxf/acc/matrix44.pyx":326
 *     def perspective_projection_fov(fov: float, aspect: float, near: float,
 *                                    far: float) -> 'Matrix44':
 *         vrange = near * math.tan(fov / 2.)             # <<<<<<<<<<<<<<
 *         left = -vrange * aspect
 *         right = vrange * aspect
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_near); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_tan); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_fov / 2.)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_vrange = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "ezdxf/acc/matrix44.pyx":327
 *                                    far: float) -> 'Matrix44':
 *         vrange = near * math.tan(fov / 2.)
 *         left = -vrange * aspect             # <<<<<<<<<<<<<<
 *         right = vrange * aspect
 *         bottom = -vrange
 */
  __pyx_t_4 = PyNumber_Negative(__pyx_v_vrange); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_aspect); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_left = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":328
 *         vrange = near * math.tan(fov / 2.)
 *         left = -vrange * aspect
 *         right = vrange * aspect             # <<<<<<<<<<<<<<
 *         bottom = -vrange
 *         top = vrange
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_aspect); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_vrange, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_right = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "ezdxf/acc/matrix44.pyx":329
 *         left = -vrange * aspect
 *         right = vrange * aspect
 *         bottom = -vrange             # <<<<<<<<<<<<<<
 *         top = vrange
 *         return Matrix44.perspective_projection(left, right, bottom, top, near,
 */
  __pyx_t_2 = PyNumber_Negative(__pyx_v_vrange); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_bottom = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "ezdxf/acc/matrix44.pyx":330
 *         right = vrange * aspect
 *         bottom = -vrange
 *         top = vrange             # <<<<<<<<<<<<<<
 *         return Matrix44.perspective_projection(left, right, bottom, top, near,
 *                                                far)
 */
  __Pyx_INCREF(__pyx_v_vrange);
  __pyx_v_top = __pyx_v_vrange;

  /* "ezdxf/acc/matrix44.pyx":331
 *         bottom = -vrange
 *         top = vrange
 *         return Matrix44.perspective_projection(left, right, bottom, top, near,             # <<<<<<<<<<<<<<
 *                                                far)
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44), __pyx_n_s_perspective_projection); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_near); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "ezdxf/acc/matrix44.pyx":332
 *         top = vrange
 *         return Matrix44.perspective_projection(left, right, bottom, top, near,
 *                                                far)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_far); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[7] = {__pyx_t_5, __pyx_v_left, __pyx_v_right, __pyx_v_bottom, __pyx_v_top, __pyx_t_4, __pyx_t_3};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 6+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[7] = {__pyx_t_5, __pyx_v_left, __pyx_v_right, __pyx_v_bottom, __pyx_v_top, __pyx_t_4, __pyx_t_3};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 6+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(6+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_left);
    __Pyx_GIVEREF(__pyx_v_left);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_left);
    __Pyx_INCREF(__pyx_v_right);
    __Pyx_GIVEREF(__pyx_v_right);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_right);
    __Pyx_INCREF(__pyx_v_bottom);
    __Pyx_GIVEREF(__pyx_v_bottom);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_v_bottom);
    __Pyx_INCREF(__pyx_v_top);
    __Pyx_GIVEREF(__pyx_v_top);
    PyTuple_SET_ITEM(__pyx_t_7, 3+__pyx_t_6, __pyx_v_top);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 4+__pyx_t_6, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 5+__pyx_t_6, __pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":331
 *         bottom = -vrange
 *         top = vrange
 *         return Matrix44.perspective_projection(left, right, bottom, top, near,             # <<<<<<<<<<<<<<
 *                                                far)
 * 
 */
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44))))) __PYX_ERR(0, 331, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":324
 * 
 *     @staticmethod
 *     def perspective_projection_fov(fov: float, aspect: float, near: float,             # <<<<<<<<<<<<<<
 *                                    far: float) -> 'Matrix44':
 *         vrange = near * math.tan(fov / 2.)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.perspective_projection_fov", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_vrange);
  __Pyx_XDECREF(__pyx_v_left);
  __Pyx_XDECREF(__pyx_v_right);
  __Pyx_XDECREF(__pyx_v_bottom);
  __Pyx_XDECREF(__pyx_v_top);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":335
 * 
 *     @staticmethod
 *     def chain(*matrices: 'Matrix44') -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 transformation = Matrix44()
 *         for matrix in matrices:
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_50chain(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5ezdxf_3acc_8matrix44_8Matrix44_50chain = {"chain", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_50chain, METH_VARARGS|METH_KEYWORDS, 0};
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_50chain(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_matrices = 0;
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("chain (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "chain", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_matrices = __pyx_args;
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_49chain(__pyx_self, __pyx_v_matrices);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_matrices);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_49chain(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_matrices) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_transformation = 0;
  PyObject *__pyx_v_matrix = NULL;
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("chain", 0);

  /* "ezdxf/acc/matrix44.pyx":336
 *     @staticmethod
 *     def chain(*matrices: 'Matrix44') -> 'Matrix44':
 *         cdef Matrix44 transformation = Matrix44()             # <<<<<<<<<<<<<<
 *         for matrix in matrices:
 *             transformation *= matrix
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_transformation = ((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":337
 *     def chain(*matrices: 'Matrix44') -> 'Matrix44':
 *         cdef Matrix44 transformation = Matrix44()
 *         for matrix in matrices:             # <<<<<<<<<<<<<<
 *             transformation *= matrix
 *         return transformation
 */
  __pyx_t_1 = __pyx_v_matrices; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 337, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_matrix, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "ezdxf/acc/matrix44.pyx":338
 *         cdef Matrix44 transformation = Matrix44()
 *         for matrix in matrices:
 *             transformation *= matrix             # <<<<<<<<<<<<<<
 *         return transformation
 * 
 */
    __pyx_t_3 = PyNumber_InPlaceMultiply(((PyObject *)__pyx_v_transformation), __pyx_v_matrix); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44))))) __PYX_ERR(0, 338, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_transformation, ((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "ezdxf/acc/matrix44.pyx":337
 *     def chain(*matrices: 'Matrix44') -> 'Matrix44':
 *         cdef Matrix44 transformation = Matrix44()
 *         for matrix in matrices:             # <<<<<<<<<<<<<<
 *             transformation *= matrix
 *         return transformation
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":339
 *         for matrix in matrices:
 *             transformation *= matrix
 *         return transformation             # <<<<<<<<<<<<<<
 * 
 *     def __imul__(self, Matrix44 other) -> 'Matrix44':
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_transformation));
  __pyx_r = __pyx_v_transformation;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":335
 * 
 *     @staticmethod
 *     def chain(*matrices: 'Matrix44') -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 transformation = Matrix44()
 *         for matrix in matrices:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.chain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_transformation);
  __Pyx_XDECREF(__pyx_v_matrix);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":341
 *         return transformation
 * 
 *     def __imul__(self, Matrix44 other) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef double[16] m1 = self.m
 *         cdef double *m2 = other.m
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_52__imul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_52__imul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__imul__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44, 1, "other", 0))) __PYX_ERR(0, 341, __pyx_L1_error)
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_51__imul__(((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self), ((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_51__imul__(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self, struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_other) {
  double __pyx_v_m1[16];
  double *__pyx_v_m2;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double *__pyx_t_1;
  __Pyx_RefNannySetupContext("__imul__", 0);

  /* "ezdxf/acc/matrix44.pyx":342
 * 
 *     def __imul__(self, Matrix44 other) -> 'Matrix44':
 *         cdef double[16] m1 = self.m             # <<<<<<<<<<<<<<
 *         cdef double *m2 = other.m
 * 
 */
  __pyx_t_1 = __pyx_v_self->m;
  memcpy(&(__pyx_v_m1[0]), __pyx_t_1, sizeof(__pyx_v_m1[0]) * (16 - 0));

  /* "ezdxf/acc/matrix44.pyx":343
 *     def __imul__(self, Matrix44 other) -> 'Matrix44':
 *         cdef double[16] m1 = self.m
 *         cdef double *m2 = other.m             # <<<<<<<<<<<<<<
 * 
 *         self.m[0] = m1[0] * m2[0] + m1[1] * m2[4] + m1[2] * m2[8] + \
 */
  __pyx_t_1 = __pyx_v_other->m;
  __pyx_v_m2 = __pyx_t_1;

  /* "ezdxf/acc/matrix44.pyx":345
 *         cdef double *m2 = other.m
 * 
 *         self.m[0] = m1[0] * m2[0] + m1[1] * m2[4] + m1[2] * m2[8] + \             # <<<<<<<<<<<<<<
 *                     m1[3] * m2[12]
 *         self.m[1] = m1[0] * m2[1] + m1[1] * m2[5] + m1[2] * m2[9] + \
 */
  (__pyx_v_self->m[0]) = (((((__pyx_v_m1[0]) * (__pyx_v_m2[0])) + ((__pyx_v_m1[1]) * (__pyx_v_m2[4]))) + ((__pyx_v_m1[2]) * (__pyx_v_m2[8]))) + ((__pyx_v_m1[3]) * (__pyx_v_m2[12])));

  /* "ezdxf/acc/matrix44.pyx":347
 *         self.m[0] = m1[0] * m2[0] + m1[1] * m2[4] + m1[2] * m2[8] + \
 *                     m1[3] * m2[12]
 *         self.m[1] = m1[0] * m2[1] + m1[1] * m2[5] + m1[2] * m2[9] + \             # <<<<<<<<<<<<<<
 *                     m1[3] * m2[13]
 *         self.m[2] = m1[0] * m2[2] + m1[1] * m2[6] + m1[2] * m2[10] + \
 */
  (__pyx_v_self->m[1]) = (((((__pyx_v_m1[0]) * (__pyx_v_m2[1])) + ((__pyx_v_m1[1]) * (__pyx_v_m2[5]))) + ((__pyx_v_m1[2]) * (__pyx_v_m2[9]))) + ((__pyx_v_m1[3]) * (__pyx_v_m2[13])));

  /* "ezdxf/acc/matrix44.pyx":349
 *         self.m[1] = m1[0] * m2[1] + m1[1] * m2[5] + m1[2] * m2[9] + \
 *                     m1[3] * m2[13]
 *         self.m[2] = m1[0] * m2[2] + m1[1] * m2[6] + m1[2] * m2[10] + \             # <<<<<<<<<<<<<<
 *                     m1[3] * m2[14]
 *         self.m[3] = m1[0] * m2[3] + m1[1] * m2[7] + m1[2] * m2[11] + \
 */
  (__pyx_v_self->m[2]) = (((((__pyx_v_m1[0]) * (__pyx_v_m2[2])) + ((__pyx_v_m1[1]) * (__pyx_v_m2[6]))) + ((__pyx_v_m1[2]) * (__pyx_v_m2[10]))) + ((__pyx_v_m1[3]) * (__pyx_v_m2[14])));

  /* "ezdxf/acc/matrix44.pyx":351
 *         self.m[2] = m1[0] * m2[2] + m1[1] * m2[6] + m1[2] * m2[10] + \
 *                     m1[3] * m2[14]
 *         self.m[3] = m1[0] * m2[3] + m1[1] * m2[7] + m1[2] * m2[11] + \             # <<<<<<<<<<<<<<
 *                     m1[3] * m2[15]
 * 
 */
  (__pyx_v_self->m[3]) = (((((__pyx_v_m1[0]) * (__pyx_v_m2[3])) + ((__pyx_v_m1[1]) * (__pyx_v_m2[7]))) + ((__pyx_v_m1[2]) * (__pyx_v_m2[11]))) + ((__pyx_v_m1[3]) * (__pyx_v_m2[15])));

  /* "ezdxf/acc/matrix44.pyx":354
 *                     m1[3] * m2[15]
 * 
 *         self.m[4] = m1[4] * m2[0] + m1[5] * m2[4] + m1[6] * m2[8] + \             # <<<<<<<<<<<<<<
 *                     m1[7] * m2[12]
 *         self.m[5] = m1[4] * m2[1] + m1[5] * m2[5] + m1[6] * m2[9] + \
 */
  (__pyx_v_self->m[4]) = (((((__pyx_v_m1[4]) * (__pyx_v_m2[0])) + ((__pyx_v_m1[5]) * (__pyx_v_m2[4]))) + ((__pyx_v_m1[6]) * (__pyx_v_m2[8]))) + ((__pyx_v_m1[7]) * (__pyx_v_m2[12])));

  /* "ezdxf/acc/matrix44.pyx":356
 *         self.m[4] = m1[4] * m2[0] + m1[5] * m2[4] + m1[6] * m2[8] + \
 *                     m1[7] * m2[12]
 *         self.m[5] = m1[4] * m2[1] + m1[5] * m2[5] + m1[6] * m2[9] + \             # <<<<<<<<<<<<<<
 *                     m1[7] * m2[13]
 *         self.m[6] = m1[4] * m2[2] + m1[5] * m2[6] + m1[6] * m2[10] + \
 */
  (__pyx_v_self->m[5]) = (((((__pyx_v_m1[4]) * (__pyx_v_m2[1])) + ((__pyx_v_m1[5]) * (__pyx_v_m2[5]))) + ((__pyx_v_m1[6]) * (__pyx_v_m2[9]))) + ((__pyx_v_m1[7]) * (__pyx_v_m2[13])));

  /* "ezdxf/acc/matrix44.pyx":358
 *         self.m[5] = m1[4] * m2[1] + m1[5] * m2[5] + m1[6] * m2[9] + \
 *                     m1[7] * m2[13]
 *         self.m[6] = m1[4] * m2[2] + m1[5] * m2[6] + m1[6] * m2[10] + \             # <<<<<<<<<<<<<<
 *                     m1[7] * m2[14]
 *         self.m[7] = m1[4] * m2[3] + m1[5] * m2[7] + m1[6] * m2[11] + \
 */
  (__pyx_v_self->m[6]) = (((((__pyx_v_m1[4]) * (__pyx_v_m2[2])) + ((__pyx_v_m1[5]) * (__pyx_v_m2[6]))) + ((__pyx_v_m1[6]) * (__pyx_v_m2[10]))) + ((__pyx_v_m1[7]) * (__pyx_v_m2[14])));

  /* "ezdxf/acc/matrix44.pyx":360
 *         self.m[6] = m1[4] * m2[2] + m1[5] * m2[6] + m1[6] * m2[10] + \
 *                     m1[7] * m2[14]
 *         self.m[7] = m1[4] * m2[3] + m1[5] * m2[7] + m1[6] * m2[11] + \             # <<<<<<<<<<<<<<
 *                     m1[7] * m2[15]
 * 
 */
  (__pyx_v_self->m[7]) = (((((__pyx_v_m1[4]) * (__pyx_v_m2[3])) + ((__pyx_v_m1[5]) * (__pyx_v_m2[7]))) + ((__pyx_v_m1[6]) * (__pyx_v_m2[11]))) + ((__pyx_v_m1[7]) * (__pyx_v_m2[15])));

  /* "ezdxf/acc/matrix44.pyx":363
 *                     m1[7] * m2[15]
 * 
 *         self.m[8] = m1[8] * m2[0] + m1[9] * m2[4] + m1[10] * m2[8] + \             # <<<<<<<<<<<<<<
 *                     m1[11] * m2[12]
 *         self.m[9] = m1[8] * m2[1] + m1[9] * m2[5] + m1[10] * m2[9] + \
 */
  (__pyx_v_self->m[8]) = (((((__pyx_v_m1[8]) * (__pyx_v_m2[0])) + ((__pyx_v_m1[9]) * (__pyx_v_m2[4]))) + ((__pyx_v_m1[10]) * (__pyx_v_m2[8]))) + ((__pyx_v_m1[11]) * (__pyx_v_m2[12])));

  /* "ezdxf/acc/matrix44.pyx":365
 *         self.m[8] = m1[8] * m2[0] + m1[9] * m2[4] + m1[10] * m2[8] + \
 *                     m1[11] * m2[12]
 *         self.m[9] = m1[8] * m2[1] + m1[9] * m2[5] + m1[10] * m2[9] + \             # <<<<<<<<<<<<<<
 *                     m1[11] * m2[13]
 *         self.m[10] = m1[8] * m2[2] + m1[9] * m2[6] + m1[10] * m2[10] + \
 */
  (__pyx_v_self->m[9]) = (((((__pyx_v_m1[8]) * (__pyx_v_m2[1])) + ((__pyx_v_m1[9]) * (__pyx_v_m2[5]))) + ((__pyx_v_m1[10]) * (__pyx_v_m2[9]))) + ((__pyx_v_m1[11]) * (__pyx_v_m2[13])));

  /* "ezdxf/acc/matrix44.pyx":367
 *         self.m[9] = m1[8] * m2[1] + m1[9] * m2[5] + m1[10] * m2[9] + \
 *                     m1[11] * m2[13]
 *         self.m[10] = m1[8] * m2[2] + m1[9] * m2[6] + m1[10] * m2[10] + \             # <<<<<<<<<<<<<<
 *                      m1[11] * m2[14]
 *         self.m[11] = m1[8] * m2[3] + m1[9] * m2[7] + m1[10] * m2[11] + \
 */
  (__pyx_v_self->m[10]) = (((((__pyx_v_m1[8]) * (__pyx_v_m2[2])) + ((__pyx_v_m1[9]) * (__pyx_v_m2[6]))) + ((__pyx_v_m1[10]) * (__pyx_v_m2[10]))) + ((__pyx_v_m1[11]) * (__pyx_v_m2[14])));

  /* "ezdxf/acc/matrix44.pyx":369
 *         self.m[10] = m1[8] * m2[2] + m1[9] * m2[6] + m1[10] * m2[10] + \
 *                      m1[11] * m2[14]
 *         self.m[11] = m1[8] * m2[3] + m1[9] * m2[7] + m1[10] * m2[11] + \             # <<<<<<<<<<<<<<
 *                      m1[11] * m2[15]
 * 
 */
  (__pyx_v_self->m[11]) = (((((__pyx_v_m1[8]) * (__pyx_v_m2[3])) + ((__pyx_v_m1[9]) * (__pyx_v_m2[7]))) + ((__pyx_v_m1[10]) * (__pyx_v_m2[11]))) + ((__pyx_v_m1[11]) * (__pyx_v_m2[15])));

  /* "ezdxf/acc/matrix44.pyx":372
 *                      m1[11] * m2[15]
 * 
 *         self.m[12] = m1[12] * m2[0] + m1[13] * m2[4] + m1[14] * m2[8] + \             # <<<<<<<<<<<<<<
 *                      m1[15] * m2[12]
 *         self.m[13] = m1[12] * m2[1] + m1[13] * m2[5] + m1[14] * m2[9] + \
 */
  (__pyx_v_self->m[12]) = (((((__pyx_v_m1[12]) * (__pyx_v_m2[0])) + ((__pyx_v_m1[13]) * (__pyx_v_m2[4]))) + ((__pyx_v_m1[14]) * (__pyx_v_m2[8]))) + ((__pyx_v_m1[15]) * (__pyx_v_m2[12])));

  /* "ezdxf/acc/matrix44.pyx":374
 *         self.m[12] = m1[12] * m2[0] + m1[13] * m2[4] + m1[14] * m2[8] + \
 *                      m1[15] * m2[12]
 *         self.m[13] = m1[12] * m2[1] + m1[13] * m2[5] + m1[14] * m2[9] + \             # <<<<<<<<<<<<<<
 *                      m1[15] * m2[13]
 *         self.m[14] = m1[12] * m2[2] + m1[13] * m2[6] + m1[14] * m2[10] + \
 */
  (__pyx_v_self->m[13]) = (((((__pyx_v_m1[12]) * (__pyx_v_m2[1])) + ((__pyx_v_m1[13]) * (__pyx_v_m2[5]))) + ((__pyx_v_m1[14]) * (__pyx_v_m2[9]))) + ((__pyx_v_m1[15]) * (__pyx_v_m2[13])));

  /* "ezdxf/acc/matrix44.pyx":376
 *         self.m[13] = m1[12] * m2[1] + m1[13] * m2[5] + m1[14] * m2[9] + \
 *                      m1[15] * m2[13]
 *         self.m[14] = m1[12] * m2[2] + m1[13] * m2[6] + m1[14] * m2[10] + \             # <<<<<<<<<<<<<<
 *                      m1[15] * m2[14]
 *         self.m[15] = m1[12] * m2[3] + m1[13] * m2[7] + m1[14] * m2[11] + \
 */
  (__pyx_v_self->m[14]) = (((((__pyx_v_m1[12]) * (__pyx_v_m2[2])) + ((__pyx_v_m1[13]) * (__pyx_v_m2[6]))) + ((__pyx_v_m1[14]) * (__pyx_v_m2[10]))) + ((__pyx_v_m1[15]) * (__pyx_v_m2[14])));

  /* "ezdxf/acc/matrix44.pyx":378
 *         self.m[14] = m1[12] * m2[2] + m1[13] * m2[6] + m1[14] * m2[10] + \
 *                      m1[15] * m2[14]
 *         self.m[15] = m1[12] * m2[3] + m1[13] * m2[7] + m1[14] * m2[11] + \             # <<<<<<<<<<<<<<
 *                      m1[15] * m2[15]
 *         return self
 */
  (__pyx_v_self->m[15]) = (((((__pyx_v_m1[12]) * (__pyx_v_m2[3])) + ((__pyx_v_m1[13]) * (__pyx_v_m2[7]))) + ((__pyx_v_m1[14]) * (__pyx_v_m2[11]))) + ((__pyx_v_m1[15]) * (__pyx_v_m2[15])));

  /* "ezdxf/acc/matrix44.pyx":380
 *         self.m[15] = m1[12] * m2[3] + m1[13] * m2[7] + m1[14] * m2[11] + \
 *                      m1[15] * m2[15]
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(self, Matrix44 other) -> 'Matrix44':
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":341
 *         return transformation
 * 
 *     def __imul__(self, Matrix44 other) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef double[16] m1 = self.m
 *         cdef double *m2 = other.m
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":382
 *         return self
 * 
 *     def __mul__(self, Matrix44 other) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 res_matrix = self.copy()
 *         return res_matrix.__imul__(other)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_54__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_54__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44, 1, "other", 0))) __PYX_ERR(0, 382, __pyx_L1_error)
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_53__mul__(((PyObject *)__pyx_v_self), ((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_53__mul__(PyObject *__pyx_v_self, struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_other) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_res_matrix = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "ezdxf/acc/matrix44.pyx":383
 * 
 *     def __mul__(self, Matrix44 other) -> 'Matrix44':
 *         cdef Matrix44 res_matrix = self.copy()             # <<<<<<<<<<<<<<
 *         return res_matrix.__imul__(other)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44))))) __PYX_ERR(0, 383, __pyx_L1_error)
  __pyx_v_res_matrix = ((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":384
 *     def __mul__(self, Matrix44 other) -> 'Matrix44':
 *         cdef Matrix44 res_matrix = self.copy()
 *         return res_matrix.__imul__(other)             # <<<<<<<<<<<<<<
 * 
 *     # __matmul__ = __mul__ does not work!
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_res_matrix), __pyx_n_s_imul); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_v_other)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_other));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":382
 *         return self
 * 
 *     def __mul__(self, Matrix44 other) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 res_matrix = self.copy()
 *         return res_matrix.__imul__(other)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res_matrix);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":388
 *     # __matmul__ = __mul__ does not work!
 * 
 *     def __matmul__(self, Matrix44 other) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 res_matrix = self.copy()
 *         return res_matrix.__imul__(other)
 */

/* Python wrapper */
#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_56__matmul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_56__matmul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__matmul__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44, 1, "other", 0))) __PYX_ERR(0, 388, __pyx_L1_error)
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_55__matmul__(((PyObject *)__pyx_v_self), ((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_VERSION_HEX >= 0x03050000)*/

#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_55__matmul__(PyObject *__pyx_v_self, struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_other) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_res_matrix = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__matmul__", 0);

  /* "ezdxf/acc/matrix44.pyx":389
 * 
 *     def __matmul__(self, Matrix44 other) -> 'Matrix44':
 *         cdef Matrix44 res_matrix = self.copy()             # <<<<<<<<<<<<<<
 *         return res_matrix.__imul__(other)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44))))) __PYX_ERR(0, 389, __pyx_L1_error)
  __pyx_v_res_matrix = ((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":390
 *     def __matmul__(self, Matrix44 other) -> 'Matrix44':
 *         cdef Matrix44 res_matrix = self.copy()
 *         return res_matrix.__imul__(other)             # <<<<<<<<<<<<<<
 * 
 *     def transpose(self) -> None:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_res_matrix), __pyx_n_s_imul); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_v_other)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_other));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":388
 *     # __matmul__ = __mul__ does not work!
 * 
 *     def __matmul__(self, Matrix44 other) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 res_matrix = self.copy()
 *         return res_matrix.__imul__(other)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.__matmul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res_matrix);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_VERSION_HEX >= 0x03050000)*/

/* "ezdxf/acc/matrix44.pyx":392
 *         return res_matrix.__imul__(other)
 * 
 *     def transpose(self) -> None:             # <<<<<<<<<<<<<<
 *         swap(&self.m[1], &self.m[4])
 *         swap(&self.m[2], &self.m[8])
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_58transpose(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_58transpose(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transpose (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_57transpose(((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_57transpose(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("transpose", 0);

  /* "ezdxf/acc/matrix44.pyx":393
 * 
 *     def transpose(self) -> None:
 *         swap(&self.m[1], &self.m[4])             # <<<<<<<<<<<<<<
 *         swap(&self.m[2], &self.m[8])
 *         swap(&self.m[3], &self.m[12])
 */
  __pyx_t_1 = __pyx_f_5ezdxf_3acc_8matrix44_swap((&(__pyx_v_self->m[1])), (&(__pyx_v_self->m[4]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":394
 *     def transpose(self) -> None:
 *         swap(&self.m[1], &self.m[4])
 *         swap(&self.m[2], &self.m[8])             # <<<<<<<<<<<<<<
 *         swap(&self.m[3], &self.m[12])
 *         swap(&self.m[6], &self.m[9])
 */
  __pyx_t_1 = __pyx_f_5ezdxf_3acc_8matrix44_swap((&(__pyx_v_self->m[2])), (&(__pyx_v_self->m[8]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":395
 *         swap(&self.m[1], &self.m[4])
 *         swap(&self.m[2], &self.m[8])
 *         swap(&self.m[3], &self.m[12])             # <<<<<<<<<<<<<<
 *         swap(&self.m[6], &self.m[9])
 *         swap(&self.m[7], &self.m[13])
 */
  __pyx_t_1 = __pyx_f_5ezdxf_3acc_8matrix44_swap((&(__pyx_v_self->m[3])), (&(__pyx_v_self->m[12]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":396
 *         swap(&self.m[2], &self.m[8])
 *         swap(&self.m[3], &self.m[12])
 *         swap(&self.m[6], &self.m[9])             # <<<<<<<<<<<<<<
 *         swap(&self.m[7], &self.m[13])
 *         swap(&self.m[11], &self.m[14])
 */
  __pyx_t_1 = __pyx_f_5ezdxf_3acc_8matrix44_swap((&(__pyx_v_self->m[6])), (&(__pyx_v_self->m[9]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":397
 *         swap(&self.m[3], &self.m[12])
 *         swap(&self.m[6], &self.m[9])
 *         swap(&self.m[7], &self.m[13])             # <<<<<<<<<<<<<<
 *         swap(&self.m[11], &self.m[14])
 * 
 */
  __pyx_t_1 = __pyx_f_5ezdxf_3acc_8matrix44_swap((&(__pyx_v_self->m[7])), (&(__pyx_v_self->m[13]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":398
 *         swap(&self.m[6], &self.m[9])
 *         swap(&self.m[7], &self.m[13])
 *         swap(&self.m[11], &self.m[14])             # <<<<<<<<<<<<<<
 * 
 *     def determinant(self) -> float:
 */
  __pyx_t_1 = __pyx_f_5ezdxf_3acc_8matrix44_swap((&(__pyx_v_self->m[11])), (&(__pyx_v_self->m[14]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":392
 *         return res_matrix.__imul__(other)
 * 
 *     def transpose(self) -> None:             # <<<<<<<<<<<<<<
 *         swap(&self.m[1], &self.m[4])
 *         swap(&self.m[2], &self.m[8])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.transpose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":400
 *         swap(&self.m[11], &self.m[14])
 * 
 *     def determinant(self) -> float:             # <<<<<<<<<<<<<<
 *         cdef double *m = self.m
 *         return m[0] * m[5] * m[10] * m[15] - m[0] * m[5] * m[11] * m[14] + \
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_60determinant(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_60determinant(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("determinant (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_59determinant(((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_59determinant(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self) {
  double *__pyx_v_m;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("determinant", 0);

  /* "ezdxf/acc/matrix44.pyx":401
 * 
 *     def determinant(self) -> float:
 *         cdef double *m = self.m             # <<<<<<<<<<<<<<
 *         return m[0] * m[5] * m[10] * m[15] - m[0] * m[5] * m[11] * m[14] + \
 *                m[0] * m[6] * m[11] * m[13] - m[0] * m[6] * m[9] * m[15] + \
 */
  __pyx_t_1 = __pyx_v_self->m;
  __pyx_v_m = __pyx_t_1;

  /* "ezdxf/acc/matrix44.pyx":402
 *     def determinant(self) -> float:
 *         cdef double *m = self.m
 *         return m[0] * m[5] * m[10] * m[15] - m[0] * m[5] * m[11] * m[14] + \             # <<<<<<<<<<<<<<
 *                m[0] * m[6] * m[11] * m[13] - m[0] * m[6] * m[9] * m[15] + \
 *                m[0] * m[7] * m[9] * m[14] - m[0] * m[7] * m[10] * m[13] - \
 */
  __Pyx_XDECREF(__pyx_r);

  /* "ezdxf/acc/matrix44.pyx":413
 *                m[3] * m[4] * m[9] * m[14] + m[3] * m[4] * m[10] * m[13] - \
 *                m[3] * m[5] * m[10] * m[12] + m[3] * m[5] * m[8] * m[14] - \
 *                m[3] * m[6] * m[8] * m[13] + m[3] * m[6] * m[9] * m[12]             # <<<<<<<<<<<<<<
 * 
 *     def inverse(self) -> None:
 */
  __pyx_t_2 = PyFloat_FromDouble((((((((((((((((((((((((((((__pyx_v_m[0]) * (__pyx_v_m[5])) * (__pyx_v_m[10])) * (__pyx_v_m[15])) - ((((__pyx_v_m[0]) * (__pyx_v_m[5])) * (__pyx_v_m[11])) * (__pyx_v_m[14]))) + ((((__pyx_v_m[0]) * (__pyx_v_m[6])) * (__pyx_v_m[11])) * (__pyx_v_m[13]))) - ((((__pyx_v_m[0]) * (__pyx_v_m[6])) * (__pyx_v_m[9])) * (__pyx_v_m[15]))) + ((((__pyx_v_m[0]) * (__pyx_v_m[7])) * (__pyx_v_m[9])) * (__pyx_v_m[14]))) - ((((__pyx_v_m[0]) * (__pyx_v_m[7])) * (__pyx_v_m[10])) * (__pyx_v_m[13]))) - ((((__pyx_v_m[1]) * (__pyx_v_m[6])) * (__pyx_v_m[11])) * (__pyx_v_m[12]))) + ((((__pyx_v_m[1]) * (__pyx_v_m[6])) * (__pyx_v_m[8])) * (__pyx_v_m[15]))) - ((((__pyx_v_m[1]) * (__pyx_v_m[7])) * (__pyx_v_m[8])) * (__pyx_v_m[14]))) + ((((__pyx_v_m[1]) * (__pyx_v_m[7])) * (__pyx_v_m[10])) * (__pyx_v_m[12]))) - ((((__pyx_v_m[1]) * (__pyx_v_m[4])) * (__pyx_v_m[10])) * (__pyx_v_m[15]))) + ((((__pyx_v_m[1]) * (__pyx_v_m[4])) * (__pyx_v_m[11])) * (__pyx_v_m[14]))) + ((((__pyx_v_m[2]) * (__pyx_v_m[7])) * (__pyx_v_m[8])) * (__pyx_v_m[13]))) - ((((__pyx_v_m[2]) * (__pyx_v_m[7])) * (__pyx_v_m[9])) * (__pyx_v_m[12]))) + ((((__pyx_v_m[2]) * (__pyx_v_m[4])) * (__pyx_v_m[9])) * (__pyx_v_m[15]))) - ((((__pyx_v_m[2]) * (__pyx_v_m[4])) * (__pyx_v_m[11])) * (__pyx_v_m[13]))) + ((((__pyx_v_m[2]) * (__pyx_v_m[5])) * (__pyx_v_m[11])) * (__pyx_v_m[12]))) - ((((__pyx_v_m[2]) * (__pyx_v_m[5])) * (__pyx_v_m[8])) * (__pyx_v_m[15]))) - ((((__pyx_v_m[3]) * (__pyx_v_m[4])) * (__pyx_v_m[9])) * (__pyx_v_m[14]))) + ((((__pyx_v_m[3]) * (__pyx_v_m[4])) * (__pyx_v_m[10])) * (__pyx_v_m[13]))) - ((((__pyx_v_m[3]) * (__pyx_v_m[5])) * (__pyx_v_m[10])) * (__pyx_v_m[12]))) + ((((__pyx_v_m[3]) * (__pyx_v_m[5])) * (__pyx_v_m[8])) * (__pyx_v_m[14]))) - ((((__pyx_v_m[3]) * (__pyx_v_m[6])) * (__pyx_v_m[8])) * (__pyx_v_m[13]))) + ((((__pyx_v_m[3]) * (__pyx_v_m[6])) * (__pyx_v_m[9])) * (__pyx_v_m[12])))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":400
 *         swap(&self.m[11], &self.m[14])
 * 
 *     def determinant(self) -> float:             # <<<<<<<<<<<<<<
 *         cdef double *m = self.m
 *         return m[0] * m[5] * m[10] * m[15] - m[0] * m[5] * m[11] * m[14] + \
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.determinant", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":415
 *                m[3] * m[6] * m[8] * m[13] + m[3] * m[6] * m[9] * m[12]
 * 
 *     def inverse(self) -> None:             # <<<<<<<<<<<<<<
 *         cdef double[16] m = self.m  # memcopy
 *         cdef double det = self.determinant()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_62inverse(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_62inverse(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inverse (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_61inverse(((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_61inverse(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self) {
  double __pyx_v_m[16];
  double __pyx_v_det;
  double __pyx_v_f;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inverse", 0);

  /* "ezdxf/acc/matrix44.pyx":416
 * 
 *     def inverse(self) -> None:
 *         cdef double[16] m = self.m  # memcopy             # <<<<<<<<<<<<<<
 *         cdef double det = self.determinant()
 *         cdef double f = 1. / det
 */
  __pyx_t_1 = __pyx_v_self->m;
  memcpy(&(__pyx_v_m[0]), __pyx_t_1, sizeof(__pyx_v_m[0]) * (16 - 0));

  /* "ezdxf/acc/matrix44.pyx":417
 *     def inverse(self) -> None:
 *         cdef double[16] m = self.m  # memcopy
 *         cdef double det = self.determinant()             # <<<<<<<<<<<<<<
 *         cdef double f = 1. / det
 *         self.m[0] = (m[6] * m[11] * m[13] - m[7] * m[10] * m[13] + m[7] * m[9] *
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_determinant); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_det = __pyx_t_5;

  /* "ezdxf/acc/matrix44.pyx":418
 *         cdef double[16] m = self.m  # memcopy
 *         cdef double det = self.determinant()
 *         cdef double f = 1. / det             # <<<<<<<<<<<<<<
 *         self.m[0] = (m[6] * m[11] * m[13] - m[7] * m[10] * m[13] + m[7] * m[9] *
 *                      m[14] - m[5] * m[11] * m[14] - m[6] * m[9] * m[15] + m[5] *
 */
  if (unlikely(__pyx_v_det == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 418, __pyx_L1_error)
  }
  __pyx_v_f = (1. / __pyx_v_det);

  /* "ezdxf/acc/matrix44.pyx":419
 *         cdef double det = self.determinant()
 *         cdef double f = 1. / det
 *         self.m[0] = (m[6] * m[11] * m[13] - m[7] * m[10] * m[13] + m[7] * m[9] *             # <<<<<<<<<<<<<<
 *                      m[14] - m[5] * m[11] * m[14] - m[6] * m[9] * m[15] + m[5] *
 *                      m[10] * m[15]) * f
 */
  (__pyx_v_self->m[0]) = (((((((((__pyx_v_m[6]) * (__pyx_v_m[11])) * (__pyx_v_m[13])) - (((__pyx_v_m[7]) * (__pyx_v_m[10])) * (__pyx_v_m[13]))) + (((__pyx_v_m[7]) * (__pyx_v_m[9])) * (__pyx_v_m[14]))) - (((__pyx_v_m[5]) * (__pyx_v_m[11])) * (__pyx_v_m[14]))) - (((__pyx_v_m[6]) * (__pyx_v_m[9])) * (__pyx_v_m[15]))) + (((__pyx_v_m[5]) * (__pyx_v_m[10])) * (__pyx_v_m[15]))) * __pyx_v_f);

  /* "ezdxf/acc/matrix44.pyx":423
 *                      m[10] * m[15]) * f
 * 
 *         self.m[1] = (m[3] * m[10] * m[13] - m[2] * m[11] * m[13] - m[3] * m[9] *             # <<<<<<<<<<<<<<
 *                      m[14] + m[1] * m[11] * m[14] + m[2] * m[9] * m[15] -
 *                      m[1] * m[10] * m[15]) * f
 */
  (__pyx_v_self->m[1]) = (((((((((__pyx_v_m[3]) * (__pyx_v_m[10])) * (__pyx_v_m[13])) - (((__pyx_v_m[2]) * (__pyx_v_m[11])) * (__pyx_v_m[13]))) - (((__pyx_v_m[3]) * (__pyx_v_m[9])) * (__pyx_v_m[14]))) + (((__pyx_v_m[1]) * (__pyx_v_m[11])) * (__pyx_v_m[14]))) + (((__pyx_v_m[2]) * (__pyx_v_m[9])) * (__pyx_v_m[15]))) - (((__pyx_v_m[1]) * (__pyx_v_m[10])) * (__pyx_v_m[15]))) * __pyx_v_f);

  /* "ezdxf/acc/matrix44.pyx":426
 *                      m[14] + m[1] * m[11] * m[14] + m[2] * m[9] * m[15] -
 *                      m[1] * m[10] * m[15]) * f
 *         self.m[2] = (m[2] * m[7] * m[13] - m[3] * m[6] * m[13] + m[3] * m[5] *             # <<<<<<<<<<<<<<
 *                      m[14] - m[1] * m[7] * m[14] - m[2] * m[5] * m[15] +
 *                      m[1] * m[6] * m[15]) * f
 */
  (__pyx_v_self->m[2]) = (((((((((__pyx_v_m[2]) * (__pyx_v_m[7])) * (__pyx_v_m[13])) - (((__pyx_v_m[3]) * (__pyx_v_m[6])) * (__pyx_v_m[13]))) + (((__pyx_v_m[3]) * (__pyx_v_m[5])) * (__pyx_v_m[14]))) - (((__pyx_v_m[1]) * (__pyx_v_m[7])) * (__pyx_v_m[14]))) - (((__pyx_v_m[2]) * (__pyx_v_m[5])) * (__pyx_v_m[15]))) + (((__pyx_v_m[1]) * (__pyx_v_m[6])) * (__pyx_v_m[15]))) * __pyx_v_f);

  /* "ezdxf/acc/matrix44.pyx":430
 *                      m[1] * m[6] * m[15]) * f
 * 
 *         self.m[3] = (m[3] * m[6] * m[9] - m[2] * m[7] * m[9] - m[3] * m[5] *             # <<<<<<<<<<<<<<
 *                      m[10] + m[1] * m[7] * m[10] + m[2] * m[5] * m[11] - m[1] *
 *                      m[6] * m[11]) * f
 */
  (__pyx_v_self->m[3]) = (((((((((__pyx_v_m[3]) * (__pyx_v_m[6])) * (__pyx_v_m[9])) - (((__pyx_v_m[2]) * (__pyx_v_m[7])) * (__pyx_v_m[9]))) - (((__pyx_v_m[3]) * (__pyx_v_m[5])) * (__pyx_v_m[10]))) + (((__pyx_v_m[1]) * (__pyx_v_m[7])) * (__pyx_v_m[10]))) + (((__pyx_v_m[2]) * (__pyx_v_m[5])) * (__pyx_v_m[11]))) - (((__pyx_v_m[1]) * (__pyx_v_m[6])) * (__pyx_v_m[11]))) * __pyx_v_f);

  /* "ezdxf/acc/matrix44.pyx":434
 *                      m[6] * m[11]) * f
 * 
 *         self.m[4] = (m[7] * m[10] * m[12] - m[6] * m[11] * m[12] - m[7] * m[8] *             # <<<<<<<<<<<<<<
 *                      m[14] + m[4] * m[11] * m[14] + m[6] * m[8] * m[15] -
 *                      m[4] * m[10] * m[15]) * f
 */
  (__pyx_v_self->m[4]) = (((((((((__pyx_v_m[7]) * (__pyx_v_m[10])) * (__pyx_v_m[12])) - (((__pyx_v_m[6]) * (__pyx_v_m[11])) * (__pyx_v_m[12]))) - (((__pyx_v_m[7]) * (__pyx_v_m[8])) * (__pyx_v_m[14]))) + (((__pyx_v_m[4]) * (__pyx_v_m[11])) * (__pyx_v_m[14]))) + (((__pyx_v_m[6]) * (__pyx_v_m[8])) * (__pyx_v_m[15]))) - (((__pyx_v_m[4]) * (__pyx_v_m[10])) * (__pyx_v_m[15]))) * __pyx_v_f);

  /* "ezdxf/acc/matrix44.pyx":438
 *                      m[4] * m[10] * m[15]) * f
 * 
 *         self.m[5] = (m[2] * m[11] * m[12] - m[3] * m[10] * m[12] + m[3] * m[8] *             # <<<<<<<<<<<<<<
 *                      m[14] - m[0] * m[11] * m[14] - m[2] * m[8] * m[15] +
 *                      m[0] * m[10] * m[15]) * f
 */
  (__pyx_v_self->m[5]) = (((((((((__pyx_v_m[2]) * (__pyx_v_m[11])) * (__pyx_v_m[12])) - (((__pyx_v_m[3]) * (__pyx_v_m[10])) * (__pyx_v_m[12]))) + (((__pyx_v_m[3]) * (__pyx_v_m[8])) * (__pyx_v_m[14]))) - (((__pyx_v_m[0]) * (__pyx_v_m[11])) * (__pyx_v_m[14]))) - (((__pyx_v_m[2]) * (__pyx_v_m[8])) * (__pyx_v_m[15]))) + (((__pyx_v_m[0]) * (__pyx_v_m[10])) * (__pyx_v_m[15]))) * __pyx_v_f);

  /* "ezdxf/acc/matrix44.pyx":442
 *                      m[0] * m[10] * m[15]) * f
 * 
 *         self.m[6] = (m[3] * m[6] * m[12] - m[2] * m[7] * m[12] - m[3] * m[4] *             # <<<<<<<<<<<<<<
 *                      m[14] + m[0] * m[7] * m[14] + m[2] * m[4] * m[15] -
 *                      m[0] * m[6] * m[15]) * f
 */
  (__pyx_v_self->m[6]) = (((((((((__pyx_v_m[3]) * (__pyx_v_m[6])) * (__pyx_v_m[12])) - (((__pyx_v_m[2]) * (__pyx_v_m[7])) * (__pyx_v_m[12]))) - (((__pyx_v_m[3]) * (__pyx_v_m[4])) * (__pyx_v_m[14]))) + (((__pyx_v_m[0]) * (__pyx_v_m[7])) * (__pyx_v_m[14]))) + (((__pyx_v_m[2]) * (__pyx_v_m[4])) * (__pyx_v_m[15]))) - (((__pyx_v_m[0]) * (__pyx_v_m[6])) * (__pyx_v_m[15]))) * __pyx_v_f);

  /* "ezdxf/acc/matrix44.pyx":446
 *                      m[0] * m[6] * m[15]) * f
 * 
 *         self.m[7] = (m[2] * m[7] * m[8] - m[3] * m[6] * m[8] + m[3] * m[4] *             # <<<<<<<<<<<<<<
 *                      m[10] - m[0] * m[7] * m[10] - m[2] * m[4] * m[11] +
 *                      m[0] * m[6] * m[11]) * f
 */
  (__pyx_v_self->m[7]) = (((((((((__pyx_v_m[2]) * (__pyx_v_m[7])) * (__pyx_v_m[8])) - (((__pyx_v_m[3]) * (__pyx_v_m[6])) * (__pyx_v_m[8]))) + (((__pyx_v_m[3]) * (__pyx_v_m[4])) * (__pyx_v_m[10]))) - (((__pyx_v_m[0]) * (__pyx_v_m[7])) * (__pyx_v_m[10]))) - (((__pyx_v_m[2]) * (__pyx_v_m[4])) * (__pyx_v_m[11]))) + (((__pyx_v_m[0]) * (__pyx_v_m[6])) * (__pyx_v_m[11]))) * __pyx_v_f);

  /* "ezdxf/acc/matrix44.pyx":450
 *                      m[0] * m[6] * m[11]) * f
 * 
 *         self.m[8] = (m[5] * m[11] * m[12] - m[7] * m[9] * m[12] + m[7] * m[8] *             # <<<<<<<<<<<<<<
 *                      m[13] - m[4] * m[11] * m[13] - m[5] * m[8] * m[15] +
 *                      m[4] * m[9] * m[15]) * f
 */
  (__pyx_v_self->m[8]) = (((((((((__pyx_v_m[5]) * (__pyx_v_m[11])) * (__pyx_v_m[12])) - (((__pyx_v_m[7]) * (__pyx_v_m[9])) * (__pyx_v_m[12]))) + (((__pyx_v_m[7]) * (__pyx_v_m[8])) * (__pyx_v_m[13]))) - (((__pyx_v_m[4]) * (__pyx_v_m[11])) * (__pyx_v_m[13]))) - (((__pyx_v_m[5]) * (__pyx_v_m[8])) * (__pyx_v_m[15]))) + (((__pyx_v_m[4]) * (__pyx_v_m[9])) * (__pyx_v_m[15]))) * __pyx_v_f);

  /* "ezdxf/acc/matrix44.pyx":454
 *                      m[4] * m[9] * m[15]) * f
 * 
 *         self.m[9] = (m[3] * m[9] * m[12] - m[1] * m[11] * m[12] - m[3] *             # <<<<<<<<<<<<<<
 *                      m[8] * m[13] + m[0] * m[11] * m[13] + m[1] * m[8] *
 *                      m[15] - m[0] * m[9] * m[15]) * f
 */
  (__pyx_v_self->m[9]) = (((((((((__pyx_v_m[3]) * (__pyx_v_m[9])) * (__pyx_v_m[12])) - (((__pyx_v_m[1]) * (__pyx_v_m[11])) * (__pyx_v_m[12]))) - (((__pyx_v_m[3]) * (__pyx_v_m[8])) * (__pyx_v_m[13]))) + (((__pyx_v_m[0]) * (__pyx_v_m[11])) * (__pyx_v_m[13]))) + (((__pyx_v_m[1]) * (__pyx_v_m[8])) * (__pyx_v_m[15]))) - (((__pyx_v_m[0]) * (__pyx_v_m[9])) * (__pyx_v_m[15]))) * __pyx_v_f);

  /* "ezdxf/acc/matrix44.pyx":458
 *                      m[15] - m[0] * m[9] * m[15]) * f
 * 
 *         self.m[10] = (m[1] * m[7] * m[12] - m[3] * m[5] * m[12] + m[3] *             # <<<<<<<<<<<<<<
 *                       m[4] * m[13] - m[0] * m[7] * m[13] - m[1] * m[4] *
 *                       m[15] + m[0] * m[5] * m[15]) * f
 */
  (__pyx_v_self->m[10]) = (((((((((__pyx_v_m[1]) * (__pyx_v_m[7])) * (__pyx_v_m[12])) - (((__pyx_v_m[3]) * (__pyx_v_m[5])) * (__pyx_v_m[12]))) + (((__pyx_v_m[3]) * (__pyx_v_m[4])) * (__pyx_v_m[13]))) - (((__pyx_v_m[0]) * (__pyx_v_m[7])) * (__pyx_v_m[13]))) - (((__pyx_v_m[1]) * (__pyx_v_m[4])) * (__pyx_v_m[15]))) + (((__pyx_v_m[0]) * (__pyx_v_m[5])) * (__pyx_v_m[15]))) * __pyx_v_f);

  /* "ezdxf/acc/matrix44.pyx":462
 *                       m[15] + m[0] * m[5] * m[15]) * f
 * 
 *         self.m[11] = (m[3] * m[5] * m[8] - m[1] * m[7] * m[8] - m[3] * m[4] *             # <<<<<<<<<<<<<<
 *                       m[9] + m[0] * m[7] * m[9] + m[1] * m[4] * m[11] -
 *                       m[0] * m[5] * m[11]) * f
 */
  (__pyx_v_self->m[11]) = (((((((((__pyx_v_m[3]) * (__pyx_v_m[5])) * (__pyx_v_m[8])) - (((__pyx_v_m[1]) * (__pyx_v_m[7])) * (__pyx_v_m[8]))) - (((__pyx_v_m[3]) * (__pyx_v_m[4])) * (__pyx_v_m[9]))) + (((__pyx_v_m[0]) * (__pyx_v_m[7])) * (__pyx_v_m[9]))) + (((__pyx_v_m[1]) * (__pyx_v_m[4])) * (__pyx_v_m[11]))) - (((__pyx_v_m[0]) * (__pyx_v_m[5])) * (__pyx_v_m[11]))) * __pyx_v_f);

  /* "ezdxf/acc/matrix44.pyx":466
 *                       m[0] * m[5] * m[11]) * f
 * 
 *         self.m[12] = (m[6] * m[9] * m[12] - m[5] * m[10] * m[12] - m[6] *             # <<<<<<<<<<<<<<
 *                       m[8] * m[13] + m[4] * m[10] * m[13] + m[5] * m[8] *
 *                       m[14] - m[4] * m[9] * m[14]) * f
 */
  (__pyx_v_self->m[12]) = (((((((((__pyx_v_m[6]) * (__pyx_v_m[9])) * (__pyx_v_m[12])) - (((__pyx_v_m[5]) * (__pyx_v_m[10])) * (__pyx_v_m[12]))) - (((__pyx_v_m[6]) * (__pyx_v_m[8])) * (__pyx_v_m[13]))) + (((__pyx_v_m[4]) * (__pyx_v_m[10])) * (__pyx_v_m[13]))) + (((__pyx_v_m[5]) * (__pyx_v_m[8])) * (__pyx_v_m[14]))) - (((__pyx_v_m[4]) * (__pyx_v_m[9])) * (__pyx_v_m[14]))) * __pyx_v_f);

  /* "ezdxf/acc/matrix44.pyx":470
 *                       m[14] - m[4] * m[9] * m[14]) * f
 * 
 *         self.m[13] = (m[1] * m[10] * m[12] - m[2] * m[9] * m[12] + m[2] *             # <<<<<<<<<<<<<<
 *                       m[8] * m[13] - m[0] * m[10] * m[13] - m[1] * m[8] *
 *                       m[14] + m[0] * m[9] * m[14]) * f
 */
  (__pyx_v_self->m[13]) = (((((((((__pyx_v_m[1]) * (__pyx_v_m[10])) * (__pyx_v_m[12])) - (((__pyx_v_m[2]) * (__pyx_v_m[9])) * (__pyx_v_m[12]))) + (((__pyx_v_m[2]) * (__pyx_v_m[8])) * (__pyx_v_m[13]))) - (((__pyx_v_m[0]) * (__pyx_v_m[10])) * (__pyx_v_m[13]))) - (((__pyx_v_m[1]) * (__pyx_v_m[8])) * (__pyx_v_m[14]))) + (((__pyx_v_m[0]) * (__pyx_v_m[9])) * (__pyx_v_m[14]))) * __pyx_v_f);

  /* "ezdxf/acc/matrix44.pyx":474
 *                       m[14] + m[0] * m[9] * m[14]) * f
 * 
 *         self.m[14] = (m[2] * m[5] * m[12] - m[1] * m[6] * m[12] - m[2] *             # <<<<<<<<<<<<<<
 *                       m[4] * m[13] + m[0] * m[6] * m[13] + m[1] * m[4] *
 *                       m[14] - m[0] * m[5] * m[14]) * f
 */
  (__pyx_v_self->m[14]) = (((((((((__pyx_v_m[2]) * (__pyx_v_m[5])) * (__pyx_v_m[12])) - (((__pyx_v_m[1]) * (__pyx_v_m[6])) * (__pyx_v_m[12]))) - (((__pyx_v_m[2]) * (__pyx_v_m[4])) * (__pyx_v_m[13]))) + (((__pyx_v_m[0]) * (__pyx_v_m[6])) * (__pyx_v_m[13]))) + (((__pyx_v_m[1]) * (__pyx_v_m[4])) * (__pyx_v_m[14]))) - (((__pyx_v_m[0]) * (__pyx_v_m[5])) * (__pyx_v_m[14]))) * __pyx_v_f);

  /* "ezdxf/acc/matrix44.pyx":478
 *                       m[14] - m[0] * m[5] * m[14]) * f
 * 
 *         self.m[15] = (m[1] * m[6] * m[8] - m[2] * m[5] * m[8] + m[2] * m[4] *             # <<<<<<<<<<<<<<
 *                       m[9] - m[0] * m[6] * m[9] - m[1] * m[4] * m[10] +
 *                       m[0] * m[5] * m[10]) * f
 */
  (__pyx_v_self->m[15]) = (((((((((__pyx_v_m[1]) * (__pyx_v_m[6])) * (__pyx_v_m[8])) - (((__pyx_v_m[2]) * (__pyx_v_m[5])) * (__pyx_v_m[8]))) + (((__pyx_v_m[2]) * (__pyx_v_m[4])) * (__pyx_v_m[9]))) - (((__pyx_v_m[0]) * (__pyx_v_m[6])) * (__pyx_v_m[9]))) - (((__pyx_v_m[1]) * (__pyx_v_m[4])) * (__pyx_v_m[10]))) + (((__pyx_v_m[0]) * (__pyx_v_m[5])) * (__pyx_v_m[10]))) * __pyx_v_f);

  /* "ezdxf/acc/matrix44.pyx":415
 *                m[3] * m[6] * m[8] * m[13] + m[3] * m[6] * m[9] * m[12]
 * 
 *     def inverse(self) -> None:             # <<<<<<<<<<<<<<
 *         cdef double[16] m = self.m  # memcopy
 *         cdef double det = self.determinant()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.inverse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":483
 * 
 *     @staticmethod
 *     def ucs(ux=X_AXIS, uy=Y_AXIS, uz=Z_AXIS, origin=NULLVEC) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         cdef Vec3 _ux = Vec3(ux)
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_64ucs(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5ezdxf_3acc_8matrix44_8Matrix44_64ucs = {"ucs", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_64ucs, METH_VARARGS|METH_KEYWORDS, 0};
static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_64ucs(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ux = 0;
  PyObject *__pyx_v_uy = 0;
  PyObject *__pyx_v_uz = 0;
  PyObject *__pyx_v_origin = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ucs (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ux,&__pyx_n_s_uy,&__pyx_n_s_uz,&__pyx_n_s_origin,0};
    PyObject* values[4] = {0,0,0,0};
    values[0] = __pyx_k__7;
    values[1] = __pyx_k__8;
    values[2] = __pyx_k__9;
    values[3] = __pyx_k__10;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ux);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uy);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uz);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_origin);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "ucs") < 0)) __PYX_ERR(0, 483, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ux = values[0];
    __pyx_v_uy = values[1];
    __pyx_v_uz = values[2];
    __pyx_v_origin = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ucs", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 483, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.ucs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_63ucs(__pyx_v_ux, __pyx_v_uy, __pyx_v_uz, __pyx_v_origin);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_63ucs(PyObject *__pyx_v_ux, PyObject *__pyx_v_uy, PyObject *__pyx_v_uz, PyObject *__pyx_v_origin) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_mat = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v__ux = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v__uy = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v__uz = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v__origin = 0;
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ucs", 0);

  /* "ezdxf/acc/matrix44.pyx":484
 *     @staticmethod
 *     def ucs(ux=X_AXIS, uy=Y_AXIS, uz=Z_AXIS, origin=NULLVEC) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()             # <<<<<<<<<<<<<<
 *         cdef Vec3 _ux = Vec3(ux)
 *         cdef Vec3 _uy = Vec3(uy)
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_mat = ((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":485
 *     def ucs(ux=X_AXIS, uy=Y_AXIS, uz=Z_AXIS, origin=NULLVEC) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()
 *         cdef Vec3 _ux = Vec3(ux)             # <<<<<<<<<<<<<<
 *         cdef Vec3 _uy = Vec3(uy)
 *         cdef Vec3 _uz = Vec3(uz)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_v_ux); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__ux = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":486
 *         cdef Matrix44 mat = Matrix44()
 *         cdef Vec3 _ux = Vec3(ux)
 *         cdef Vec3 _uy = Vec3(uy)             # <<<<<<<<<<<<<<
 *         cdef Vec3 _uz = Vec3(uz)
 *         cdef Vec3 _origin = Vec3(origin)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_v_uy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__uy = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":487
 *         cdef Vec3 _ux = Vec3(ux)
 *         cdef Vec3 _uy = Vec3(uy)
 *         cdef Vec3 _uz = Vec3(uz)             # <<<<<<<<<<<<<<
 *         cdef Vec3 _origin = Vec3(origin)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_v_uz); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__uz = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":488
 *         cdef Vec3 _uy = Vec3(uy)
 *         cdef Vec3 _uz = Vec3(uz)
 *         cdef Vec3 _origin = Vec3(origin)             # <<<<<<<<<<<<<<
 * 
 *         mat.m[0] = _ux.x
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_v_origin); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__origin = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":490
 *         cdef Vec3 _origin = Vec3(origin)
 * 
 *         mat.m[0] = _ux.x             # <<<<<<<<<<<<<<
 *         mat.m[1] = _ux.y
 *         mat.m[2] = _ux.z
 */
  __pyx_t_2 = __pyx_v__ux->x;
  (__pyx_v_mat->m[0]) = __pyx_t_2;

  /* "ezdxf/acc/matrix44.pyx":491
 * 
 *         mat.m[0] = _ux.x
 *         mat.m[1] = _ux.y             # <<<<<<<<<<<<<<
 *         mat.m[2] = _ux.z
 * 
 */
  __pyx_t_2 = __pyx_v__ux->y;
  (__pyx_v_mat->m[1]) = __pyx_t_2;

  /* "ezdxf/acc/matrix44.pyx":492
 *         mat.m[0] = _ux.x
 *         mat.m[1] = _ux.y
 *         mat.m[2] = _ux.z             # <<<<<<<<<<<<<<
 * 
 *         mat.m[4] = _uy.x
 */
  __pyx_t_2 = __pyx_v__ux->z;
  (__pyx_v_mat->m[2]) = __pyx_t_2;

  /* "ezdxf/acc/matrix44.pyx":494
 *         mat.m[2] = _ux.z
 * 
 *         mat.m[4] = _uy.x             # <<<<<<<<<<<<<<
 *         mat.m[5] = _uy.y
 *         mat.m[6] = _uy.z
 */
  __pyx_t_2 = __pyx_v__uy->x;
  (__pyx_v_mat->m[4]) = __pyx_t_2;

  /* "ezdxf/acc/matrix44.pyx":495
 * 
 *         mat.m[4] = _uy.x
 *         mat.m[5] = _uy.y             # <<<<<<<<<<<<<<
 *         mat.m[6] = _uy.z
 * 
 */
  __pyx_t_2 = __pyx_v__uy->y;
  (__pyx_v_mat->m[5]) = __pyx_t_2;

  /* "ezdxf/acc/matrix44.pyx":496
 *         mat.m[4] = _uy.x
 *         mat.m[5] = _uy.y
 *         mat.m[6] = _uy.z             # <<<<<<<<<<<<<<
 * 
 *         mat.m[8] = _uz.x
 */
  __pyx_t_2 = __pyx_v__uy->z;
  (__pyx_v_mat->m[6]) = __pyx_t_2;

  /* "ezdxf/acc/matrix44.pyx":498
 *         mat.m[6] = _uy.z
 * 
 *         mat.m[8] = _uz.x             # <<<<<<<<<<<<<<
 *         mat.m[9] = _uz.y
 *         mat.m[10] = _uz.z
 */
  __pyx_t_2 = __pyx_v__uz->x;
  (__pyx_v_mat->m[8]) = __pyx_t_2;

  /* "ezdxf/acc/matrix44.pyx":499
 * 
 *         mat.m[8] = _uz.x
 *         mat.m[9] = _uz.y             # <<<<<<<<<<<<<<
 *         mat.m[10] = _uz.z
 * 
 */
  __pyx_t_2 = __pyx_v__uz->y;
  (__pyx_v_mat->m[9]) = __pyx_t_2;

  /* "ezdxf/acc/matrix44.pyx":500
 *         mat.m[8] = _uz.x
 *         mat.m[9] = _uz.y
 *         mat.m[10] = _uz.z             # <<<<<<<<<<<<<<
 * 
 *         mat.m[12] = _origin.x
 */
  __pyx_t_2 = __pyx_v__uz->z;
  (__pyx_v_mat->m[10]) = __pyx_t_2;

  /* "ezdxf/acc/matrix44.pyx":502
 *         mat.m[10] = _uz.z
 * 
 *         mat.m[12] = _origin.x             # <<<<<<<<<<<<<<
 *         mat.m[13] = _origin.y
 *         mat.m[14] = _origin.z
 */
  __pyx_t_2 = __pyx_v__origin->x;
  (__pyx_v_mat->m[12]) = __pyx_t_2;

  /* "ezdxf/acc/matrix44.pyx":503
 * 
 *         mat.m[12] = _origin.x
 *         mat.m[13] = _origin.y             # <<<<<<<<<<<<<<
 *         mat.m[14] = _origin.z
 * 
 */
  __pyx_t_2 = __pyx_v__origin->y;
  (__pyx_v_mat->m[13]) = __pyx_t_2;

  /* "ezdxf/acc/matrix44.pyx":504
 *         mat.m[12] = _origin.x
 *         mat.m[13] = _origin.y
 *         mat.m[14] = _origin.z             # <<<<<<<<<<<<<<
 * 
 *         return mat
 */
  __pyx_t_2 = __pyx_v__origin->z;
  (__pyx_v_mat->m[14]) = __pyx_t_2;

  /* "ezdxf/acc/matrix44.pyx":506
 *         mat.m[14] = _origin.z
 * 
 *         return mat             # <<<<<<<<<<<<<<
 * 
 *     def transform(self, vector: 'Vertex') -> Vec3:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_mat));
  __pyx_r = __pyx_v_mat;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":483
 * 
 *     @staticmethod
 *     def ucs(ux=X_AXIS, uy=Y_AXIS, uz=Z_AXIS, origin=NULLVEC) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         cdef Vec3 _ux = Vec3(ux)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.ucs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mat);
  __Pyx_XDECREF((PyObject *)__pyx_v__ux);
  __Pyx_XDECREF((PyObject *)__pyx_v__uy);
  __Pyx_XDECREF((PyObject *)__pyx_v__uz);
  __Pyx_XDECREF((PyObject *)__pyx_v__origin);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":508
 *         return mat
 * 
 *     def transform(self, vector: 'Vertex') -> Vec3:             # <<<<<<<<<<<<<<
 *         cdef Vec3 res = Vec3(vector)
 *         cdef double x = res.x
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_66transform(PyObject *__pyx_v_self, PyObject *__pyx_v_vector); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_66transform(PyObject *__pyx_v_self, PyObject *__pyx_v_vector) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transform (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_65transform(((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self), ((PyObject *)__pyx_v_vector));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_65transform(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self, PyObject *__pyx_v_vector) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_res = 0;
  double __pyx_v_x;
  double __pyx_v_y;
  double __pyx_v_z;
  double *__pyx_v_m;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  double *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("transform", 0);

  /* "ezdxf/acc/matrix44.pyx":509
 * 
 *     def transform(self, vector: 'Vertex') -> Vec3:
 *         cdef Vec3 res = Vec3(vector)             # <<<<<<<<<<<<<<
 *         cdef double x = res.x
 *         cdef double y = res.y
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_v_vector); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":510
 *     def transform(self, vector: 'Vertex') -> Vec3:
 *         cdef Vec3 res = Vec3(vector)
 *         cdef double x = res.x             # <<<<<<<<<<<<<<
 *         cdef double y = res.y
 *         cdef double z = res.z
 */
  __pyx_t_2 = __pyx_v_res->x;
  __pyx_v_x = __pyx_t_2;

  /* "ezdxf/acc/matrix44.pyx":511
 *         cdef Vec3 res = Vec3(vector)
 *         cdef double x = res.x
 *         cdef double y = res.y             # <<<<<<<<<<<<<<
 *         cdef double z = res.z
 *         cdef double *m = self.m
 */
  __pyx_t_2 = __pyx_v_res->y;
  __pyx_v_y = __pyx_t_2;

  /* "ezdxf/acc/matrix44.pyx":512
 *         cdef double x = res.x
 *         cdef double y = res.y
 *         cdef double z = res.z             # <<<<<<<<<<<<<<
 *         cdef double *m = self.m
 * 
 */
  __pyx_t_2 = __pyx_v_res->z;
  __pyx_v_z = __pyx_t_2;

  /* "ezdxf/acc/matrix44.pyx":513
 *         cdef double y = res.y
 *         cdef double z = res.z
 *         cdef double *m = self.m             # <<<<<<<<<<<<<<
 * 
 *         res.x = x * m[0] + y * m[4] + z * m[8] + m[12]
 */
  __pyx_t_3 = __pyx_v_self->m;
  __pyx_v_m = __pyx_t_3;

  /* "ezdxf/acc/matrix44.pyx":515
 *         cdef double *m = self.m
 * 
 *         res.x = x * m[0] + y * m[4] + z * m[8] + m[12]             # <<<<<<<<<<<<<<
 *         res.y = x * m[1] + y * m[5] + z * m[9] + m[13]
 *         res.z = x * m[2] + y * m[6] + z * m[10] + m[14]
 */
  __pyx_v_res->x = ((((__pyx_v_x * (__pyx_v_m[0])) + (__pyx_v_y * (__pyx_v_m[4]))) + (__pyx_v_z * (__pyx_v_m[8]))) + (__pyx_v_m[12]));

  /* "ezdxf/acc/matrix44.pyx":516
 * 
 *         res.x = x * m[0] + y * m[4] + z * m[8] + m[12]
 *         res.y = x * m[1] + y * m[5] + z * m[9] + m[13]             # <<<<<<<<<<<<<<
 *         res.z = x * m[2] + y * m[6] + z * m[10] + m[14]
 *         return res
 */
  __pyx_v_res->y = ((((__pyx_v_x * (__pyx_v_m[1])) + (__pyx_v_y * (__pyx_v_m[5]))) + (__pyx_v_z * (__pyx_v_m[9]))) + (__pyx_v_m[13]));

  /* "ezdxf/acc/matrix44.pyx":517
 *         res.x = x * m[0] + y * m[4] + z * m[8] + m[12]
 *         res.y = x * m[1] + y * m[5] + z * m[9] + m[13]
 *         res.z = x * m[2] + y * m[6] + z * m[10] + m[14]             # <<<<<<<<<<<<<<
 *         return res
 * 
 */
  __pyx_v_res->z = ((((__pyx_v_x * (__pyx_v_m[2])) + (__pyx_v_y * (__pyx_v_m[6]))) + (__pyx_v_z * (__pyx_v_m[10]))) + (__pyx_v_m[14]));

  /* "ezdxf/acc/matrix44.pyx":518
 *         res.y = x * m[1] + y * m[5] + z * m[9] + m[13]
 *         res.z = x * m[2] + y * m[6] + z * m[10] + m[14]
 *         return res             # <<<<<<<<<<<<<<
 * 
 *     def transform_direction(self, vector: 'Vertex', normalize=False) -> Vec3:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":508
 *         return mat
 * 
 *     def transform(self, vector: 'Vertex') -> Vec3:             # <<<<<<<<<<<<<<
 *         cdef Vec3 res = Vec3(vector)
 *         cdef double x = res.x
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.transform", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":520
 *         return res
 * 
 *     def transform_direction(self, vector: 'Vertex', normalize=False) -> Vec3:             # <<<<<<<<<<<<<<
 *         cdef Vec3 res = Vec3(vector)
 *         cdef double x = res.x
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_68transform_direction(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_68transform_direction(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_vector = 0;
  PyObject *__pyx_v_normalize = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transform_direction (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vector,&__pyx_n_s_normalize,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vector)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_normalize);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "transform_direction") < 0)) __PYX_ERR(0, 520, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_vector = values[0];
    __pyx_v_normalize = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("transform_direction", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 520, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.transform_direction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_67transform_direction(((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self), __pyx_v_vector, __pyx_v_normalize);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_67transform_direction(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self, PyObject *__pyx_v_vector, PyObject *__pyx_v_normalize) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_res = 0;
  double __pyx_v_x;
  double __pyx_v_y;
  double __pyx_v_z;
  double *__pyx_v_m;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  double *__pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("transform_direction", 0);

  /* "ezdxf/acc/matrix44.pyx":521
 * 
 *     def transform_direction(self, vector: 'Vertex', normalize=False) -> Vec3:
 *         cdef Vec3 res = Vec3(vector)             # <<<<<<<<<<<<<<
 *         cdef double x = res.x
 *         cdef double y = res.y
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_v_vector); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":522
 *     def transform_direction(self, vector: 'Vertex', normalize=False) -> Vec3:
 *         cdef Vec3 res = Vec3(vector)
 *         cdef double x = res.x             # <<<<<<<<<<<<<<
 *         cdef double y = res.y
 *         cdef double z = res.z
 */
  __pyx_t_2 = __pyx_v_res->x;
  __pyx_v_x = __pyx_t_2;

  /* "ezdxf/acc/matrix44.pyx":523
 *         cdef Vec3 res = Vec3(vector)
 *         cdef double x = res.x
 *         cdef double y = res.y             # <<<<<<<<<<<<<<
 *         cdef double z = res.z
 *         cdef double *m = self.m
 */
  __pyx_t_2 = __pyx_v_res->y;
  __pyx_v_y = __pyx_t_2;

  /* "ezdxf/acc/matrix44.pyx":524
 *         cdef double x = res.x
 *         cdef double y = res.y
 *         cdef double z = res.z             # <<<<<<<<<<<<<<
 *         cdef double *m = self.m
 * 
 */
  __pyx_t_2 = __pyx_v_res->z;
  __pyx_v_z = __pyx_t_2;

  /* "ezdxf/acc/matrix44.pyx":525
 *         cdef double y = res.y
 *         cdef double z = res.z
 *         cdef double *m = self.m             # <<<<<<<<<<<<<<
 * 
 *         res.x = x * m[0] + y * m[4] + z * m[8]
 */
  __pyx_t_3 = __pyx_v_self->m;
  __pyx_v_m = __pyx_t_3;

  /* "ezdxf/acc/matrix44.pyx":527
 *         cdef double *m = self.m
 * 
 *         res.x = x * m[0] + y * m[4] + z * m[8]             # <<<<<<<<<<<<<<
 *         res.y = x * m[1] + y * m[5] + z * m[9]
 *         res.z = x * m[2] + y * m[6] + z * m[10]
 */
  __pyx_v_res->x = (((__pyx_v_x * (__pyx_v_m[0])) + (__pyx_v_y * (__pyx_v_m[4]))) + (__pyx_v_z * (__pyx_v_m[8])));

  /* "ezdxf/acc/matrix44.pyx":528
 * 
 *         res.x = x * m[0] + y * m[4] + z * m[8]
 *         res.y = x * m[1] + y * m[5] + z * m[9]             # <<<<<<<<<<<<<<
 *         res.z = x * m[2] + y * m[6] + z * m[10]
 *         if normalize:
 */
  __pyx_v_res->y = (((__pyx_v_x * (__pyx_v_m[1])) + (__pyx_v_y * (__pyx_v_m[5]))) + (__pyx_v_z * (__pyx_v_m[9])));

  /* "ezdxf/acc/matrix44.pyx":529
 *         res.x = x * m[0] + y * m[4] + z * m[8]
 *         res.y = x * m[1] + y * m[5] + z * m[9]
 *         res.z = x * m[2] + y * m[6] + z * m[10]             # <<<<<<<<<<<<<<
 *         if normalize:
 *             return v3_normalize(res, 1.0)
 */
  __pyx_v_res->z = (((__pyx_v_x * (__pyx_v_m[2])) + (__pyx_v_y * (__pyx_v_m[6]))) + (__pyx_v_z * (__pyx_v_m[10])));

  /* "ezdxf/acc/matrix44.pyx":530
 *         res.y = x * m[1] + y * m[5] + z * m[9]
 *         res.z = x * m[2] + y * m[6] + z * m[10]
 *         if normalize:             # <<<<<<<<<<<<<<
 *             return v3_normalize(res, 1.0)
 *         else:
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_normalize); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 530, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "ezdxf/acc/matrix44.pyx":531
 *         res.z = x * m[2] + y * m[6] + z * m[10]
 *         if normalize:
 *             return v3_normalize(res, 1.0)             # <<<<<<<<<<<<<<
 *         else:
 *             return res
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __pyx_t_1 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_normalize(__pyx_v_res, 1.0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 531, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "ezdxf/acc/matrix44.pyx":530
 *         res.y = x * m[1] + y * m[5] + z * m[9]
 *         res.z = x * m[2] + y * m[6] + z * m[10]
 *         if normalize:             # <<<<<<<<<<<<<<
 *             return v3_normalize(res, 1.0)
 *         else:
 */
  }

  /* "ezdxf/acc/matrix44.pyx":533
 *             return v3_normalize(res, 1.0)
 *         else:
 *             return res             # <<<<<<<<<<<<<<
 * 
 *     ocs_to_wcs = transform_direction
 */
  /*else*/ {
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __Pyx_INCREF(((PyObject *)__pyx_v_res));
    __pyx_r = __pyx_v_res;
    goto __pyx_L0;
  }

  /* "ezdxf/acc/matrix44.pyx":520
 *         return res
 * 
 *     def transform_direction(self, vector: 'Vertex', normalize=False) -> Vec3:             # <<<<<<<<<<<<<<
 *         cdef Vec3 res = Vec3(vector)
 *         cdef double x = res.x
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.transform_direction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5ezdxf_3acc_8matrix44_8Matrix44_71generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ezdxf/acc/matrix44.pyx":537
 *     ocs_to_wcs = transform_direction
 * 
 *     def transform_vertices(self, vectors: Iterable['Vertex']) -> Iterable[Vec3]:             # <<<<<<<<<<<<<<
 *         cdef double *m = self.m
 *         cdef Vec3 res
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_70transform_vertices(PyObject *__pyx_v_self, PyObject *__pyx_v_vectors); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_70transform_vertices(PyObject *__pyx_v_self, PyObject *__pyx_v_vectors) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transform_vertices (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_69transform_vertices(((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self), ((PyObject *)__pyx_v_vectors));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_69transform_vertices(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self, PyObject *__pyx_v_vectors) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("transform_vertices", 0);
  __pyx_cur_scope = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices *)__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices(__pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 537, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_vectors = __pyx_v_vectors;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_vectors);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_vectors);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5ezdxf_3acc_8matrix44_8Matrix44_71generator1, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_transform_vertices, __pyx_n_s_Matrix44_transform_vertices, __pyx_n_s_ezdxf_acc_matrix44); if (unlikely(!gen)) __PYX_ERR(0, 537, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.transform_vertices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5ezdxf_3acc_8matrix44_8Matrix44_71generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices *__pyx_cur_scope = ((struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  double *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transform_vertices", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 537, __pyx_L1_error)

  /* "ezdxf/acc/matrix44.pyx":538
 * 
 *     def transform_vertices(self, vectors: Iterable['Vertex']) -> Iterable[Vec3]:
 *         cdef double *m = self.m             # <<<<<<<<<<<<<<
 *         cdef Vec3 res
 *         cdef double x, y, z
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_self->m;
  __pyx_cur_scope->__pyx_v_m = __pyx_t_1;

  /* "ezdxf/acc/matrix44.pyx":542
 *         cdef double x, y, z
 * 
 *         for vector in vectors:             # <<<<<<<<<<<<<<
 *             res = Vec3(vector)
 *             x = res.x
 */
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_vectors)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_vectors)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_vectors; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_vectors); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 542, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 542, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 542, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 542, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 542, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 542, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 542, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_vector);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_vector, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;

    /* "ezdxf/acc/matrix44.pyx":543
 * 
 *         for vector in vectors:
 *             res = Vec3(vector)             # <<<<<<<<<<<<<<
 *             x = res.x
 *             y = res.y
 */
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_cur_scope->__pyx_v_vector); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 543, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XGOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_res));
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_res, ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_5));
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;

    /* "ezdxf/acc/matrix44.pyx":544
 *         for vector in vectors:
 *             res = Vec3(vector)
 *             x = res.x             # <<<<<<<<<<<<<<
 *             y = res.y
 *             z = res.z
 */
    __pyx_t_6 = __pyx_cur_scope->__pyx_v_res->x;
    __pyx_cur_scope->__pyx_v_x = __pyx_t_6;

    /* "ezdxf/acc/matrix44.pyx":545
 *             res = Vec3(vector)
 *             x = res.x
 *             y = res.y             # <<<<<<<<<<<<<<
 *             z = res.z
 * 
 */
    __pyx_t_6 = __pyx_cur_scope->__pyx_v_res->y;
    __pyx_cur_scope->__pyx_v_y = __pyx_t_6;

    /* "ezdxf/acc/matrix44.pyx":546
 *             x = res.x
 *             y = res.y
 *             z = res.z             # <<<<<<<<<<<<<<
 * 
 *             res.x = x * m[0] + y * m[4] + z * m[8] + m[12]
 */
    __pyx_t_6 = __pyx_cur_scope->__pyx_v_res->z;
    __pyx_cur_scope->__pyx_v_z = __pyx_t_6;

    /* "ezdxf/acc/matrix44.pyx":548
 *             z = res.z
 * 
 *             res.x = x * m[0] + y * m[4] + z * m[8] + m[12]             # <<<<<<<<<<<<<<
 *             res.y = x * m[1] + y * m[5] + z * m[9] + m[13]
 *             res.z = x * m[2] + y * m[6] + z * m[10] + m[14]
 */
    __pyx_cur_scope->__pyx_v_res->x = ((((__pyx_cur_scope->__pyx_v_x * (__pyx_cur_scope->__pyx_v_m[0])) + (__pyx_cur_scope->__pyx_v_y * (__pyx_cur_scope->__pyx_v_m[4]))) + (__pyx_cur_scope->__pyx_v_z * (__pyx_cur_scope->__pyx_v_m[8]))) + (__pyx_cur_scope->__pyx_v_m[12]));

    /* "ezdxf/acc/matrix44.pyx":549
 * 
 *             res.x = x * m[0] + y * m[4] + z * m[8] + m[12]
 *             res.y = x * m[1] + y * m[5] + z * m[9] + m[13]             # <<<<<<<<<<<<<<
 *             res.z = x * m[2] + y * m[6] + z * m[10] + m[14]
 *             yield res
 */
    __pyx_cur_scope->__pyx_v_res->y = ((((__pyx_cur_scope->__pyx_v_x * (__pyx_cur_scope->__pyx_v_m[1])) + (__pyx_cur_scope->__pyx_v_y * (__pyx_cur_scope->__pyx_v_m[5]))) + (__pyx_cur_scope->__pyx_v_z * (__pyx_cur_scope->__pyx_v_m[9]))) + (__pyx_cur_scope->__pyx_v_m[13]));

    /* "ezdxf/acc/matrix44.pyx":550
 *             res.x = x * m[0] + y * m[4] + z * m[8] + m[12]
 *             res.y = x * m[1] + y * m[5] + z * m[9] + m[13]
 *             res.z = x * m[2] + y * m[6] + z * m[10] + m[14]             # <<<<<<<<<<<<<<
 *             yield res
 * 
 */
    __pyx_cur_scope->__pyx_v_res->z = ((((__pyx_cur_scope->__pyx_v_x * (__pyx_cur_scope->__pyx_v_m[2])) + (__pyx_cur_scope->__pyx_v_y * (__pyx_cur_scope->__pyx_v_m[6]))) + (__pyx_cur_scope->__pyx_v_z * (__pyx_cur_scope->__pyx_v_m[10]))) + (__pyx_cur_scope->__pyx_v_m[14]));

    /* "ezdxf/acc/matrix44.pyx":551
 *             res.y = x * m[1] + y * m[5] + z * m[9] + m[13]
 *             res.z = x * m[2] + y * m[6] + z * m[10] + m[14]
 *             yield res             # <<<<<<<<<<<<<<
 * 
 *     def transform_directions(self, vectors: Iterable['Vertex'],
 */
    __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_res));
    __pyx_r = ((PyObject *)__pyx_cur_scope->__pyx_v_res);
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 551, __pyx_L1_error)

    /* "ezdxf/acc/matrix44.pyx":542
 *         cdef double x, y, z
 * 
 *         for vector in vectors:             # <<<<<<<<<<<<<<
 *             res = Vec3(vector)
 *             x = res.x
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "ezdxf/acc/matrix44.pyx":537
 *     ocs_to_wcs = transform_direction
 * 
 *     def transform_vertices(self, vectors: Iterable['Vertex']) -> Iterable[Vec3]:             # <<<<<<<<<<<<<<
 *         cdef double *m = self.m
 *         cdef Vec3 res
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("transform_vertices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5ezdxf_3acc_8matrix44_8Matrix44_74generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ezdxf/acc/matrix44.pyx":553
 *             yield res
 * 
 *     def transform_directions(self, vectors: Iterable['Vertex'],             # <<<<<<<<<<<<<<
 *                              normalize=False) -> Iterable[Vec3]:
 *         cdef double *m = self.m
 */

/* Python wrapper */
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_73transform_directions(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_73transform_directions(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_vectors = 0;
  PyObject *__pyx_v_normalize = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transform_directions (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vectors,&__pyx_n_s_normalize,0};
    PyObject* values[2] = {0,0};

    /* "ezdxf/acc/matrix44.pyx":554
 * 
 *     def transform_directions(self, vectors: Iterable['Vertex'],
 *                              normalize=False) -> Iterable[Vec3]:             # <<<<<<<<<<<<<<
 *         cdef double *m = self.m
 *         cdef Vec3 res
 */
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vectors)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_normalize);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "transform_directions") < 0)) __PYX_ERR(0, 553, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_vectors = values[0];
    __pyx_v_normalize = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("transform_directions", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 553, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.transform_directions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_72transform_directions(((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self), __pyx_v_vectors, __pyx_v_normalize);

  /* "ezdxf/acc/matrix44.pyx":553
 *             yield res
 * 
 *     def transform_directions(self, vectors: Iterable['Vertex'],             # <<<<<<<<<<<<<<
 *                              normalize=False) -> Iterable[Vec3]:
 *         cdef double *m = self.m
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_72transform_directions(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self, PyObject *__pyx_v_vectors, PyObject *__pyx_v_normalize) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("transform_directions", 0);
  __pyx_cur_scope = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions *)__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions(__pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 553, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_vectors = __pyx_v_vectors;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_vectors);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_vectors);
  __pyx_cur_scope->__pyx_v_normalize = __pyx_v_normalize;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_normalize);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_normalize);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5ezdxf_3acc_8matrix44_8Matrix44_74generator2, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_transform_directions, __pyx_n_s_Matrix44_transform_directions, __pyx_n_s_ezdxf_acc_matrix44); if (unlikely(!gen)) __PYX_ERR(0, 553, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.transform_directions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5ezdxf_3acc_8matrix44_8Matrix44_74generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions *__pyx_cur_scope = ((struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  double *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transform_directions", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 553, __pyx_L1_error)

  /* "ezdxf/acc/matrix44.pyx":555
 *     def transform_directions(self, vectors: Iterable['Vertex'],
 *                              normalize=False) -> Iterable[Vec3]:
 *         cdef double *m = self.m             # <<<<<<<<<<<<<<
 *         cdef Vec3 res
 *         cdef double x, y, z
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_self->m;
  __pyx_cur_scope->__pyx_v_m = __pyx_t_1;

  /* "ezdxf/acc/matrix44.pyx":558
 *         cdef Vec3 res
 *         cdef double x, y, z
 *         cdef bint _normalize = normalize             # <<<<<<<<<<<<<<
 * 
 *         for vector in vectors:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_normalize); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 558, __pyx_L1_error)
  __pyx_cur_scope->__pyx_v__normalize = __pyx_t_2;

  /* "ezdxf/acc/matrix44.pyx":560
 *         cdef bint _normalize = normalize
 * 
 *         for vector in vectors:             # <<<<<<<<<<<<<<
 *             res = Vec3(vector)
 *             x = res.x
 */
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_vectors)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_vectors)) {
    __pyx_t_3 = __pyx_cur_scope->__pyx_v_vectors; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_vectors); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 560, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 560, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 560, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 560, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 560, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 560, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 560, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_vector);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_vector, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;

    /* "ezdxf/acc/matrix44.pyx":561
 * 
 *         for vector in vectors:
 *             res = Vec3(vector)             # <<<<<<<<<<<<<<
 *             x = res.x
 *             y = res.y
 */
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_cur_scope->__pyx_v_vector); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 561, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XGOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_res));
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_res, ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_6));
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;

    /* "ezdxf/acc/matrix44.pyx":562
 *         for vector in vectors:
 *             res = Vec3(vector)
 *             x = res.x             # <<<<<<<<<<<<<<
 *             y = res.y
 *             z = res.z
 */
    __pyx_t_7 = __pyx_cur_scope->__pyx_v_res->x;
    __pyx_cur_scope->__pyx_v_x = __pyx_t_7;

    /* "ezdxf/acc/matrix44.pyx":563
 *             res = Vec3(vector)
 *             x = res.x
 *             y = res.y             # <<<<<<<<<<<<<<
 *             z = res.z
 * 
 */
    __pyx_t_7 = __pyx_cur_scope->__pyx_v_res->y;
    __pyx_cur_scope->__pyx_v_y = __pyx_t_7;

    /* "ezdxf/acc/matrix44.pyx":564
 *             x = res.x
 *             y = res.y
 *             z = res.z             # <<<<<<<<<<<<<<
 * 
 *             res.x = x * m[0] + y * m[4] + z * m[8]
 */
    __pyx_t_7 = __pyx_cur_scope->__pyx_v_res->z;
    __pyx_cur_scope->__pyx_v_z = __pyx_t_7;

    /* "ezdxf/acc/matrix44.pyx":566
 *             z = res.z
 * 
 *             res.x = x * m[0] + y * m[4] + z * m[8]             # <<<<<<<<<<<<<<
 *             res.y = x * m[1] + y * m[5] + z * m[9]
 *             res.z = x * m[2] + y * m[6] + z * m[10]
 */
    __pyx_cur_scope->__pyx_v_res->x = (((__pyx_cur_scope->__pyx_v_x * (__pyx_cur_scope->__pyx_v_m[0])) + (__pyx_cur_scope->__pyx_v_y * (__pyx_cur_scope->__pyx_v_m[4]))) + (__pyx_cur_scope->__pyx_v_z * (__pyx_cur_scope->__pyx_v_m[8])));

    /* "ezdxf/acc/matrix44.pyx":567
 * 
 *             res.x = x * m[0] + y * m[4] + z * m[8]
 *             res.y = x * m[1] + y * m[5] + z * m[9]             # <<<<<<<<<<<<<<
 *             res.z = x * m[2] + y * m[6] + z * m[10]
 *             yield v3_normalize(res, 1.0) if _normalize else res
 */
    __pyx_cur_scope->__pyx_v_res->y = (((__pyx_cur_scope->__pyx_v_x * (__pyx_cur_scope->__pyx_v_m[1])) + (__pyx_cur_scope->__pyx_v_y * (__pyx_cur_scope->__pyx_v_m[5]))) + (__pyx_cur_scope->__pyx_v_z * (__pyx_cur_scope->__pyx_v_m[9])));

    /* "ezdxf/acc/matrix44.pyx":568
 *             res.x = x * m[0] + y * m[4] + z * m[8]
 *             res.y = x * m[1] + y * m[5] + z * m[9]
 *             res.z = x * m[2] + y * m[6] + z * m[10]             # <<<<<<<<<<<<<<
 *             yield v3_normalize(res, 1.0) if _normalize else res
 * 
 */
    __pyx_cur_scope->__pyx_v_res->z = (((__pyx_cur_scope->__pyx_v_x * (__pyx_cur_scope->__pyx_v_m[2])) + (__pyx_cur_scope->__pyx_v_y * (__pyx_cur_scope->__pyx_v_m[6]))) + (__pyx_cur_scope->__pyx_v_z * (__pyx_cur_scope->__pyx_v_m[10])));

    /* "ezdxf/acc/matrix44.pyx":569
 *             res.y = x * m[1] + y * m[5] + z * m[9]
 *             res.z = x * m[2] + y * m[6] + z * m[10]
 *             yield v3_normalize(res, 1.0) if _normalize else res             # <<<<<<<<<<<<<<
 * 
 *     def ucs_vertex_from_wcs(self, wcs: Vec3) -> Vec3:
 */
    if ((__pyx_cur_scope->__pyx_v__normalize != 0)) {
      __pyx_t_8 = ((PyObject *)__pyx_f_5ezdxf_3acc_6vector_v3_normalize(__pyx_cur_scope->__pyx_v_res, 1.0)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 569, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = __pyx_t_8;
      __pyx_t_8 = 0;
    } else {
      __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_res));
      __pyx_t_6 = ((PyObject *)__pyx_cur_scope->__pyx_v_res);
    }
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    __Pyx_XGIVEREF(__pyx_t_3);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 569, __pyx_L1_error)

    /* "ezdxf/acc/matrix44.pyx":560
 *         cdef bint _normalize = normalize
 * 
 *         for vector in vectors:             # <<<<<<<<<<<<<<
 *             res = Vec3(vector)
 *             x = res.x
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "ezdxf/acc/matrix44.pyx":553
 *             yield res
 * 
 *     def transform_directions(self, vectors: Iterable['Vertex'],             # <<<<<<<<<<<<<<
 *                              normalize=False) -> Iterable[Vec3]:
 *         cdef double *m = self.m
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("transform_directions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":571
 *             yield v3_normalize(res, 1.0) if _normalize else res
 * 
 *     def ucs_vertex_from_wcs(self, wcs: Vec3) -> Vec3:             # <<<<<<<<<<<<<<
 *         return self.ucs_direction_from_wcs(wcs - self.origin)
 * 
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_76ucs_vertex_from_wcs(PyObject *__pyx_v_self, PyObject *__pyx_v_wcs); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_76ucs_vertex_from_wcs(PyObject *__pyx_v_self, PyObject *__pyx_v_wcs) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ucs_vertex_from_wcs (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wcs), __pyx_ptype_5ezdxf_3acc_6vector_Vec3, 1, "wcs", 0))) __PYX_ERR(0, 571, __pyx_L1_error)
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_75ucs_vertex_from_wcs(((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self), ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_v_wcs));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_75ucs_vertex_from_wcs(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_wcs) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ucs_vertex_from_wcs", 0);

  /* "ezdxf/acc/matrix44.pyx":572
 * 
 *     def ucs_vertex_from_wcs(self, wcs: Vec3) -> Vec3:
 *         return self.ucs_direction_from_wcs(wcs - self.origin)             # <<<<<<<<<<<<<<
 * 
 *     def ucs_direction_from_wcs(self, wcs: 'Vertex') -> Vec3:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ucs_direction_from_wcs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_origin); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Subtract(((PyObject *)__pyx_v_wcs), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5ezdxf_3acc_6vector_Vec3))))) __PYX_ERR(0, 572, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":571
 *             yield v3_normalize(res, 1.0) if _normalize else res
 * 
 *     def ucs_vertex_from_wcs(self, wcs: Vec3) -> Vec3:             # <<<<<<<<<<<<<<
 *         return self.ucs_direction_from_wcs(wcs - self.origin)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.ucs_vertex_from_wcs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pyx":574
 *         return self.ucs_direction_from_wcs(wcs - self.origin)
 * 
 *     def ucs_direction_from_wcs(self, wcs: 'Vertex') -> Vec3:             # <<<<<<<<<<<<<<
 *         cdef double *m = self.m
 *         cdef Vec3 res = Vec3(wcs)
 */

/* Python wrapper */
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_78ucs_direction_from_wcs(PyObject *__pyx_v_self, PyObject *__pyx_v_wcs); /*proto*/
static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_78ucs_direction_from_wcs(PyObject *__pyx_v_self, PyObject *__pyx_v_wcs) {
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ucs_direction_from_wcs (wrapper)", 0);
  __pyx_r = __pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_77ucs_direction_from_wcs(((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)__pyx_v_self), ((PyObject *)__pyx_v_wcs));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_pf_5ezdxf_3acc_8matrix44_8Matrix44_77ucs_direction_from_wcs(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *__pyx_v_self, PyObject *__pyx_v_wcs) {
  double *__pyx_v_m;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_v_res = 0;
  double __pyx_v_x;
  double __pyx_v_y;
  double __pyx_v_z;
  struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ucs_direction_from_wcs", 0);

  /* "ezdxf/acc/matrix44.pyx":575
 * 
 *     def ucs_direction_from_wcs(self, wcs: 'Vertex') -> Vec3:
 *         cdef double *m = self.m             # <<<<<<<<<<<<<<
 *         cdef Vec3 res = Vec3(wcs)
 *         cdef double x = res.x
 */
  __pyx_t_1 = __pyx_v_self->m;
  __pyx_v_m = __pyx_t_1;

  /* "ezdxf/acc/matrix44.pyx":576
 *     def ucs_direction_from_wcs(self, wcs: 'Vertex') -> Vec3:
 *         cdef double *m = self.m
 *         cdef Vec3 res = Vec3(wcs)             # <<<<<<<<<<<<<<
 *         cdef double x = res.x
 *         cdef double y = res.y
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5ezdxf_3acc_6vector_Vec3), __pyx_v_wcs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_res = ((struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ezdxf/acc/matrix44.pyx":577
 *         cdef double *m = self.m
 *         cdef Vec3 res = Vec3(wcs)
 *         cdef double x = res.x             # <<<<<<<<<<<<<<
 *         cdef double y = res.y
 *         cdef double z = res.z
 */
  __pyx_t_3 = __pyx_v_res->x;
  __pyx_v_x = __pyx_t_3;

  /* "ezdxf/acc/matrix44.pyx":578
 *         cdef Vec3 res = Vec3(wcs)
 *         cdef double x = res.x
 *         cdef double y = res.y             # <<<<<<<<<<<<<<
 *         cdef double z = res.z
 * 
 */
  __pyx_t_3 = __pyx_v_res->y;
  __pyx_v_y = __pyx_t_3;

  /* "ezdxf/acc/matrix44.pyx":579
 *         cdef double x = res.x
 *         cdef double y = res.y
 *         cdef double z = res.z             # <<<<<<<<<<<<<<
 * 
 *         res.x = x * m[0] + y * m[1] + z * m[2]
 */
  __pyx_t_3 = __pyx_v_res->z;
  __pyx_v_z = __pyx_t_3;

  /* "ezdxf/acc/matrix44.pyx":581
 *         cdef double z = res.z
 * 
 *         res.x = x * m[0] + y * m[1] + z * m[2]             # <<<<<<<<<<<<<<
 *         res.y = x * m[4] + y * m[5] + z * m[6]
 *         res.z = x * m[8] + y * m[9] + z * m[10]
 */
  __pyx_v_res->x = (((__pyx_v_x * (__pyx_v_m[0])) + (__pyx_v_y * (__pyx_v_m[1]))) + (__pyx_v_z * (__pyx_v_m[2])));

  /* "ezdxf/acc/matrix44.pyx":582
 * 
 *         res.x = x * m[0] + y * m[1] + z * m[2]
 *         res.y = x * m[4] + y * m[5] + z * m[6]             # <<<<<<<<<<<<<<
 *         res.z = x * m[8] + y * m[9] + z * m[10]
 *         return res
 */
  __pyx_v_res->y = (((__pyx_v_x * (__pyx_v_m[4])) + (__pyx_v_y * (__pyx_v_m[5]))) + (__pyx_v_z * (__pyx_v_m[6])));

  /* "ezdxf/acc/matrix44.pyx":583
 *         res.x = x * m[0] + y * m[1] + z * m[2]
 *         res.y = x * m[4] + y * m[5] + z * m[6]
 *         res.z = x * m[8] + y * m[9] + z * m[10]             # <<<<<<<<<<<<<<
 *         return res
 * 
 */
  __pyx_v_res->z = (((__pyx_v_x * (__pyx_v_m[8])) + (__pyx_v_y * (__pyx_v_m[9]))) + (__pyx_v_z * (__pyx_v_m[10])));

  /* "ezdxf/acc/matrix44.pyx":584
 *         res.y = x * m[4] + y * m[5] + z * m[6]
 *         res.z = x * m[8] + y * m[9] + z * m[10]
 *         return res             # <<<<<<<<<<<<<<
 * 
 *     ocs_from_wcs = ucs_direction_from_wcs
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "ezdxf/acc/matrix44.pyx":574
 *         return self.ucs_direction_from_wcs(wcs - self.origin)
 * 
 *     def ucs_direction_from_wcs(self, wcs: 'Vertex') -> Vec3:             # <<<<<<<<<<<<<<
 *         cdef double *m = self.m
 *         cdef Vec3 res = Vec3(wcs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ezdxf.acc.matrix44.Matrix44.ucs_direction_from_wcs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ezdxf/acc/matrix44.pxd":14
 *     cdef Vec3 get_uz(self)
 * 
 * cdef inline swap(double *a, double *b):             # <<<<<<<<<<<<<<
 *     cdef double tmp = a[0]
 *     a[0] = b[0]
 */

static CYTHON_INLINE PyObject *__pyx_f_5ezdxf_3acc_8matrix44_swap(double *__pyx_v_a, double *__pyx_v_b) {
  double __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("swap", 0);

  /* "ezdxf/acc/matrix44.pxd":15
 * 
 * cdef inline swap(double *a, double *b):
 *     cdef double tmp = a[0]             # <<<<<<<<<<<<<<
 *     a[0] = b[0]
 *     b[0] = tmp
 */
  __pyx_v_tmp = (__pyx_v_a[0]);

  /* "ezdxf/acc/matrix44.pxd":16
 * cdef inline swap(double *a, double *b):
 *     cdef double tmp = a[0]
 *     a[0] = b[0]             # <<<<<<<<<<<<<<
 *     b[0] = tmp
 */
  (__pyx_v_a[0]) = (__pyx_v_b[0]);

  /* "ezdxf/acc/matrix44.pxd":17
 *     cdef double tmp = a[0]
 *     a[0] = b[0]
 *     b[0] = tmp             # <<<<<<<<<<<<<<
 */
  (__pyx_v_b[0]) = __pyx_v_tmp;

  /* "ezdxf/acc/matrix44.pxd":14
 *     cdef Vec3 get_uz(self)
 * 
 * cdef inline swap(double *a, double *b):             # <<<<<<<<<<<<<<
 *     cdef double tmp = a[0]
 *     a[0] = b[0]
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_5ezdxf_3acc_8matrix44_Matrix44 __pyx_vtable_5ezdxf_3acc_8matrix44_Matrix44;

static PyObject *__pyx_tp_new_5ezdxf_3acc_8matrix44_Matrix44(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)o);
  p->__pyx_vtab = __pyx_vtabptr_5ezdxf_3acc_8matrix44_Matrix44;
  if (unlikely(__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5ezdxf_3acc_8matrix44_Matrix44(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_5ezdxf_3acc_8matrix44_Matrix44(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_5ezdxf_3acc_8matrix44_Matrix44(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_7__setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_getprop_5ezdxf_3acc_8matrix44_8Matrix44_origin(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_6origin_1__get__(o);
}

static int __pyx_setprop_5ezdxf_3acc_8matrix44_8Matrix44_origin(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_6origin_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5ezdxf_3acc_8matrix44_8Matrix44_ux(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_2ux_1__get__(o);
}

static PyObject *__pyx_getprop_5ezdxf_3acc_8matrix44_8Matrix44_uy(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_2uy_1__get__(o);
}

static PyObject *__pyx_getprop_5ezdxf_3acc_8matrix44_8Matrix44_uz(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_2uz_1__get__(o);
}

static PyObject *__pyx_getprop_5ezdxf_3acc_8matrix44_8Matrix44_is_cartesian(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_12is_cartesian_1__get__(o);
}

static PyObject *__pyx_getprop_5ezdxf_3acc_8matrix44_8Matrix44_is_orthogonal(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_13is_orthogonal_1__get__(o);
}

static PyMethodDef __pyx_methods_5ezdxf_3acc_8matrix44_Matrix44[] = {
  {"__reduce__", (PyCFunction)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_3__reduce__, METH_NOARGS, 0},
  {"get_2d_transformation", (PyCFunction)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_14get_2d_transformation, METH_NOARGS, 0},
  {"get_row", (PyCFunction)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_16get_row, METH_O, 0},
  {"set_row", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_18set_row, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_col", (PyCFunction)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_20get_col, METH_O, 0},
  {"set_col", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_22set_col, METH_VARARGS|METH_KEYWORDS, 0},
  {"rows", (PyCFunction)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_24rows, METH_NOARGS, 0},
  {"columns", (PyCFunction)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_26columns, METH_NOARGS, 0},
  {"copy", (PyCFunction)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_28copy, METH_NOARGS, 0},
  {"scale", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_30scale, METH_VARARGS|METH_KEYWORDS, 0},
  {"translate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_32translate, METH_VARARGS|METH_KEYWORDS, 0},
  {"x_rotate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_34x_rotate, METH_VARARGS|METH_KEYWORDS, 0},
  {"y_rotate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_36y_rotate, METH_VARARGS|METH_KEYWORDS, 0},
  {"z_rotate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_38z_rotate, METH_VARARGS|METH_KEYWORDS, 0},
  {"axis_rotate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_40axis_rotate, METH_VARARGS|METH_KEYWORDS, 0},
  {"xyz_rotate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_42xyz_rotate, METH_VARARGS|METH_KEYWORDS, 0},
  {"shear_xy", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_44shear_xy, METH_VARARGS|METH_KEYWORDS, 0},
  {"perspective_projection", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_46perspective_projection, METH_VARARGS|METH_KEYWORDS, 0},
  {"perspective_projection_fov", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_48perspective_projection_fov, METH_VARARGS|METH_KEYWORDS, 0},
  {"chain", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_50chain, METH_VARARGS|METH_KEYWORDS, 0},
  {"transpose", (PyCFunction)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_58transpose, METH_NOARGS, 0},
  {"determinant", (PyCFunction)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_60determinant, METH_NOARGS, 0},
  {"inverse", (PyCFunction)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_62inverse, METH_NOARGS, 0},
  {"ucs", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_64ucs, METH_VARARGS|METH_KEYWORDS, 0},
  {"transform", (PyCFunction)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_66transform, METH_O, 0},
  {"transform_direction", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_68transform_direction, METH_VARARGS|METH_KEYWORDS, 0},
  {"transform_vertices", (PyCFunction)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_70transform_vertices, METH_O, 0},
  {"transform_directions", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_73transform_directions, METH_VARARGS|METH_KEYWORDS, 0},
  {"ucs_vertex_from_wcs", (PyCFunction)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_76ucs_vertex_from_wcs, METH_O, 0},
  {"ucs_direction_from_wcs", (PyCFunction)__pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_78ucs_direction_from_wcs, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5ezdxf_3acc_8matrix44_Matrix44[] = {
  {(char *)"origin", __pyx_getprop_5ezdxf_3acc_8matrix44_8Matrix44_origin, __pyx_setprop_5ezdxf_3acc_8matrix44_8Matrix44_origin, (char *)0, 0},
  {(char *)"ux", __pyx_getprop_5ezdxf_3acc_8matrix44_8Matrix44_ux, 0, (char *)0, 0},
  {(char *)"uy", __pyx_getprop_5ezdxf_3acc_8matrix44_8Matrix44_uy, 0, (char *)0, 0},
  {(char *)"uz", __pyx_getprop_5ezdxf_3acc_8matrix44_8Matrix44_uz, 0, (char *)0, 0},
  {(char *)"is_cartesian", __pyx_getprop_5ezdxf_3acc_8matrix44_8Matrix44_is_cartesian, 0, (char *)0, 0},
  {(char *)"is_orthogonal", __pyx_getprop_5ezdxf_3acc_8matrix44_8Matrix44_is_orthogonal, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Matrix44 = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  __pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_54__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  __pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_52__imul__, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  __pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_56__matmul__, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Matrix44 = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_5ezdxf_3acc_8matrix44_Matrix44, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Matrix44 = {
  0, /*mp_length*/
  __pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_5__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_5ezdxf_3acc_8matrix44_Matrix44, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_5ezdxf_3acc_8matrix44_Matrix44 = {
  PyVarObject_HEAD_INIT(0, 0)
  "ezdxf.acc.matrix44.Matrix44", /*tp_name*/
  sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5ezdxf_3acc_8matrix44_Matrix44, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_12__repr__, /*tp_repr*/
  &__pyx_tp_as_number_Matrix44, /*tp_as_number*/
  &__pyx_tp_as_sequence_Matrix44, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Matrix44, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_5ezdxf_3acc_8matrix44_8Matrix44_9__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5ezdxf_3acc_8matrix44_Matrix44, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5ezdxf_3acc_8matrix44_Matrix44, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5ezdxf_3acc_8matrix44_Matrix44, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__ *__pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__[8];
static int __pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__ = 0;

static PyObject *__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__)))) {
    o = (PyObject*)__pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__[--__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__];
    memset(o, 0, sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__(PyObject *o) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__ *p = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__)))) {
    __pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__[__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__++] = ((struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__ *p = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "ezdxf.acc.matrix44.__pyx_scope_struct____iter__", /*tp_name*/
  sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__ *__pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__[8];
static int __pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__ = 0;

static PyObject *__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__)))) {
    o = (PyObject*)__pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__[--__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__];
    memset(o, 0, sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__(PyObject *o) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__ *p = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_format_row);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__)))) {
    __pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__[__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__++] = ((struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__ *p = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__ *)o;
  if (p->__pyx_v_format_row) {
    e = (*v)(p->__pyx_v_format_row, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__ *p = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__ *)o;
  tmp = ((PyObject*)p->__pyx_v_format_row);
  p->__pyx_v_format_row = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "ezdxf.acc.matrix44.__pyx_scope_struct_1___repr__", /*tp_name*/
  sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__, /*tp_traverse*/
  __pyx_tp_clear_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row *__pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row[8];
static int __pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row = 0;

static PyObject *__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row)))) {
    o = (PyObject*)__pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row[--__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row];
    memset(o, 0, sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row(PyObject *o) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row *p = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_row);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row)))) {
    __pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row[__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row++] = ((struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row *p = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row *)o;
  if (p->__pyx_v_row) {
    e = (*v)(p->__pyx_v_row, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row *p = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row *)o;
  tmp = ((PyObject*)p->__pyx_v_row);
  p->__pyx_v_row = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row = {
  PyVarObject_HEAD_INIT(0, 0)
  "ezdxf.acc.matrix44.__pyx_scope_struct_2_format_row", /*tp_name*/
  sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row, /*tp_traverse*/
  __pyx_tp_clear_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr *__pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr[8];
static int __pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr = 0;

static PyObject *__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr[--__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr(PyObject *o) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_value);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr)))) {
    __pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr[__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr++] = ((struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_value) {
    e = (*v)(p->__pyx_v_value, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "ezdxf.acc.matrix44.__pyx_scope_struct_3_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr *__pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr[8];
static int __pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr = 0;

static PyObject *__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr[--__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr(PyObject *o) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr *p = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_row);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr)))) {
    __pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr[__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr++] = ((struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr *p = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_row) {
    e = (*v)(p->__pyx_v_row, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "ezdxf.acc.matrix44.__pyx_scope_struct_4_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows *__pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows[8];
static int __pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows = 0;

static PyObject *__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows)))) {
    o = (PyObject*)__pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows[--__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows];
    memset(o, 0, sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows(PyObject *o) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows *p = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows)))) {
    __pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows[__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows++] = ((struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows *p = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows *p = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows = {
  PyVarObject_HEAD_INIT(0, 0)
  "ezdxf.acc.matrix44.__pyx_scope_struct_5_rows", /*tp_name*/
  sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows, /*tp_traverse*/
  __pyx_tp_clear_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr *__pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr[8];
static int __pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr = 0;

static PyObject *__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr[--__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr(PyObject *o) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr *p = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_index);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr)))) {
    __pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr[__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr++] = ((struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr *p = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_index) {
    e = (*v)(p->__pyx_v_index, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "ezdxf.acc.matrix44.__pyx_scope_struct_6_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns *__pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns[8];
static int __pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns = 0;

static PyObject *__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns)))) {
    o = (PyObject*)__pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns[--__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns];
    memset(o, 0, sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns(PyObject *o) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns *p = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns)))) {
    __pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns[__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns++] = ((struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns *p = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns *p = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns = {
  PyVarObject_HEAD_INIT(0, 0)
  "ezdxf.acc.matrix44.__pyx_scope_struct_7_columns", /*tp_name*/
  sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns, /*tp_traverse*/
  __pyx_tp_clear_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr *__pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr[8];
static int __pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr = 0;

static PyObject *__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr[--__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr(PyObject *o) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr *p = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_index);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr)))) {
    __pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr[__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr++] = ((struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr *p = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_index) {
    e = (*v)(p->__pyx_v_index, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "ezdxf.acc.matrix44.__pyx_scope_struct_8_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices *__pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices[8];
static int __pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices = 0;

static PyObject *__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices)))) {
    o = (PyObject*)__pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices[--__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices];
    memset(o, 0, sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices(PyObject *o) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices *p = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_res);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_vector);
  Py_CLEAR(p->__pyx_v_vectors);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices)))) {
    __pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices[__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices++] = ((struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices *p = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices *)o;
  if (p->__pyx_v_res) {
    e = (*v)(((PyObject *)p->__pyx_v_res), a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_vector) {
    e = (*v)(p->__pyx_v_vector, a); if (e) return e;
  }
  if (p->__pyx_v_vectors) {
    e = (*v)(p->__pyx_v_vectors, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices = {
  PyVarObject_HEAD_INIT(0, 0)
  "ezdxf.acc.matrix44.__pyx_scope_struct_9_transform_vertices", /*tp_name*/
  sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions *__pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions[8];
static int __pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions = 0;

static PyObject *__pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions)))) {
    o = (PyObject*)__pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions[--__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions];
    memset(o, 0, sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions(PyObject *o) {
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions *p = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_normalize);
  Py_CLEAR(p->__pyx_v_res);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_vector);
  Py_CLEAR(p->__pyx_v_vectors);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions)))) {
    __pyx_freelist_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions[__pyx_freecount_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions++] = ((struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions *p = (struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions *)o;
  if (p->__pyx_v_normalize) {
    e = (*v)(p->__pyx_v_normalize, a); if (e) return e;
  }
  if (p->__pyx_v_res) {
    e = (*v)(((PyObject *)p->__pyx_v_res), a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_vector) {
    e = (*v)(p->__pyx_v_vector, a); if (e) return e;
  }
  if (p->__pyx_v_vectors) {
    e = (*v)(p->__pyx_v_vectors, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions = {
  PyVarObject_HEAD_INIT(0, 0)
  "ezdxf.acc.matrix44.__pyx_scope_struct_10_transform_directions", /*tp_name*/
  sizeof(struct __pyx_obj_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_matrix44(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_matrix44},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "matrix44",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_n_s_Iterable, __pyx_k_Iterable, sizeof(__pyx_k_Iterable), 0, 0, 1, 1},
  {&__pyx_n_s_Matrix44, __pyx_k_Matrix44, sizeof(__pyx_k_Matrix44), 0, 0, 1, 1},
  {&__pyx_n_s_Matrix44___iter, __pyx_k_Matrix44___iter, sizeof(__pyx_k_Matrix44___iter), 0, 0, 1, 1},
  {&__pyx_kp_u_Matrix44_s, __pyx_k_Matrix44_s, sizeof(__pyx_k_Matrix44_s), 0, 1, 0, 0},
  {&__pyx_n_s_Matrix44_transform_directions, __pyx_k_Matrix44_transform_directions, sizeof(__pyx_k_Matrix44_transform_directions), 0, 0, 1, 1},
  {&__pyx_n_s_Matrix44_transform_vertices, __pyx_k_Matrix44_transform_vertices, sizeof(__pyx_k_Matrix44_transform_vertices), 0, 0, 1, 1},
  {&__pyx_n_s_NULLVEC, __pyx_k_NULLVEC, sizeof(__pyx_k_NULLVEC), 0, 0, 1, 1},
  {&__pyx_n_s_Sequence, __pyx_k_Sequence, sizeof(__pyx_k_Sequence), 0, 0, 1, 1},
  {&__pyx_n_s_TYPE_CHECKING, __pyx_k_TYPE_CHECKING, sizeof(__pyx_k_TYPE_CHECKING), 0, 0, 1, 1},
  {&__pyx_n_s_Tuple, __pyx_k_Tuple, sizeof(__pyx_k_Tuple), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_Vertex, __pyx_k_Vertex, sizeof(__pyx_k_Vertex), 0, 0, 1, 1},
  {&__pyx_n_s_X_AXIS, __pyx_k_X_AXIS, sizeof(__pyx_k_X_AXIS), 0, 0, 1, 1},
  {&__pyx_n_s_Y_AXIS, __pyx_k_Y_AXIS, sizeof(__pyx_k_Y_AXIS), 0, 0, 1, 1},
  {&__pyx_n_s_Z_AXIS, __pyx_k_Z_AXIS, sizeof(__pyx_k_Z_AXIS), 0, 0, 1, 1},
  {&__pyx_kp_u__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 1, 0, 0},
  {&__pyx_n_s_angle, __pyx_k_angle, sizeof(__pyx_k_angle), 0, 0, 1, 1},
  {&__pyx_n_s_angle_x, __pyx_k_angle_x, sizeof(__pyx_k_angle_x), 0, 0, 1, 1},
  {&__pyx_n_s_angle_y, __pyx_k_angle_y, sizeof(__pyx_k_angle_y), 0, 0, 1, 1},
  {&__pyx_n_s_angle_z, __pyx_k_angle_z, sizeof(__pyx_k_angle_z), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_aspect, __pyx_k_aspect, sizeof(__pyx_k_aspect), 0, 0, 1, 1},
  {&__pyx_n_s_axis, __pyx_k_axis, sizeof(__pyx_k_axis), 0, 0, 1, 1},
  {&__pyx_n_s_axis_2, __pyx_k_axis_2, sizeof(__pyx_k_axis_2), 0, 0, 1, 1},
  {&__pyx_n_s_axis_rotate, __pyx_k_axis_rotate, sizeof(__pyx_k_axis_rotate), 0, 0, 1, 1},
  {&__pyx_n_s_bottom, __pyx_k_bottom, sizeof(__pyx_k_bottom), 0, 0, 1, 1},
  {&__pyx_n_s_chain, __pyx_k_chain, sizeof(__pyx_k_chain), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_col, __pyx_k_col, sizeof(__pyx_k_col), 0, 0, 1, 1},
  {&__pyx_n_s_columns_locals_genexpr, __pyx_k_columns_locals_genexpr, sizeof(__pyx_k_columns_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_copy_2, __pyx_k_copy_2, sizeof(__pyx_k_copy_2), 0, 0, 1, 1},
  {&__pyx_n_s_cos_a, __pyx_k_cos_a, sizeof(__pyx_k_cos_a), 0, 0, 1, 1},
  {&__pyx_n_s_cx, __pyx_k_cx, sizeof(__pyx_k_cx), 0, 0, 1, 1},
  {&__pyx_n_s_cxsy, __pyx_k_cxsy, sizeof(__pyx_k_cxsy), 0, 0, 1, 1},
  {&__pyx_n_s_cy, __pyx_k_cy, sizeof(__pyx_k_cy), 0, 0, 1, 1},
  {&__pyx_n_s_cz, __pyx_k_cz, sizeof(__pyx_k_cz), 0, 0, 1, 1},
  {&__pyx_n_s_determinant, __pyx_k_determinant, sizeof(__pyx_k_determinant), 0, 0, 1, 1},
  {&__pyx_n_s_dx, __pyx_k_dx, sizeof(__pyx_k_dx), 0, 0, 1, 1},
  {&__pyx_n_s_dy, __pyx_k_dy, sizeof(__pyx_k_dy), 0, 0, 1, 1},
  {&__pyx_n_s_dz, __pyx_k_dz, sizeof(__pyx_k_dz), 0, 0, 1, 1},
  {&__pyx_n_s_ezdxf_acc_matrix44, __pyx_k_ezdxf_acc_matrix44, sizeof(__pyx_k_ezdxf_acc_matrix44), 0, 0, 1, 1},
  {&__pyx_n_s_ezdxf_eztypes, __pyx_k_ezdxf_eztypes, sizeof(__pyx_k_ezdxf_eztypes), 0, 0, 1, 1},
  {&__pyx_n_s_far, __pyx_k_far, sizeof(__pyx_k_far), 0, 0, 1, 1},
  {&__pyx_n_s_format_row, __pyx_k_format_row, sizeof(__pyx_k_format_row), 0, 0, 1, 1},
  {&__pyx_n_s_fov, __pyx_k_fov, sizeof(__pyx_k_fov), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_get_col, __pyx_k_get_col, sizeof(__pyx_k_get_col), 0, 0, 1, 1},
  {&__pyx_n_s_get_row, __pyx_k_get_row, sizeof(__pyx_k_get_row), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_imul, __pyx_k_imul, sizeof(__pyx_k_imul), 0, 0, 1, 1},
  {&__pyx_kp_u_index_out_of_range, __pyx_k_index_out_of_range, sizeof(__pyx_k_index_out_of_range), 0, 1, 0, 0},
  {&__pyx_kp_u_invalid_argument_count, __pyx_k_invalid_argument_count, sizeof(__pyx_k_invalid_argument_count), 0, 1, 0, 0},
  {&__pyx_kp_u_invalid_argument_count_4_row_vec, __pyx_k_invalid_argument_count_4_row_vec, sizeof(__pyx_k_invalid_argument_count_4_row_vec), 0, 1, 0, 0},
  {&__pyx_kp_u_invalid_col_index, __pyx_k_invalid_col_index, sizeof(__pyx_k_invalid_col_index), 0, 1, 0, 0},
  {&__pyx_kp_u_invalid_row_index, __pyx_k_invalid_row_index, sizeof(__pyx_k_invalid_row_index), 0, 1, 0, 0},
  {&__pyx_n_s_iter, __pyx_k_iter, sizeof(__pyx_k_iter), 0, 0, 1, 1},
  {&__pyx_n_s_itertools, __pyx_k_itertools, sizeof(__pyx_k_itertools), 0, 0, 1, 1},
  {&__pyx_n_s_left, __pyx_k_left, sizeof(__pyx_k_left), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_mat, __pyx_k_mat, sizeof(__pyx_k_mat), 0, 0, 1, 1},
  {&__pyx_n_s_math, __pyx_k_math, sizeof(__pyx_k_math), 0, 0, 1, 1},
  {&__pyx_n_s_matrices, __pyx_k_matrices, sizeof(__pyx_k_matrices), 0, 0, 1, 1},
  {&__pyx_n_s_matrix, __pyx_k_matrix, sizeof(__pyx_k_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_near, __pyx_k_near, sizeof(__pyx_k_near), 0, 0, 1, 1},
  {&__pyx_n_s_normalize, __pyx_k_normalize, sizeof(__pyx_k_normalize), 0, 0, 1, 1},
  {&__pyx_n_s_ocs_from_wcs, __pyx_k_ocs_from_wcs, sizeof(__pyx_k_ocs_from_wcs), 0, 0, 1, 1},
  {&__pyx_n_s_ocs_to_wcs, __pyx_k_ocs_to_wcs, sizeof(__pyx_k_ocs_to_wcs), 0, 0, 1, 1},
  {&__pyx_n_s_one_m_cos, __pyx_k_one_m_cos, sizeof(__pyx_k_one_m_cos), 0, 0, 1, 1},
  {&__pyx_n_s_origin, __pyx_k_origin, sizeof(__pyx_k_origin), 0, 0, 1, 1},
  {&__pyx_n_s_origin_2, __pyx_k_origin_2, sizeof(__pyx_k_origin_2), 0, 0, 1, 1},
  {&__pyx_n_s_perspective_projection, __pyx_k_perspective_projection, sizeof(__pyx_k_perspective_projection), 0, 0, 1, 1},
  {&__pyx_n_s_perspective_projection_fov, __pyx_k_perspective_projection_fov, sizeof(__pyx_k_perspective_projection_fov), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_repr___locals_format_row, __pyx_k_repr___locals_format_row, sizeof(__pyx_k_repr___locals_format_row), 0, 0, 1, 1},
  {&__pyx_n_s_repr___locals_format_row_local, __pyx_k_repr___locals_format_row_local, sizeof(__pyx_k_repr___locals_format_row_local), 0, 0, 1, 1},
  {&__pyx_n_s_repr___locals_genexpr, __pyx_k_repr___locals_genexpr, sizeof(__pyx_k_repr___locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_right, __pyx_k_right, sizeof(__pyx_k_right), 0, 0, 1, 1},
  {&__pyx_n_s_row, __pyx_k_row, sizeof(__pyx_k_row), 0, 0, 1, 1},
  {&__pyx_n_s_rows, __pyx_k_rows, sizeof(__pyx_k_rows), 0, 0, 1, 1},
  {&__pyx_n_s_rows_locals_genexpr, __pyx_k_rows_locals_genexpr, sizeof(__pyx_k_rows_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_kp_u_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 1, 0, 0},
  {&__pyx_n_s_scale, __pyx_k_scale, sizeof(__pyx_k_scale), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_shear_xy, __pyx_k_shear_xy, sizeof(__pyx_k_shear_xy), 0, 0, 1, 1},
  {&__pyx_n_s_sin_a, __pyx_k_sin_a, sizeof(__pyx_k_sin_a), 0, 0, 1, 1},
  {&__pyx_kp_s_src_ezdxf_acc_matrix44_pyx, __pyx_k_src_ezdxf_acc_matrix44_pyx, sizeof(__pyx_k_src_ezdxf_acc_matrix44_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s_sx, __pyx_k_sx, sizeof(__pyx_k_sx), 0, 0, 1, 1},
  {&__pyx_n_s_sxsy, __pyx_k_sxsy, sizeof(__pyx_k_sxsy), 0, 0, 1, 1},
  {&__pyx_n_s_sy, __pyx_k_sy, sizeof(__pyx_k_sy), 0, 0, 1, 1},
  {&__pyx_n_s_sz, __pyx_k_sz, sizeof(__pyx_k_sz), 0, 0, 1, 1},
  {&__pyx_n_s_tan, __pyx_k_tan, sizeof(__pyx_k_tan), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_top, __pyx_k_top, sizeof(__pyx_k_top), 0, 0, 1, 1},
  {&__pyx_n_s_transform_direction, __pyx_k_transform_direction, sizeof(__pyx_k_transform_direction), 0, 0, 1, 1},
  {&__pyx_n_s_transform_directions, __pyx_k_transform_directions, sizeof(__pyx_k_transform_directions), 0, 0, 1, 1},
  {&__pyx_n_s_transform_vertices, __pyx_k_transform_vertices, sizeof(__pyx_k_transform_vertices), 0, 0, 1, 1},
  {&__pyx_n_s_transformation, __pyx_k_transformation, sizeof(__pyx_k_transformation), 0, 0, 1, 1},
  {&__pyx_n_s_translate, __pyx_k_translate, sizeof(__pyx_k_translate), 0, 0, 1, 1},
  {&__pyx_n_s_tx, __pyx_k_tx, sizeof(__pyx_k_tx), 0, 0, 1, 1},
  {&__pyx_n_s_ty, __pyx_k_ty, sizeof(__pyx_k_ty), 0, 0, 1, 1},
  {&__pyx_n_s_typing, __pyx_k_typing, sizeof(__pyx_k_typing), 0, 0, 1, 1},
  {&__pyx_n_s_ucs, __pyx_k_ucs, sizeof(__pyx_k_ucs), 0, 0, 1, 1},
  {&__pyx_n_s_ucs_direction_from_wcs, __pyx_k_ucs_direction_from_wcs, sizeof(__pyx_k_ucs_direction_from_wcs), 0, 0, 1, 1},
  {&__pyx_n_s_ux, __pyx_k_ux, sizeof(__pyx_k_ux), 0, 0, 1, 1},
  {&__pyx_n_s_ux_2, __pyx_k_ux_2, sizeof(__pyx_k_ux_2), 0, 0, 1, 1},
  {&__pyx_n_s_uy, __pyx_k_uy, sizeof(__pyx_k_uy), 0, 0, 1, 1},
  {&__pyx_n_s_uy_2, __pyx_k_uy_2, sizeof(__pyx_k_uy_2), 0, 0, 1, 1},
  {&__pyx_n_s_uz, __pyx_k_uz, sizeof(__pyx_k_uz), 0, 0, 1, 1},
  {&__pyx_n_s_uz_2, __pyx_k_uz_2, sizeof(__pyx_k_uz_2), 0, 0, 1, 1},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {&__pyx_n_s_vector, __pyx_k_vector, sizeof(__pyx_k_vector), 0, 0, 1, 1},
  {&__pyx_n_s_vectors, __pyx_k_vectors, sizeof(__pyx_k_vectors), 0, 0, 1, 1},
  {&__pyx_n_s_vrange, __pyx_k_vrange, sizeof(__pyx_k_vrange), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_x_rotate, __pyx_k_x_rotate, sizeof(__pyx_k_x_rotate), 0, 0, 1, 1},
  {&__pyx_n_s_xyz_rotate, __pyx_k_xyz_rotate, sizeof(__pyx_k_xyz_rotate), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_y_rotate, __pyx_k_y_rotate, sizeof(__pyx_k_y_rotate), 0, 0, 1, 1},
  {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
  {&__pyx_n_s_z_rotate, __pyx_k_z_rotate, sizeof(__pyx_k_z_rotate), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 202, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 35, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(0, 61, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 75, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "ezdxf/acc/matrix44.pyx":35
 *         i += 1
 *     if i != 16:
 *         raise ValueError("invalid argument count")             # <<<<<<<<<<<<<<
 * 
 * cdef class Matrix44:
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_invalid_argument_count); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "ezdxf/acc/matrix44.pyx":47
 *             set_floats(self.m, chain(*args))
 *         else:
 *             raise ValueError("invalid argument count: 4 row vectors or "             # <<<<<<<<<<<<<<
 *                              "iterable of 16 numbers")
 * 
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_invalid_argument_count_4_row_vec); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "ezdxf/acc/matrix44.pyx":79
 * 
 *     def __repr__(self) -> str:
 *         def format_row(row):             # <<<<<<<<<<<<<<
 *             return "(%s)" % ", ".join(str(value) for value in row)
 * 
 */
  __pyx_tuple__4 = PyTuple_Pack(3, __pyx_n_s_row, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);
  __pyx_codeobj__5 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__4, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_ezdxf_acc_matrix44_pyx, __pyx_n_s_format_row, 79, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__5)) __PYX_ERR(0, 79, __pyx_L1_error)

  /* "ezdxf/acc/matrix44.pyx":128
 * 
 *     def rows(self) -> Iterable[Tuple[float, ...]]:
 *         return (self.get_row(index) for index in (0, 1, 2, 3))             # <<<<<<<<<<<<<<
 * 
 *     def columns(self) -> Iterable[Tuple[float, ...]]:
 */
  __pyx_tuple__6 = PyTuple_Pack(4, __pyx_int_0, __pyx_int_1, __pyx_int_2, __pyx_int_3); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "ezdxf/acc/matrix44.pyx":203
 * 
 *     @staticmethod
 *     def scale(double sx, sy = None, sz = None) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         mat.m[0] = sx
 */
  __pyx_tuple__11 = PyTuple_Pack(4, __pyx_n_s_sx, __pyx_n_s_sy, __pyx_n_s_sz, __pyx_n_s_mat); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_ezdxf_acc_matrix44_pyx, __pyx_n_s_scale, 203, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(0, 203, __pyx_L1_error)

  /* "ezdxf/acc/matrix44.pyx":211
 * 
 *     @staticmethod
 *     def translate(double dx, double dy, double dz) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         mat.m[12] = dx
 */
  __pyx_tuple__13 = PyTuple_Pack(4, __pyx_n_s_dx, __pyx_n_s_dy, __pyx_n_s_dz, __pyx_n_s_mat); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_ezdxf_acc_matrix44_pyx, __pyx_n_s_translate, 211, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(0, 211, __pyx_L1_error)

  /* "ezdxf/acc/matrix44.pyx":219
 * 
 *     @staticmethod
 *     def x_rotate(double angle) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double cos_a = cos(angle)
 */
  __pyx_tuple__15 = PyTuple_Pack(4, __pyx_n_s_angle, __pyx_n_s_mat, __pyx_n_s_cos_a, __pyx_n_s_sin_a); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__15, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_ezdxf_acc_matrix44_pyx, __pyx_n_s_x_rotate, 219, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) __PYX_ERR(0, 219, __pyx_L1_error)

  /* "ezdxf/acc/matrix44.pyx":230
 * 
 *     @staticmethod
 *     def y_rotate(double angle) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double cos_a = cos(angle)
 */
  __pyx_tuple__17 = PyTuple_Pack(4, __pyx_n_s_angle, __pyx_n_s_mat, __pyx_n_s_cos_a, __pyx_n_s_sin_a); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_ezdxf_acc_matrix44_pyx, __pyx_n_s_y_rotate, 230, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(0, 230, __pyx_L1_error)

  /* "ezdxf/acc/matrix44.pyx":241
 * 
 *     @staticmethod
 *     def z_rotate(double angle) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double cos_a = cos(angle)
 */
  __pyx_tuple__19 = PyTuple_Pack(4, __pyx_n_s_angle, __pyx_n_s_mat, __pyx_n_s_cos_a, __pyx_n_s_sin_a); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_ezdxf_acc_matrix44_pyx, __pyx_n_s_z_rotate, 241, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) __PYX_ERR(0, 241, __pyx_L1_error)

  /* "ezdxf/acc/matrix44.pyx":252
 * 
 *     @staticmethod
 *     def axis_rotate(axis: 'Vertex', double angle) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double cos_a = cos(angle)
 */
  __pyx_tuple__21 = PyTuple_Pack(10, __pyx_n_s_axis, __pyx_n_s_angle, __pyx_n_s_mat, __pyx_n_s_cos_a, __pyx_n_s_sin_a, __pyx_n_s_one_m_cos, __pyx_n_s_axis_2, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_z); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(2, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_ezdxf_acc_matrix44_pyx, __pyx_n_s_axis_rotate, 252, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(0, 252, __pyx_L1_error)

  /* "ezdxf/acc/matrix44.pyx":277
 * 
 *     @staticmethod
 *     def xyz_rotate(double angle_x, double angle_y,             # <<<<<<<<<<<<<<
 *                    double angle_z) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()
 */
  __pyx_tuple__23 = PyTuple_Pack(12, __pyx_n_s_angle_x, __pyx_n_s_angle_y, __pyx_n_s_angle_z, __pyx_n_s_mat, __pyx_n_s_cx, __pyx_n_s_sx, __pyx_n_s_cy, __pyx_n_s_sy, __pyx_n_s_cz, __pyx_n_s_sz, __pyx_n_s_sxsy, __pyx_n_s_cxsy); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);
  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(3, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__23, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_ezdxf_acc_matrix44_pyx, __pyx_n_s_xyz_rotate, 277, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) __PYX_ERR(0, 277, __pyx_L1_error)

  /* "ezdxf/acc/matrix44.pyx":301
 * 
 *     @staticmethod
 *     def shear_xy(double angle_x = 0, double angle_y = 0) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double tx = tan(angle_x)
 */
  __pyx_tuple__25 = PyTuple_Pack(5, __pyx_n_s_angle_x, __pyx_n_s_angle_y, __pyx_n_s_mat, __pyx_n_s_tx, __pyx_n_s_ty); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_ezdxf_acc_matrix44_pyx, __pyx_n_s_shear_xy, 301, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(0, 301, __pyx_L1_error)

  /* "ezdxf/acc/matrix44.pyx":310
 * 
 *     @staticmethod
 *     def perspective_projection(double left, double right, double top,             # <<<<<<<<<<<<<<
 *                                double bottom, double near,
 *                                double far) -> 'Matrix44':
 */
  __pyx_tuple__27 = PyTuple_Pack(7, __pyx_n_s_left, __pyx_n_s_right, __pyx_n_s_top, __pyx_n_s_bottom, __pyx_n_s_near, __pyx_n_s_far, __pyx_n_s_mat); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(6, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_ezdxf_acc_matrix44_pyx, __pyx_n_s_perspective_projection, 310, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(0, 310, __pyx_L1_error)

  /* "ezdxf/acc/matrix44.pyx":324
 * 
 *     @staticmethod
 *     def perspective_projection_fov(fov: float, aspect: float, near: float,             # <<<<<<<<<<<<<<
 *                                    far: float) -> 'Matrix44':
 *         vrange = near * math.tan(fov / 2.)
 */
  __pyx_tuple__29 = PyTuple_Pack(9, __pyx_n_s_fov, __pyx_n_s_aspect, __pyx_n_s_near, __pyx_n_s_far, __pyx_n_s_vrange, __pyx_n_s_left, __pyx_n_s_right, __pyx_n_s_bottom, __pyx_n_s_top); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(4, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__29, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_ezdxf_acc_matrix44_pyx, __pyx_n_s_perspective_projection_fov, 324, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(0, 324, __pyx_L1_error)

  /* "ezdxf/acc/matrix44.pyx":335
 * 
 *     @staticmethod
 *     def chain(*matrices: 'Matrix44') -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 transformation = Matrix44()
 *         for matrix in matrices:
 */
  __pyx_tuple__31 = PyTuple_Pack(3, __pyx_n_s_matrices, __pyx_n_s_transformation, __pyx_n_s_matrix); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__31, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_ezdxf_acc_matrix44_pyx, __pyx_n_s_chain, 335, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(0, 335, __pyx_L1_error)

  /* "ezdxf/acc/matrix44.pyx":483
 * 
 *     @staticmethod
 *     def ucs(ux=X_AXIS, uy=Y_AXIS, uz=Z_AXIS, origin=NULLVEC) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         cdef Vec3 _ux = Vec3(ux)
 */
  __pyx_tuple__33 = PyTuple_Pack(9, __pyx_n_s_ux, __pyx_n_s_uy, __pyx_n_s_uz, __pyx_n_s_origin, __pyx_n_s_mat, __pyx_n_s_ux_2, __pyx_n_s_uy_2, __pyx_n_s_uz_2, __pyx_n_s_origin_2); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(4, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__33, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_ezdxf_acc_matrix44_pyx, __pyx_n_s_ucs, 483, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_13 = PyInt_FromLong(13); if (unlikely(!__pyx_int_13)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_5ezdxf_3acc_8matrix44_Matrix44 = &__pyx_vtable_5ezdxf_3acc_8matrix44_Matrix44;
  __pyx_vtable_5ezdxf_3acc_8matrix44_Matrix44.get_ux = (struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *(*)(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *))__pyx_f_5ezdxf_3acc_8matrix44_8Matrix44_get_ux;
  __pyx_vtable_5ezdxf_3acc_8matrix44_Matrix44.get_uy = (struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *(*)(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *))__pyx_f_5ezdxf_3acc_8matrix44_8Matrix44_get_uy;
  __pyx_vtable_5ezdxf_3acc_8matrix44_Matrix44.get_uz = (struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *(*)(struct __pyx_obj_5ezdxf_3acc_8matrix44_Matrix44 *))__pyx_f_5ezdxf_3acc_8matrix44_8Matrix44_get_uz;
  if (PyType_Ready(&__pyx_type_5ezdxf_3acc_8matrix44_Matrix44) < 0) __PYX_ERR(0, 37, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5ezdxf_3acc_8matrix44_Matrix44.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5ezdxf_3acc_8matrix44_Matrix44.tp_dictoffset && __pyx_type_5ezdxf_3acc_8matrix44_Matrix44.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5ezdxf_3acc_8matrix44_Matrix44.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5ezdxf_3acc_8matrix44_Matrix44.tp_dict, __pyx_vtabptr_5ezdxf_3acc_8matrix44_Matrix44) < 0) __PYX_ERR(0, 37, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Matrix44, (PyObject *)&__pyx_type_5ezdxf_3acc_8matrix44_Matrix44) < 0) __PYX_ERR(0, 37, __pyx_L1_error)
  __pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44 = &__pyx_type_5ezdxf_3acc_8matrix44_Matrix44;
  if (PyType_Ready(&__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__) < 0) __PYX_ERR(0, 73, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__.tp_dictoffset && __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__ = &__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct____iter__;
  if (PyType_Ready(&__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__) < 0) __PYX_ERR(0, 78, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__.tp_dictoffset && __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__ = &__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_1___repr__;
  if (PyType_Ready(&__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row) < 0) __PYX_ERR(0, 79, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row.tp_dictoffset && __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row = &__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_2_format_row;
  if (PyType_Ready(&__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr) < 0) __PYX_ERR(0, 80, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr.tp_dictoffset && __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr = &__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_3_genexpr;
  if (PyType_Ready(&__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr.tp_dictoffset && __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr = &__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_4_genexpr;
  if (PyType_Ready(&__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows) < 0) __PYX_ERR(0, 127, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows.tp_dictoffset && __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows = &__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_5_rows;
  if (PyType_Ready(&__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr) < 0) __PYX_ERR(0, 128, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr.tp_dictoffset && __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr = &__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_6_genexpr;
  if (PyType_Ready(&__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns.tp_dictoffset && __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns = &__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_7_columns;
  if (PyType_Ready(&__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr) < 0) __PYX_ERR(0, 131, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr.tp_dictoffset && __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr = &__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_8_genexpr;
  if (PyType_Ready(&__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices) < 0) __PYX_ERR(0, 537, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices.tp_dictoffset && __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices = &__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_9_transform_vertices;
  if (PyType_Ready(&__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions) < 0) __PYX_ERR(0, 553, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions.tp_dictoffset && __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions = &__pyx_type_5ezdxf_3acc_8matrix44___pyx_scope_struct_10_transform_directions;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("ezdxf.acc.vector"); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5ezdxf_3acc_6vector_Vec2 = __Pyx_ImportType(__pyx_t_1, "ezdxf.acc.vector", "Vec2", sizeof(struct __pyx_obj_5ezdxf_3acc_6vector_Vec2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5ezdxf_3acc_6vector_Vec2) __PYX_ERR(1, 14, __pyx_L1_error)
  __pyx_vtabptr_5ezdxf_3acc_6vector_Vec2 = (struct __pyx_vtabstruct_5ezdxf_3acc_6vector_Vec2*)__Pyx_GetVtable(__pyx_ptype_5ezdxf_3acc_6vector_Vec2->tp_dict); if (unlikely(!__pyx_vtabptr_5ezdxf_3acc_6vector_Vec2)) __PYX_ERR(1, 14, __pyx_L1_error)
  __pyx_ptype_5ezdxf_3acc_6vector_Vec3 = __Pyx_ImportType(__pyx_t_1, "ezdxf.acc.vector", "Vec3", sizeof(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5ezdxf_3acc_6vector_Vec3) __PYX_ERR(1, 36, __pyx_L1_error)
  __pyx_vtabptr_5ezdxf_3acc_6vector_Vec3 = (struct __pyx_vtabstruct_5ezdxf_3acc_6vector_Vec3*)__Pyx_GetVtable(__pyx_ptype_5ezdxf_3acc_6vector_Vec3->tp_dict); if (unlikely(!__pyx_vtabptr_5ezdxf_3acc_6vector_Vec3)) __PYX_ERR(1, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("ezdxf.acc.vector"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction(__pyx_t_1, "v3_dot", (void (**)(void))&__pyx_f_5ezdxf_3acc_6vector_v3_dot, "double (struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "v3_cross", (void (**)(void))&__pyx_f_5ezdxf_3acc_6vector_v3_cross, "struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "v3_normalize", (void (**)(void))&__pyx_f_5ezdxf_3acc_6vector_v3_normalize, "struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *(struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, double)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "v3_isclose", (void (**)(void))&__pyx_f_5ezdxf_3acc_6vector_v3_isclose, "int (struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, struct __pyx_obj_5ezdxf_3acc_6vector_Vec3 *, double, double)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initmatrix44(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initmatrix44(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_matrix44(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_matrix44(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_matrix44(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  static double __pyx_t_4[16];
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'matrix44' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_matrix44(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("matrix44", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_ezdxf__acc__matrix44) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "ezdxf.acc.matrix44")) {
      if (unlikely(PyDict_SetItemString(modules, "ezdxf.acc.matrix44", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely(__Pyx_modinit_function_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "ezdxf/acc/matrix44.pyx":5
 * # Copyright (c) 2020-2021, Manfred Moitzi
 * # License: MIT License
 * from typing import Sequence, Iterable, Tuple, TYPE_CHECKING             # <<<<<<<<<<<<<<
 * from itertools import chain
 * import math
 */
  __pyx_t_1 = PyList_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Sequence);
  __Pyx_GIVEREF(__pyx_n_s_Sequence);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Sequence);
  __Pyx_INCREF(__pyx_n_s_Iterable);
  __Pyx_GIVEREF(__pyx_n_s_Iterable);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_Iterable);
  __Pyx_INCREF(__pyx_n_s_Tuple);
  __Pyx_GIVEREF(__pyx_n_s_Tuple);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_Tuple);
  __Pyx_INCREF(__pyx_n_s_TYPE_CHECKING);
  __Pyx_GIVEREF(__pyx_n_s_TYPE_CHECKING);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_TYPE_CHECKING);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_typing, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Sequence); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Sequence, __pyx_t_1) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Iterable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Iterable, __pyx_t_1) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Tuple, __pyx_t_1) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_TYPE_CHECKING); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TYPE_CHECKING, __pyx_t_1) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ezdxf/acc/matrix44.pyx":6
 * # License: MIT License
 * from typing import Sequence, Iterable, Tuple, TYPE_CHECKING
 * from itertools import chain             # <<<<<<<<<<<<<<
 * import math
 * from .vector cimport (
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_chain);
  __Pyx_GIVEREF(__pyx_n_s_chain);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_chain);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_itertools, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_chain); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_chain, __pyx_t_2) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":7
 * from typing import Sequence, Iterable, Tuple, TYPE_CHECKING
 * from itertools import chain
 * import math             # <<<<<<<<<<<<<<
 * from .vector cimport (
 * Vec3, v3_normalize, v3_isclose, v3_cross, v3_dot,
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_math, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_math, __pyx_t_1) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pyx":11
 * Vec3, v3_normalize, v3_isclose, v3_cross, v3_dot,
 * )
 * from .vector import X_AXIS, Y_AXIS, Z_AXIS, NULLVEC             # <<<<<<<<<<<<<<
 * 
 * from libc.math cimport fabs, sin, cos, tan
 */
  __pyx_t_1 = PyList_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_X_AXIS);
  __Pyx_GIVEREF(__pyx_n_s_X_AXIS);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_X_AXIS);
  __Pyx_INCREF(__pyx_n_s_Y_AXIS);
  __Pyx_GIVEREF(__pyx_n_s_Y_AXIS);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_Y_AXIS);
  __Pyx_INCREF(__pyx_n_s_Z_AXIS);
  __Pyx_GIVEREF(__pyx_n_s_Z_AXIS);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_Z_AXIS);
  __Pyx_INCREF(__pyx_n_s_NULLVEC);
  __Pyx_GIVEREF(__pyx_n_s_NULLVEC);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_NULLVEC);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_vector, __pyx_t_1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_X_AXIS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_X_AXIS, __pyx_t_1) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Y_AXIS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Y_AXIS, __pyx_t_1) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Z_AXIS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Z_AXIS, __pyx_t_1) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_NULLVEC); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NULLVEC, __pyx_t_1) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ezdxf/acc/matrix44.pyx":15
 * from libc.math cimport fabs, sin, cos, tan
 * 
 * if TYPE_CHECKING:             # <<<<<<<<<<<<<<
 *     from ezdxf.eztypes import Vertex
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_TYPE_CHECKING); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "ezdxf/acc/matrix44.pyx":16
 * 
 * if TYPE_CHECKING:
 *     from ezdxf.eztypes import Vertex             # <<<<<<<<<<<<<<
 * 
 * DEF ABS_TOL = 1e-12
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_Vertex);
    __Pyx_GIVEREF(__pyx_n_s_Vertex);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Vertex);
    __pyx_t_1 = __Pyx_Import(__pyx_n_s_ezdxf_eztypes, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Vertex); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_Vertex, __pyx_t_2) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ezdxf/acc/matrix44.pyx":15
 * from libc.math cimport fabs, sin, cos, tan
 * 
 * if TYPE_CHECKING:             # <<<<<<<<<<<<<<
 *     from ezdxf.eztypes import Vertex
 * 
 */
  }

  /* "ezdxf/acc/matrix44.pyx":21
 * DEF REL_TOL = 1e-9
 * 
 * cdef double[16] IDENTITY = [             # <<<<<<<<<<<<<<
 *     1.0, 0.0, 0.0, 0.0,
 *     0.0, 1.0, 0.0, 0.0,
 */
  __pyx_t_4[0] = 1.0;
  __pyx_t_4[1] = 0.0;
  __pyx_t_4[2] = 0.0;
  __pyx_t_4[3] = 0.0;
  __pyx_t_4[4] = 0.0;
  __pyx_t_4[5] = 1.0;
  __pyx_t_4[6] = 0.0;
  __pyx_t_4[7] = 0.0;
  __pyx_t_4[8] = 0.0;
  __pyx_t_4[9] = 0.0;
  __pyx_t_4[10] = 1.0;
  __pyx_t_4[11] = 0.0;
  __pyx_t_4[12] = 0.0;
  __pyx_t_4[13] = 0.0;
  __pyx_t_4[14] = 0.0;
  __pyx_t_4[15] = 1.0;
  memcpy(&(__pyx_v_5ezdxf_3acc_8matrix44_IDENTITY[0]), __pyx_t_4, sizeof(__pyx_v_5ezdxf_3acc_8matrix44_IDENTITY[0]) * (16));

  /* "ezdxf/acc/matrix44.pyx":138
 *         return _copy
 * 
 *     __copy__ = copy             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44, __pyx_n_s_copy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44->tp_dict, __pyx_n_s_copy_2, __pyx_t_1) < 0) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44);

  /* "ezdxf/acc/matrix44.pyx":203
 * 
 *     @staticmethod
 *     def scale(double sx, sy = None, sz = None) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         mat.m[0] = sx
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5ezdxf_3acc_8matrix44_8Matrix44_30scale, NULL, __pyx_n_s_ezdxf_acc_matrix44); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44->tp_dict, __pyx_n_s_scale, __pyx_t_1) < 0) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44);

  /* "ezdxf/acc/matrix44.pyx":202
 *                fabs(v3_dot(uy, uz)) < 1e-9
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def scale(double sx, sy = None, sz = None) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44, __pyx_n_s_scale); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44->tp_dict, __pyx_n_s_scale, __pyx_t_2) < 0) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44);

  /* "ezdxf/acc/matrix44.pyx":211
 * 
 *     @staticmethod
 *     def translate(double dx, double dy, double dz) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         mat.m[12] = dx
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5ezdxf_3acc_8matrix44_8Matrix44_32translate, NULL, __pyx_n_s_ezdxf_acc_matrix44); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44->tp_dict, __pyx_n_s_translate, __pyx_t_2) < 0) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44);

  /* "ezdxf/acc/matrix44.pyx":210
 *         return mat
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def translate(double dx, double dy, double dz) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44, __pyx_n_s_translate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44->tp_dict, __pyx_n_s_translate, __pyx_t_1) < 0) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44);

  /* "ezdxf/acc/matrix44.pyx":219
 * 
 *     @staticmethod
 *     def x_rotate(double angle) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double cos_a = cos(angle)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5ezdxf_3acc_8matrix44_8Matrix44_34x_rotate, NULL, __pyx_n_s_ezdxf_acc_matrix44); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44->tp_dict, __pyx_n_s_x_rotate, __pyx_t_1) < 0) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44);

  /* "ezdxf/acc/matrix44.pyx":218
 *         return mat
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def x_rotate(double angle) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44, __pyx_n_s_x_rotate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44->tp_dict, __pyx_n_s_x_rotate, __pyx_t_2) < 0) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44);

  /* "ezdxf/acc/matrix44.pyx":230
 * 
 *     @staticmethod
 *     def y_rotate(double angle) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double cos_a = cos(angle)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5ezdxf_3acc_8matrix44_8Matrix44_36y_rotate, NULL, __pyx_n_s_ezdxf_acc_matrix44); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44->tp_dict, __pyx_n_s_y_rotate, __pyx_t_2) < 0) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44);

  /* "ezdxf/acc/matrix44.pyx":229
 *         return mat
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def y_rotate(double angle) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44, __pyx_n_s_y_rotate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44->tp_dict, __pyx_n_s_y_rotate, __pyx_t_1) < 0) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44);

  /* "ezdxf/acc/matrix44.pyx":241
 * 
 *     @staticmethod
 *     def z_rotate(double angle) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double cos_a = cos(angle)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5ezdxf_3acc_8matrix44_8Matrix44_38z_rotate, NULL, __pyx_n_s_ezdxf_acc_matrix44); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44->tp_dict, __pyx_n_s_z_rotate, __pyx_t_1) < 0) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44);

  /* "ezdxf/acc/matrix44.pyx":240
 *         return mat
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def z_rotate(double angle) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44, __pyx_n_s_z_rotate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44->tp_dict, __pyx_n_s_z_rotate, __pyx_t_2) < 0) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44);

  /* "ezdxf/acc/matrix44.pyx":252
 * 
 *     @staticmethod
 *     def axis_rotate(axis: 'Vertex', double angle) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double cos_a = cos(angle)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5ezdxf_3acc_8matrix44_8Matrix44_40axis_rotate, NULL, __pyx_n_s_ezdxf_acc_matrix44); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44->tp_dict, __pyx_n_s_axis_rotate, __pyx_t_2) < 0) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44);

  /* "ezdxf/acc/matrix44.pyx":251
 *         return mat
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def axis_rotate(axis: 'Vertex', double angle) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44, __pyx_n_s_axis_rotate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44->tp_dict, __pyx_n_s_axis_rotate, __pyx_t_1) < 0) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44);

  /* "ezdxf/acc/matrix44.pyx":277
 * 
 *     @staticmethod
 *     def xyz_rotate(double angle_x, double angle_y,             # <<<<<<<<<<<<<<
 *                    double angle_z) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5ezdxf_3acc_8matrix44_8Matrix44_42xyz_rotate, NULL, __pyx_n_s_ezdxf_acc_matrix44); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44->tp_dict, __pyx_n_s_xyz_rotate, __pyx_t_1) < 0) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44);

  /* "ezdxf/acc/matrix44.pyx":276
 *         return mat
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def xyz_rotate(double angle_x, double angle_y,
 *                    double angle_z) -> 'Matrix44':
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44, __pyx_n_s_xyz_rotate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44->tp_dict, __pyx_n_s_xyz_rotate, __pyx_t_2) < 0) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44);

  /* "ezdxf/acc/matrix44.pyx":301
 * 
 *     @staticmethod
 *     def shear_xy(double angle_x = 0, double angle_y = 0) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         cdef double tx = tan(angle_x)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5ezdxf_3acc_8matrix44_8Matrix44_44shear_xy, NULL, __pyx_n_s_ezdxf_acc_matrix44); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44->tp_dict, __pyx_n_s_shear_xy, __pyx_t_2) < 0) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44);

  /* "ezdxf/acc/matrix44.pyx":300
 *         return mat
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def shear_xy(double angle_x = 0, double angle_y = 0) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44, __pyx_n_s_shear_xy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44->tp_dict, __pyx_n_s_shear_xy, __pyx_t_1) < 0) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44);

  /* "ezdxf/acc/matrix44.pyx":310
 * 
 *     @staticmethod
 *     def perspective_projection(double left, double right, double top,             # <<<<<<<<<<<<<<
 *                                double bottom, double near,
 *                                double far) -> 'Matrix44':
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5ezdxf_3acc_8matrix44_8Matrix44_46perspective_projection, NULL, __pyx_n_s_ezdxf_acc_matrix44); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44->tp_dict, __pyx_n_s_perspective_projection, __pyx_t_1) < 0) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44);

  /* "ezdxf/acc/matrix44.pyx":309
 *         return mat
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def perspective_projection(double left, double right, double top,
 *                                double bottom, double near,
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44, __pyx_n_s_perspective_projection); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44->tp_dict, __pyx_n_s_perspective_projection, __pyx_t_2) < 0) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44);

  /* "ezdxf/acc/matrix44.pyx":324
 * 
 *     @staticmethod
 *     def perspective_projection_fov(fov: float, aspect: float, near: float,             # <<<<<<<<<<<<<<
 *                                    far: float) -> 'Matrix44':
 *         vrange = near * math.tan(fov / 2.)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5ezdxf_3acc_8matrix44_8Matrix44_48perspective_projection_fov, NULL, __pyx_n_s_ezdxf_acc_matrix44); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44->tp_dict, __pyx_n_s_perspective_projection_fov, __pyx_t_2) < 0) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44);

  /* "ezdxf/acc/matrix44.pyx":323
 *         return mat
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def perspective_projection_fov(fov: float, aspect: float, near: float,
 *                                    far: float) -> 'Matrix44':
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44, __pyx_n_s_perspective_projection_fov); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44->tp_dict, __pyx_n_s_perspective_projection_fov, __pyx_t_1) < 0) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44);

  /* "ezdxf/acc/matrix44.pyx":335
 * 
 *     @staticmethod
 *     def chain(*matrices: 'Matrix44') -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 transformation = Matrix44()
 *         for matrix in matrices:
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5ezdxf_3acc_8matrix44_8Matrix44_50chain, NULL, __pyx_n_s_ezdxf_acc_matrix44); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44->tp_dict, __pyx_n_s_chain, __pyx_t_1) < 0) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44);

  /* "ezdxf/acc/matrix44.pyx":334
 *                                                far)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def chain(*matrices: 'Matrix44') -> 'Matrix44':
 *         cdef Matrix44 transformation = Matrix44()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44, __pyx_n_s_chain); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44->tp_dict, __pyx_n_s_chain, __pyx_t_2) < 0) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44);

  /* "ezdxf/acc/matrix44.pyx":483
 * 
 *     @staticmethod
 *     def ucs(ux=X_AXIS, uy=Y_AXIS, uz=Z_AXIS, origin=NULLVEC) -> 'Matrix44':             # <<<<<<<<<<<<<<
 *         cdef Matrix44 mat = Matrix44()
 *         cdef Vec3 _ux = Vec3(ux)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_X_AXIS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__7 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Y_AXIS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__8 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Z_AXIS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__9 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_NULLVEC); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__10 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5ezdxf_3acc_8matrix44_8Matrix44_64ucs, NULL, __pyx_n_s_ezdxf_acc_matrix44); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44->tp_dict, __pyx_n_s_ucs, __pyx_t_2) < 0) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44);

  /* "ezdxf/acc/matrix44.pyx":482
 *                       m[0] * m[5] * m[10]) * f
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def ucs(ux=X_AXIS, uy=Y_AXIS, uz=Z_AXIS, origin=NULLVEC) -> 'Matrix44':
 *         cdef Matrix44 mat = Matrix44()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44, __pyx_n_s_ucs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44->tp_dict, __pyx_n_s_ucs, __pyx_t_1) < 0) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44);

  /* "ezdxf/acc/matrix44.pyx":535
 *             return res
 * 
 *     ocs_to_wcs = transform_direction             # <<<<<<<<<<<<<<
 * 
 *     def transform_vertices(self, vectors: Iterable['Vertex']) -> Iterable[Vec3]:
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44, __pyx_n_s_transform_direction); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44->tp_dict, __pyx_n_s_ocs_to_wcs, __pyx_t_1) < 0) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44);

  /* "ezdxf/acc/matrix44.pyx":586
 *         return res
 * 
 *     ocs_from_wcs = ucs_direction_from_wcs             # <<<<<<<<<<<<<<
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44, __pyx_n_s_ucs_direction_from_wcs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44->tp_dict, __pyx_n_s_ocs_from_wcs, __pyx_t_1) < 0) __PYX_ERR(0, 586, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5ezdxf_3acc_8matrix44_Matrix44);

  /* "ezdxf/acc/matrix44.pyx":1
 * # cython: language_level=3             # <<<<<<<<<<<<<<
 * # distutils: language = c++
 * # Copyright (c) 2020-2021, Manfred Moitzi
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ezdxf/acc/matrix44.pxd":14
 *     cdef Vec3 get_uz(self)
 * 
 * cdef inline swap(double *a, double *b):             # <<<<<<<<<<<<<<
 *     cdef double tmp = a[0]
 *     a[0] = b[0]
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init ezdxf.acc.matrix44", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init ezdxf.acc.matrix44");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* None */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunctionShared */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
#if PY_MAJOR_VERSION < 3
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
#endif
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* CIntToDigits */
static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};

/* BuildPyUnicode */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
#if CYTHON_PEP393_ENABLED
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
#else
    Py_UNICODE *udata;
    uval = PyUnicode_FromUnicode(NULL, ulength);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_AS_UNICODE(uval);
#endif
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        PyObject *sign = NULL, *padding = NULL;
        uval = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp;
                    PyObject *repeat = PyInt_FromSize_t(uoffset - prepend_sign);
                    if (unlikely(!repeat)) goto done_or_error;
                    tmp = PyNumber_Multiply(padding, repeat);
                    Py_DECREF(repeat);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyNumber_Add(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyNumber_Add(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* CIntToPyUnicode */
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned short    uint16_t;
        #else
           typedef unsigned __int16  uint16_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(int)*3+2];
    char *dpos, *end = digits + sizeof(int)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    int remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (int) (remaining / (8*8));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_8)[digit_pos];
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (int) (remaining / (10*10));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_10)[digit_pos];
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (int) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    if (last_one_off) {
        assert(*dpos == '0');
        dpos++;
    }
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetNameInClass */
static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    PyObject *result;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* CoroutineBase */
#include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
            _PyGen_SetStopIterationValue(result);
        }
        Py_CLEAR(result);
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    __Pyx_SET_REFCNT(self, 1);
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        __Pyx_SET_REFCNT(self, refcnt);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
